<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ceshi</title>
      <link href="2021/05/12/ceshi/"/>
      <url>2021/05/12/ceshi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src= "/img/loading.gif" data-lazy-src="js11.png"><br><img src= "/img/loading.gif" data-lazy-src="1.png" alt="1"><br><img src= "/img/loading.gif" data-lazy-src="%E6%92%A4%E9%94%80.png" alt="alt"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flex 布局</title>
      <link href="2021/05/05/flex%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/05/flex%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="1、父项常见属性"><a href="#1、父项常见属性" class="headerlink" title="1、父项常见属性"></a>1、父项常见属性</h1><ul><li><p>flex-direction：设置主轴的方向</p></li><li><p>justify-content：设置主轴上的子元素排列方式</p></li><li><p>flex-wrap：设置子元素是否换行</p></li><li><p>align-content：设置侧轴上的子元素的排列方式（多行）</p></li><li><p>align-items：设置侧轴上的子元素排列方式（单行）</p></li><li><p>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flexwrap</p></li></ul><h2 id="1-1-flex-direction-设置主轴的方向"><a href="#1-1-flex-direction-设置主轴的方向" class="headerlink" title="1.1 flex-direction 设置主轴的方向"></a>1.1 flex-direction 设置主轴的方向</h2><p>默认主轴方向就是 x 轴方向，水平向右<br>​ 默认侧轴方向就是 y 轴方向，水平向下</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20201205194442207.png"></p><h2 id="1-2-justify-content-设置主轴上的子元素排列方式"><a href="#1-2-justify-content-设置主轴上的子元素排列方式" class="headerlink" title="1.2 justify-content 设置主轴上的子元素排列方式"></a>1.2 justify-content 设置主轴上的子元素排列方式</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/justify-content.png"></p><h2 id="1-3-flex-wrap-设置是否换行"><a href="#1-3-flex-wrap-设置是否换行" class="headerlink" title="1.3 flex-wrap 设置是否换行"></a>1.3 flex-wrap 设置是否换行</h2><table><thead><tr><th align="center">nowrap</th><th align="center">不换行</th></tr></thead><tbody><tr><td align="center"><strong>wrap</strong></td><td align="center"><strong>换行</strong></td></tr></tbody></table><h2 id="1-4-align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#1-4-align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="1.4 align-items 设置侧轴上的子元素排列方式（单行 ）"></a>1.4 align-items 设置侧轴上的子元素排列方式（单行 ）</h2><table><thead><tr><th align="center">flex-start</th><th align="center">从头部开始</th></tr></thead><tbody><tr><td align="center"><strong>flex-end</strong></td><td align="center"><strong>从尾部开始</strong></td></tr><tr><td align="center"><strong>center</strong></td><td align="center"><strong>居中显示</strong></td></tr><tr><td align="center"><strong>stretch</strong></td><td align="center"><strong>拉伸</strong></td></tr></tbody></table><h2 id="1-5-align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#1-5-align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="1.5 align-content 设置侧轴上的子元素的排列方式（多行）"></a>1.5 align-content 设置侧轴上的子元素的排列方式（多行）</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/align-content.png"></p><h2 id="1-6-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#1-6-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="1.6 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>1.6 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flex-flow:row wrap;</span><br></pre></td></tr></table></figure><h1 id="2、flex-布局子项常见属性"><a href="#2、flex-布局子项常见属性" class="headerlink" title="2、flex 布局子项常见属性"></a>2、flex 布局子项常见属性</h1><ul><li><p>flex 子项目占的份数</p></li><li><p>align-self 控制子项自己在侧轴的排列方式</p></li><li><p>order 属性定义子项的排列顺序（前后顺序）</p></li></ul><h2 id="2-1-flex-属性"><a href="#2-1-flex-属性" class="headerlink" title="2.1 flex 属性"></a>2.1 flex 属性</h2><ul><li>flex 属性定义子项目分配剩余空间，用 flex 来表示占多少份数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">   flex: &lt;number&gt;; &#x2F;* 默认值 0 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-align-self-控制子项自己在侧轴上的排列方式"><a href="#2-2-align-self-控制子项自己在侧轴上的排列方式" class="headerlink" title="2.2 align-self 控制子项自己在侧轴上的排列方式"></a>2.2 align-self 控制子项自己在侧轴上的排列方式</h2><ul><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</li><li>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">span:nth-child(2) &#123;</span><br><span class="line">     &#x2F;* 设置自己在侧轴上的排列方式 *&#x2F;</span><br><span class="line">     align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-order-属性定义项目的排列顺序"><a href="#2-3-order-属性定义项目的排列顺序" class="headerlink" title="2.3 order 属性定义项目的排列顺序"></a>2.3 order 属性定义项目的排列顺序</h2><ul><li>数值越小，排列越靠前，默认为 0。</li><li>注意：和 z-index 不一样。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">   order: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gti命令 git语法</title>
      <link href="2021/05/05/git/"/>
      <url>2021/05/05/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li><p>了解版本控制软件的作用</p></li><li><p>了解版本控制系统的分类</p></li><li><p>Git 的特性</p></li><li><p>初始化 Git 仓库的命令</p></li><li><p>查看文件状态的命令</p></li><li><p>一次性将文件加入暂存区的命令</p></li><li><p>将暂存区的文件提交到 Git 仓库的命令</p></li></ul><h1 id="一、版本管理"><a href="#一、版本管理" class="headerlink" title="一、版本管理"></a>一、版本管理</h1><h2 id="文件的版本"><a href="#文件的版本" class="headerlink" title="文件的版本"></a>文件的版本</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%92%A4%E9%94%80.png"></p><h2 id="版本控制软件"><a href="#版本控制软件" class="headerlink" title="版本控制软件"></a>版本控制软件</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>版本控制软件</strong>是一个用来记录文件变化，以便将来查阅特定</p><p>版本修订情况的系统，因此有时也叫做“<strong>版本控制系统</strong>”</p><h3 id="通俗的理解"><a href="#通俗的理解" class="headerlink" title="通俗的理解"></a>通俗的理解</h3><p>把<strong>手工管理</strong>文件版本的方式，改为由<strong>软件管理</strong>文件的版本；</p><p>这个<strong>负责管理文件版本的软件</strong>，叫做“版本控制软件”</p><h2 id="使用版本控制软件的好处"><a href="#使用版本控制软件的好处" class="headerlink" title="使用版本控制软件的好处"></a>使用版本控制软件的好处</h2><ul><li><strong>操作简便：</strong>只需<strong>识记几组简单的终端命令</strong>，即可快速上手常见的版本控制软件</li><li><strong>易于对比：</strong>基于版本控制软件提供的功能，能够方便地比较文件的变化细节，从而查找出导致问题的原因</li><li><strong>易于回溯：</strong>可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态</li><li><strong>不易丢失：</strong>在版本控制软件中，被用户误删除的文件，可以轻松的恢复回来</li><li><strong>协作方便：</strong>基于版本控制软件提供的分支功能，可以轻松实现多人协作开发时的代码合并操作</li></ul><h2 id="版本控制系统的分类"><a href="#版本控制系统的分类" class="headerlink" title="版本控制系统的分类"></a>版本控制系统的分类</h2><h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p><strong>单机运行</strong>，使维护文件版本的操作工具化</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>使用软件来记录文件的不同版本，提高了工作效率，降低了手动维护版本的出错率</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>① <strong>单机运行</strong>，不支持多人协作开发</p><p>② 版本数据库故障后，所有历史更新记录会丢失</p><h3 id="集中化的版本控制系统"><a href="#集中化的版本控制系统" class="headerlink" title="集中化的版本控制系统"></a>集中化的版本控制系统</h3><p>联网运行，支持多人协作开发；<strong>性能差、用户体验不好</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%9B%86%E4%B8%AD%E5%8C%96%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"></p><p><strong>典型代表 <code>SVN</code></strong></p><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><p>基于服务器、客户端的运行模式</p><p>① 服务器保存文件的所有更新记录</p><p>② 客户端<strong>只保留最新的文件版本</strong></p><p><strong>优点：</strong>联网运行，支持多人协作开发</p><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><p>① 不支持离线提交版本更新</p><p>② 中心服务器崩溃后，所有人无法正常工作</p><p>③ 版本数据库故障后，所有历史更新记录会丢失</p><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p><strong>联网运行，支持多人协作开发；性能优秀、用户体验好</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"></p><p><strong>典型代表：<code>Git</code></strong></p><h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><p>基于<strong>服务器、客户端</strong>的运行模式</p><p>① 服务器保存文件的所有更新版本</p><p>② <strong>客户端是服务器的完整备份</strong>，并不是只保留文件的最新版本</p><p><strong>优点：</strong></p><p>① 联网运行，支持多人协作开发</p><p>② 客户端<strong>断网</strong>后<strong>支持离线本地提交</strong>版本更新</p><p>③ 服务器故障或损坏后，可使用任何一个客户端的备份进行恢复</p><h1 id="二、Git-基础概念"><a href="#二、Git-基础概念" class="headerlink" title="二、Git 基础概念"></a>二、Git 基础概念</h1><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p><code>Git</code> 是一个<strong>开源的分布式版本控制系统</strong>，是目前世界上<strong>最先进</strong>、<strong>最流行</strong>的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。</p><p>特点：项目越大越复杂，协同开发者越多，越能体现出 Git 的<strong>高性能</strong>和<strong>高可用性</strong>！</p><h3 id="Git-的特性-⭐⭐⭐"><a href="#Git-的特性-⭐⭐⭐" class="headerlink" title="Git 的特性(⭐⭐⭐)"></a><strong>Git 的特性</strong>(⭐⭐⭐)</h3><p>Git 之所以快速和高效，主要依赖于它的如下两个特性：</p><p>① 直接记录快照（完整备份），而非差异比较</p><p>② 近乎所有操作都是本地执行</p><h4 id="SVN-的差异比较"><a href="#SVN-的差异比较" class="headerlink" title="SVN 的差异比较"></a><code>SVN</code> 的差异比较</h4><p>传统的版本控制系统（例如 <code>SVN</code>）是<strong>基于差异</strong>的版本控制，它们存储的是<strong>一组基本文件</strong>和<strong>每个文件随时间逐步累积的差异</strong></p><p>![](/images/SVN 差异比较.png)</p><p><strong>好处：</strong>节省磁盘空间</p><p><strong>缺点：</strong>耗时、效率低</p><p>​ 在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件</p><h4 id="Git-的记录快照"><a href="#Git-的记录快照" class="headerlink" title="Git 的记录快照"></a><code>Git</code> 的记录快照</h4><p><strong>Git 快照</strong>是在原有文件版本的基础上重新生成一份新的文件，<strong>类似于备份</strong>。为了效率，如果文件没有修改，Git</p><p>不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</p><p>![](/images/Git 差异比较.png)</p><p><strong>缺点：</strong>占用磁盘空间较大</p><p><strong>优点：</strong> <strong>版本切换时非常快</strong>，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。</p><p>**特点： ** <strong>空间换时间</strong></p><h4 id="近乎所有操作都是本地执行"><a href="#近乎所有操作都是本地执行" class="headerlink" title="近乎所有操作都是本地执行"></a><strong>近乎所有操作都是本地执行</strong></h4><p>在 Git 中的绝大多数操作都<strong>只需要访问本地文件和资源</strong>，一般不需要来自网络上其它计算机的信息</p><p><strong>特性：</strong></p><p>① 断网后依旧可以在本地对项目进行版本管理</p><p>② 联网后，把本地修改的记录同步到云端服务器即可</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200810214530085.png"></p><h3 id="Git-中的三个区域"><a href="#Git-中的三个区域" class="headerlink" title="Git 中的三个区域"></a><strong><code>Git</code> 中的三个区域</strong></h3><p>使用 <code>Git</code> 管理的项目，拥有三个区域，分别是<strong>工作区</strong>、<strong>暂存区</strong>、**<code>Git</code> 仓库（版本库）**</p><p>![](/images/git 三大区域例子.png)</p><h3 id="Git-中的三种状态"><a href="#Git-中的三种状态" class="headerlink" title="Git 中的三种状态"></a><code>Git</code> 中的三种状态</h3><ul><li><p><strong>已修改 <code>modified</code></strong></p><ul><li>表示修改了文件，但还没将修改的结果放到<strong>暂存区</strong></li></ul></li><li><p><strong>已暂存 <code>staged</code></strong></p><ul><li>表示对已修改文件的当前版本做了标记，使之包含在<strong>下次提交的列表中</strong></li></ul></li><li><p><strong>已提交 <code>committed</code></strong></p><ul><li>表示文件已经安全地保存在本地的 <strong>Git 仓库中</strong></li></ul></li></ul><p><strong>注意：</strong></p><ul><li>工作区的文件被修改了，但还没有放到暂存区，就是<strong>已修改</strong>状态。</li><li>如果文件已修改并放入暂存区，就属于<strong>已暂存</strong>状态。</li><li>如果 Git 仓库中<strong>保存着特定版本</strong>的文件，就属于<strong>已提交</strong>状态。</li></ul><h3 id="基本的-Git-工作流程"><a href="#基本的-Git-工作流程" class="headerlink" title="基本的 Git 工作流程"></a>基本的 <code>Git</code> 工作流程</h3><p>![](/images/git 基本工作流程.png)</p><p>基本的 Git 工作流程如下：</p><p>① 在工作区中修改文件（新建、修改内容、删除都属于修改操作）</p><p>② 将你想要下次提交的更改进行暂存</p><p>③ 提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</p><h1 id="三、安装并配置-Git"><a href="#三、安装并配置-Git" class="headerlink" title="三、安装并配置 Git"></a>三、安装并配置 Git</h1><h3 id="在-Windows-中下载并安装-Git"><a href="#在-Windows-中下载并安装-Git" class="headerlink" title="在 Windows 中下载并安装 Git"></a>在 <code>Windows</code> 中下载并安装 <code>Git</code></h3><p>在开始使用 <code>Git</code> 管理项目的版本之前，需要将它安装到计算机上。可以使用浏览器访问如下的网址，根据自己</p><p>的操作系统，选择下载对应的 <code>Git</code> 安装包：</p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>![](/images/git 的下载.png)</p><p>安装成功：<br><img src= "/img/loading.gif" data-lazy-src="/images/image-20201205194442207.png"></p><p>打开：<br><img src= "/img/loading.gif" data-lazy-src="/images/image-20201205194637593.png"></p><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>安装完 <code>Git</code> 之后，要做的第一件事就是设置自己的<strong>用户名</strong>和<strong>邮件地址</strong>。因为通过 <code>Git</code> 对项目进行版本管理的时</p><p>候，<code>Git</code> 需要使用这些基本信息，来记录是谁对项目进行了操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;itheima&quot;</span><br><span class="line">git config --global user.email &quot;itheima@itcast.cn&quot;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果使用了 –global 选项，那么该命令只需要运行一次，即可永久生效。</p><h3 id="Git-的全局配置文件"><a href="#Git-的全局配置文件" class="headerlink" title="Git 的全局配置文件"></a>Git 的全局配置文件</h3><p>通过 <code>git config --global user.name</code> 和 <code>git config --global user.email</code> 配置的用户名和邮箱地址，会被写</p><p>入到 <code>C:/Users/用户名文件夹/.gitconfig</code> 文件中。这个文件是 <code>Git</code> 的<strong>全局配置文件</strong>，<strong>配置一次即可永久生效</strong>。</p><p>可以使用记事本打开此文件，从而查看自己曾经对 Git 做了哪些全局性的配置。</p><p>![](/images/git 全局配置文件.png)</p><h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><p>除了使用记事本查看全局的配置信息之外，还可以运行如下的终端命令，快速的查看 Git 的全局配置信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的全局配置项</span></span><br><span class="line">git config --list --global</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定的全局配置项</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h3 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h3><p>可以使用 <code>git help &lt;verb&gt;</code> 命令，无需联网即可在浏览器中打开帮助手册，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开 git config 命令的帮助手册</span></span><br><span class="line">git help config</span><br></pre></td></tr></table></figure><p>如果不想查看完整的手册，那么可以用 -h 选项获得更简明的“help”输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 想要获取 git config 命令的快速参考</span></span><br><span class="line">git config -h</span><br></pre></td></tr></table></figure><h1 id="四、Git-的基本操作"><a href="#四、Git-的基本操作" class="headerlink" title="四、Git 的基本操作"></a>四、<code>Git</code> 的基本操作</h1><h2 id="【1】初始化仓库"><a href="#【1】初始化仓库" class="headerlink" title="【1】初始化仓库"></a>【1】初始化仓库</h2><h3 id="获取-Git-仓库的两种方式"><a href="#获取-Git-仓库的两种方式" class="headerlink" title="获取 Git 仓库的两种方式"></a>获取 <code>Git</code> 仓库的两种方式</h3><p>① 将尚未进行版本控制的本地目录<strong>转换</strong>为 <code>Git</code> 仓库</p><p>② 从其它服务器<strong>克隆</strong>一个已存在的 <code>Git</code> 仓库</p><p>以上两种方式都能够在自己的电脑上得到一个可用的 Git 仓库</p><h3 id="在现有目录中初始化仓库-⭐⭐⭐"><a href="#在现有目录中初始化仓库-⭐⭐⭐" class="headerlink" title="在现有目录中初始化仓库(⭐⭐⭐)"></a>在现有目录中初始化仓库(⭐⭐⭐)</h3><p>如果自己有一个尚未进行版本控制的项目目录，想要用 <code>Git</code> 来控制它，需要执行如下两个步骤：</p><p>① 在项目目录中，通过鼠标右键打开“<code>Git Bash</code>”</p><p>② 执行 <code>git init</code> 命令将当前的目录转化为 <code>Git</code> 仓库</p><p><code>git init</code> 命令会创建一个名为 .git 的隐藏目录，<strong>这个 .git 目录就是当前项目的 Git 仓库</strong>，里面包含了<strong>初始的必要文件</strong>，这些文件是 Git 仓库的<strong>必要组成部分</strong></p><h2 id="【2】查看文件状态"><a href="#【2】查看文件状态" class="headerlink" title="【2】查看文件状态"></a>【2】查看文件状态</h2><h3 id="工作区中文件的-4-种状态"><a href="#工作区中文件的-4-种状态" class="headerlink" title="工作区中文件的 4 种状态"></a>工作区中文件的 4 种状态</h3><p>工作区中的每一个文件可能有 4 种状态，这四种状态共分为两大类，如图所示：<br><img src= "/img/loading.gif" data-lazy-src="/images/image-20201205194007317.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%96%87%E4%BB%B6%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p><p><strong>Git 操作的终极结果：</strong>让工作区中的文件都处于<strong>“未修改”</strong>的状态。</p><h3 id="检查文件的状态-⭐⭐⭐"><a href="#检查文件的状态-⭐⭐⭐" class="headerlink" title="检查文件的状态(⭐⭐⭐)"></a>检查文件的状态(⭐⭐⭐)</h3><p>可以使用 <code>git status</code> 命令查看文件处于什么状态，例如</p><p>![](/images/git status.png)</p><p>在状态报告中可以看到新建的 <code>index.html</code> 文件出现在 <code>Untracked files</code>（未跟踪的文件） 下面。</p><p>未跟踪的文件意味着 <strong><code>Git</code> 在之前的快照（提交）中没有这些文件</strong>；<code>Git</code> 不会自动将之纳入跟踪范围，除非明确</p><p>地告诉它“我需要使用 Git 跟踪管理该文件”。</p><h3 id="以精简的方式显示文件状态"><a href="#以精简的方式显示文件状态" class="headerlink" title="以精简的方式显示文件状态"></a>以精简的方式显示文件状态</h3><p>使用 <code>git status</code> 输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下</p><p>两条完全等价的命令，其中 <strong>-s</strong> 是 <strong>–short</strong> 的简写形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以精简的方式显示文件状态</span></span><br><span class="line">git status -s</span><br><span class="line">git status --short</span><br></pre></td></tr></table></figure><p>未跟踪文件前面有红色的 <strong>??</strong> 标记，例如：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E7%B2%BE%E7%AE%80%E6%96%B9%E5%BC%8F%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81.png"></p><h2 id="【3】操作新文件-⭐⭐⭐"><a href="#【3】操作新文件-⭐⭐⭐" class="headerlink" title="【3】操作新文件(⭐⭐⭐)"></a>【3】操作新文件(⭐⭐⭐)</h2><p>使用命令 <code>git add</code> 开始跟踪一个文件。 所以，要跟踪 <code>index.html</code> 文件，运行如下的命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果文件过多，你项跟踪目录下所有文件</span></span><br><span class="line">git add *.*</span><br></pre></td></tr></table></figure><p>此时再运行 <code>git status</code> 命令，会看到 <code>index.html</code> 文件在 <code>Changes to be committed</code> 这行的下面，说明已被跟踪，并处于暂存状态：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6.png"></p><h3 id="提交更新-⭐⭐⭐"><a href="#提交更新-⭐⭐⭐" class="headerlink" title="提交更新(⭐⭐⭐)"></a>提交更新(⭐⭐⭐)</h3><p>现在暂存区中有一个 <code>index.html</code> 文件等待被提交到 <code>Git</code> 仓库中进行保存。可以执行 <code>git commit</code> 命令进行提交,其中 <code>-m</code> 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;新建了index.html 文件&quot;</span><br></pre></td></tr></table></figure><p>提交成功之后，会显示如下的信息：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/gitcommit.png"></p><p>提交成功之后，再次检查文件的状态，得到提示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%8F%90%E4%BA%A4%E4%B9%8B%E5%90%8Estatus.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/commit%E6%B5%81%E7%A8%8B.png"></p><h2 id="【4】操作已提交的文件-⭐⭐⭐"><a href="#【4】操作已提交的文件-⭐⭐⭐" class="headerlink" title="【4】操作已提交的文件(⭐⭐⭐)"></a>【4】操作已提交的文件(⭐⭐⭐)</h2><h3 id="对已提交的文件进行修改"><a href="#对已提交的文件进行修改" class="headerlink" title="对已提交的文件进行修改"></a>对已提交的文件进行修改</h3><p>目前，<code>index.html</code> 文件已经被 <code>Git</code> 跟踪，并且工作区和 <code>Git</code> 仓库中的 <code>index.html</code> 文件内容保持一致。当我们修改了工作区中 <code>index.html</code> 的内容之后，再次运行 <code>git status</code> 和 <code>git status -s</code> 命令，会看到如下的内容：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E4%BF%AE%E6%94%B9.png"></p><p>文件 <code>index.html</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明<strong>已跟踪文件的内容发生了变化，但还没有放到暂存区</strong>。</p><p><strong>注意：</strong>修改过的、没有放入暂存区的文件前面有红色的 <strong>M</strong> 标记。</p><h3 id="暂存已修改的文件"><a href="#暂存已修改的文件" class="headerlink" title="暂存已修改的文件"></a>暂存已修改的文件</h3><p>目前，工作区中的 <code>index.html</code> 文件已被修改，如果要暂存这次修改，需要再次运行 <code>git add</code> 命令，这个命令是个多功能的命令，主要有如下 3 个功效：</p><p>① 可以用它<strong>开始跟踪新文件</strong></p><p>② 把<strong>已跟踪的</strong>、<strong>且已修改</strong>的文件放到暂存区</p><p>③ 把有冲突的文件标记为已解决状态</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%B7%B2%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E6%9A%82%E5%AD%98%E5%8C%BA.png"></p><h3 id="提交已暂存的文件"><a href="#提交已暂存的文件" class="headerlink" title="提交已暂存的文件"></a>提交已暂存的文件</h3><p>再次运行 <code>git commit -m &quot;提交消息&quot;</code> 命令，即可将暂存区中记录的 <code>index.html</code> 的快照，提交到 <code>Git</code> 仓库中进行保存：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%8F%90%E4%BA%A4%E6%9A%82%E5%AD%98%E4%B8%AD%E6%96%87%E4%BB%B6.png"></p><h2 id="【5】撤销对文件的修改"><a href="#【5】撤销对文件的修改" class="headerlink" title="【5】撤销对文件的修改"></a>【5】撤销对文件的修改</h2><p><strong>撤销对文件的修改指的是：</strong>把对工作区中对应文件的修改，<strong>还原</strong>成 Git 仓库中所保存的版本。</p><p><strong>操作的结果：</strong>所有的修改会丢失，且无法恢复！<strong>危险性比较高，请慎重操作！</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%92%A4%E9%94%80.png"></p><p><strong>撤销操作的本质：</strong>用 Git 仓库中保存的文件，覆盖工作区中指定的文件。</p><h3 id="向暂存区中一次性添加多个文件"><a href="#向暂存区中一次性添加多个文件" class="headerlink" title="向暂存区中一次性添加多个文件"></a>向暂存区中一次性添加多个文件</h3><p>如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p><strong>今后在项目开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区</strong></p><h3 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h3><p>如果需要从暂存区中移除对应的文件，可以使用如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 要移出的文件名称 或者 git reset 文件名称</span><br></pre></td></tr></table></figure><h3 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h3><p><code>Git</code> 标准的工作流程是<code>工作区 → 暂存区 → Git 仓库</code>，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 <code>Git</code> 仓库，这时候 <code>Git</code> 工作的流程简化为了<code>工作区 → Git 仓库</code></p><p><code>Git</code> 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，<code>Git</code> 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;日志信息&quot;</span><br></pre></td></tr></table></figure><h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>从 Git 仓库中移除文件的方式有两种：</p><p>① 从 Git 仓库和工作区中<strong>同时移除</strong>对应的文件</p><p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从 Git仓库和工作区中同时移除 index.js 文件git rm -f index.js<span class="comment"># 只从 Git 仓库中移除 index.css，但保留工作区中的 index.css 文件git rm --cached index.css</span></span></span><br></pre></td></tr></table></figure><h2 id="【6】忽略文件"><a href="#【6】忽略文件" class="headerlink" title="【6】忽略文件"></a>【6】忽略文件</h2><p>一般我们总会有些文件无需纳入 <code>Git</code> 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的配置文件，列出要忽略的文件的匹配模式。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><p>① 以 <strong># 开头</strong>的是注释</p><p>② 以 <strong>/ 结尾</strong>的是目录</p><p>③ 以 <strong>/ 开头</strong>防止递归</p><p>④ 以 <strong>! 开头</strong>表示取反</p><p>⑤ 可以使用 <strong>glob 模式</strong>进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><ul><li><strong>星号 *</strong> 匹配<strong>零个或多个任意字符</strong></li><li><strong><code>[abc]</code></strong> 匹配<strong>任何一个列在方括号中的字符</strong> （此案例匹配一个 a 或匹配一个 b 或匹配一个 c）</li><li><strong>问号 ?</strong> 只匹配<strong>一个任意字符</strong></li><li><strong>两个星号 **</strong> 表示匹配<strong>任意中间目录</strong>（比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等）</li><li>在方括号中使用<strong>短划线</strong>分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</li></ul><h3 id="gitignore-文件的例子"><a href="#gitignore-文件的例子" class="headerlink" title=".gitignore 文件的例子"></a><code>.gitignore</code> <strong>文件的例子</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%BF%BD%E7%95%A5%E6%B8%85%E5%8D%95.png"></p><h2 id="【7】回退版本"><a href="#【7】回退版本" class="headerlink" title="【7】回退版本"></a>【7】回退版本</h2><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>如果希望回顾项目的提交历史，可以使用 <code>git log</code> 这个简单且有效的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按时间先后顺序列出所有的提交历史，最近的提交在最上面git <span class="built_in">log</span><span class="comment"># 只展示最新的两条提交历史，数字可以按需进行填写git log -2# 在一行上展示最近两条提交历史的信息git log -2 --pretty=oneline# 在一行上展示最近两条提交历史信息，并自定义输出的格式# &amp;h 提交的简写哈希值  %an 作者名字  %ar 作者修订日志  %s 提交说明git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在一行上展示所有的提交历史git <span class="built_in">log</span> --pretty=oneline<span class="comment"># 使用 git reset --hard 命令，根据指定的提交 ID 回退到指定版本git reset --hard &lt;CommitID&gt;# 在旧版本中使用 git reflog --pretty=oneline 命令，查看命令操作的历史git reflog --pretty=onelone# 再次根据最新的提交 ID，跳转到最新的版本git reset --hard &lt;CommitID&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="五、了解开源相关的概念"><a href="#五、了解开源相关的概念" class="headerlink" title="五、了解开源相关的概念"></a>五、了解开源相关的概念</h1><h2 id="什么是开源"><a href="#什么是开源" class="headerlink" title="什么是开源"></a>什么是开源</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%BC%80%E6%BA%90%E5%92%8C%E9%97%AD%E6%BA%90.png"></p><p><strong>通俗的理解</strong></p><ul><li><strong>开源</strong>是指不仅提供程序还提供程序的源代码</li><li><strong>闭源</strong>是只提供程序，不提供源代码</li></ul><h2 id="什么是开源许可协议"><a href="#什么是开源许可协议" class="headerlink" title="什么是开源许可协议"></a>什么是开源许可协议</h2><p>开源并不意味着完全没有限制，为了<strong>限制使用者的使用范围</strong>和<strong>保护作者的权利</strong>，每个开源项目都应该遵守开源</p><p>许可协议（ <code>Open Source License</code> ）。</p><h3 id="常见的-5-种开源许可协议"><a href="#常见的-5-种开源许可协议" class="headerlink" title="常见的 5 种开源许可协议"></a>常见的 5 种开源许可协议</h3><ul><li><code>BSD</code>（Berkeley Software Distribution）</li><li><code>Apache Licence 2.0</code></li><li>**<code>GPL</code>**（GNU General Public License） (⭐⭐⭐)</li><li>具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售<ul><li>使用 <code>GPL</code> 的最著名的软件项目是：Linux</li></ul></li><li><code>LGPL</code>（GNU Lesser General Public License）</li><li>**<code>MIT</code>**（Massachusetts Institute of Technology, MIT） (⭐⭐⭐)</li><li>是目前限制最少的协议，唯一的条件：在修改后的代码或者发行包中，必须包含原作者的许可信息</li><li>使用 MIT 的软件项目有：<code>jquery</code>、<code>Node.js</code></li></ul><h2 id="为什么要拥抱开源"><a href="#为什么要拥抱开源" class="headerlink" title="为什么要拥抱开源"></a>为什么要拥抱开源</h2><p>开源的核心思想是“<strong>我为人人，人人为我</strong>”，人们越来越喜欢开源大致是出于以下 3 个原因：</p><p>① 开源给使用者更多的控制权</p><p>② 开源让学习变得容易</p><p>③ 开源才有真正的安全</p><p>开源是软件开发领域的大趋势，<strong>拥抱开源就像站在了巨人的肩膀上</strong>，不用自己重复造轮子，让开发越来越容易</p><h2 id="开源项目托管平台"><a href="#开源项目托管平台" class="headerlink" title="开源项目托管平台"></a>开源项目托管平台</h2><p>专门用于免费存放开源项目源代码的网站，叫做<strong>开源项目托管平台</strong>。目前世界上比较出名的开源项目托管平台</p><p>主要有以下 3 个：</p><ul><li><code>Github</code>（全球最牛的开源项目托管平台，没有之一）</li><li><code>Gitlab</code>（对代码私有性支持较好，因此企业用户较多）</li><li><code>Gitee</code>（又叫做码云，是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好）</li></ul><p><strong>注意：</strong>以上 3 个开源项目托管平台，只能托管以 <code>Git</code> 管理的项目源代码，因此，它们的名字都以 <code>Git</code> 开头</p><h1 id="六、远程仓库之Github（★）"><a href="#六、远程仓库之Github（★）" class="headerlink" title="六、远程仓库之Github（★）"></a>六、远程仓库之<code>Github</code>（★）</h1><h2 id="【1】什么是-Github"><a href="#【1】什么是-Github" class="headerlink" title="【1】什么是 Github"></a>【1】什么是 <code>Github</code></h2><p><code>Github</code> 是全球最大的<strong>开源项目</strong>托管平台。因为只支持 <code>Git</code> 作为唯一的版本控制工具，故名 <code>GitHub</code>。</p><p>在 <code>Github</code> 中，你可以：</p><p>① 关注自己喜欢的开源项目，为其点赞打 <code>call</code></p><p>② 为自己喜欢的开源项目做贡献（<code>Pull Request</code>）</p><p>③ 和开源项目的作者讨论 Bug 和提需求 （<code>Issues</code>）</p><p>④ 把喜欢的项目复制一份作为自己的项目进行修改（<code>Fork</code>）</p><p>⑤ 创建属于自己的开源项目</p><p>⑥ etc…</p><p>So，**<code>Github ≠ Git</code>**</p><h2 id="【2】注册-github-账号"><a href="#【2】注册-github-账号" class="headerlink" title="【2】注册 github 账号"></a>【2】注册 github 账号</h2><h3 id="注册-Github-账号的流程"><a href="#注册-Github-账号的流程" class="headerlink" title="注册 Github 账号的流程"></a>注册 <code>Github</code> 账号的流程</h3><p>① 访问 <code>Github</code> 的官网首页 <a href="https://github.com/">https://github.com/</a></p><p>② 点击“<code>Sign up</code>”按钮跳转到注册页面</p><p>③ 填写可用的用户名、邮箱、密码</p><p>④ 通过点击箭头的形式，将验证图片摆正</p><p>⑤ 点击“<code>Create account</code>”按钮注册新用户</p><p>⑥ 登录到第三步填写的邮箱中，点击激活链接，完成注册</p><p>&lt; src=”/github 注册.png” style=”zoom:60%;” /&gt;</p><h3 id="激活-Github-账号"><a href="#激活-Github-账号" class="headerlink" title="激活 Github 账号"></a>激活 <code>Github</code> 账号</h3><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%BF%80%E6%B4%BB%E9%82%AE%E4%BB%B6.png"></p><h3 id="完成注册"><a href="#完成注册" class="headerlink" title="完成注册"></a>完成注册</h3><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F.png"></p><h2 id="【3】远程仓库的使用"><a href="#【3】远程仓库的使用" class="headerlink" title="【3】远程仓库的使用"></a>【3】远程仓库的使用</h2><h3 id="新建空白远程仓库"><a href="#新建空白远程仓库" class="headerlink" title="新建空白远程仓库"></a>新建空白远程仓库</h3><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png"></p><h3 id="新建空白远程仓库成功"><a href="#新建空白远程仓库成功" class="headerlink" title="新建空白远程仓库成功"></a>新建空白远程仓库成功</h3><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png"></p><h2 id="【4】本地仓库与远程仓库建立连接"><a href="#【4】本地仓库与远程仓库建立连接" class="headerlink" title="【4】本地仓库与远程仓库建立连接"></a>【4】本地仓库与远程仓库建立连接</h2><h3 id="4-1-远程仓库的两种访问方式"><a href="#4-1-远程仓库的两种访问方式" class="headerlink" title="4.1 远程仓库的两种访问方式"></a>4.1 远程仓库的两种访问方式</h3><p><code>Github</code> 上的远程仓库，有两种访问方式，分别是 <code>HTTPS</code> 和 <code>SSH</code>。它们的区别是：</p><p>① <code>HTTPS</code>：<strong>零配置</strong>；但是每次访问仓库时，需要重复输入 <code>Github</code> 的账号和密码才能访问成功</p><p>② <code>SSH</code>：<strong>需要进行额外的配置</strong>；但是配置成功后，每次访问仓库时，不需重复输入 <code>Github</code> 的账号和密码</p><p><strong>注意：</strong>在实际开发中，<strong>推荐使用 SSH 的方式访问远程仓库。</strong></p><h3 id="4-2-基于-HTTPS"><a href="#4-2-基于-HTTPS" class="headerlink" title="4.2 基于 HTTPS"></a>4.2 基于 <code>HTTPS</code></h3><p>![](/images/https 提交.png)</p><h3 id="4-3-基于-SSH-key-⭐⭐⭐"><a href="#4-3-基于-SSH-key-⭐⭐⭐" class="headerlink" title="4.3 基于 SSH key(⭐⭐⭐)"></a>4.3 基于 SSH key(⭐⭐⭐)</h3><h4 id="SSH-key"><a href="#SSH-key" class="headerlink" title="SSH key"></a><code>SSH key</code></h4><p><code>SSH key</code> 的<strong>作用</strong>：实现本地仓库和 <code>Github</code> 之间免登录的加密数据传输。</p><p><code>SSH key</code> 的<strong>好处</strong>：免登录身份认证、数据加密传输。</p><p><code>SSH key</code> 由<strong>两部分组成</strong>，分别是：</p><p>① <code>id_rsa</code>（私钥文件，存放于客户端的电脑中即可）</p><p>② <code>id_rsa.pub</code>（公钥文件，需要配置到 <code>Github</code> 中）</p><h4 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h4><p>① 打开 Git Bash</p><p>② 粘贴如下的命令，并将 <code>your_email@example.com</code> 替换为注册 <code>Github</code> 账号时填写的邮箱：</p><ul><li><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></li></ul><p>③ 连续敲击 3 次回车，即可在 <code>C:\Users\用户名文件夹\.ssh</code> 目录中生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件</p><h4 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h4><p>① 使用记事本打开 <code>id_rsa.pub</code> 文件，复制里面的文本内容</p><p>② 在浏览器中登录 <code>Github</code>，点击头像 -&gt; <code>Settings -&gt; SSH and GPG Keys -&gt; New SSH key</code></p><p>③ 将 <code>id_rsa.pub</code> 文件中的内容，粘贴到 <code>Key</code> 对应的文本框中</p><p>④ 在 <code>Title</code> 文本框中任意填写一个名称，来标识这个 <code>Key</code> 从何而来</p><h4 id="检测-Github-的-SSH-key-是否配置成功"><a href="#检测-Github-的-SSH-key-是否配置成功" class="headerlink" title="检测 Github 的 SSH key 是否配置成功"></a>检测 <code>Github</code> 的 <code>SSH key</code> 是否配置成功</h4><ul><li><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com或者ssh -T git@gitee.com</span><br></pre></td></tr></table></figure></li><li><p>上述的命令执行成功后，可能会看到如下的提示消息：</p><p>![](/images/ssh 配置检查.png)</p></li><li><p>输入 <code>yes</code> 之后，如果能看到类似于下面的提示消息，证明 <code>SSH key</code> 已经配置成功了：</p><p>![](/images/ssh 配置检查 01.png)</p></li></ul><h4 id="基于-SSH-将本地仓库上传到-Github"><a href="#基于-SSH-将本地仓库上传到-Github" class="headerlink" title="基于 SSH 将本地仓库上传到 Github"></a>基于 SSH 将本地仓库上传到 <code>Github</code></h4><p>![](/images/基于 SSH 上传到 github.png)</p><p><strong>注意：</strong> <code>git push origin master</code> 也能进行提交，<code>git push origin -u</code> 的话可以提交代码，并且把<code>origin</code> 当作默认的主机，后续直接 <code>git push</code> 就可以提交到<code>origin</code>对应的主机</p><h3 id="4-4-查看连接和删除连接"><a href="#4-4-查看连接和删除连接" class="headerlink" title="4.4 查看连接和删除连接"></a>4.4 查看连接和删除连接</h3><blockquote><p>git remote -v 【查看有没有跟远程仓库建立联系】</p><p>git remote remove origin 【删除已经建立的联系】</p></blockquote><h2 id="【5】将远程仓库克隆到本地"><a href="#【5】将远程仓库克隆到本地" class="headerlink" title="【5】将远程仓库克隆到本地"></a>【5】将远程仓库克隆到本地</h2><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库的地址</span><br></pre></td></tr></table></figure><h1 id="七、Git本地分支（★）"><a href="#七、Git本地分支（★）" class="headerlink" title="七、Git本地分支（★）"></a>七、<code>Git</code>本地分支（★）</h1><h2 id="【1】分支基础"><a href="#【1】分支基础" class="headerlink" title="【1】分支基础"></a>【1】分支基础</h2><h3 id="1-1-分支的概念"><a href="#1-1-分支的概念" class="headerlink" title="1.1 分支的概念"></a>1.1 分支的概念</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习 Git 的时候，另一个你正在另一个平行宇宙里努力学习<code>SVN</code>。如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了<code>Git</code>又学会了<code>SVN</code>！</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%86%E6%94%AF%E7%9A%84%E6%A6%82%E5%BF%B5.png"></p><h3 id="1-2-分支在实际开发中的作用"><a href="#1-2-分支在实际开发中的作用" class="headerlink" title="1.2 分支在实际开发中的作用"></a>1.2 分支在实际开发中的作用</h3><p>在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目</p><p>功能的开发，例如：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%86%E6%94%AF%E7%9A%84%E4%BD%9C%E7%94%A8.png"></p><h3 id="1-3-master-主分支"><a href="#1-3-master-主分支" class="headerlink" title="1.3 master 主分支"></a>1.3 master 主分支</h3><p>在初始化本地 <code>Git</code> 仓库的时候，<code>Git</code> 默认已经帮我们创建了一个名字叫做 <code>master</code> 的分支。通常我们把这个</p><p><code>master</code> 分支叫做主分支。</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E4%B8%BB%E5%88%86%E6%94%AF.png"></p><p>在实际工作中，<code>master</code> 主分支的作用是：<strong>用来保存和记录整个项目已完成的功能代码</strong>。</p><p>因此，<strong>不允许程序员直接在 <code>master</code> 分支上修改代码</strong>，因为这样做的风险太高，容易导致整个项目崩溃。</p><h3 id="1-4-功能分支"><a href="#1-4-功能分支" class="headerlink" title="1.4 功能分支"></a>1.4 功能分支</h3><p>由于程序员不能直接在 <code>master</code> 分支上进行功能的开发，所以就有了功能分支的概念。</p><p><strong>功能分支</strong>指的是专门用来开发新功能的分支，它是临时从 <code>master</code> 主分支上分叉出来的，当新功能开发且测试</p><p>完毕后，最终需要合并到 <code>master</code> 主分支上，如图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%8A%9F%E8%83%BD%E5%88%86%E6%94%AF.png"></p><h2 id="【2】查看分支列表-⭐"><a href="#【2】查看分支列表-⭐" class="headerlink" title="【2】查看分支列表(⭐)"></a>【2】查看分支列表(⭐)</h2><p>使用如下的命令，可以查看当前 Git 仓库中所有的分支列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>运行的结果如下所示：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.png"></p><p><strong>注意：</strong>分支名字前面的 <strong>*</strong> 号表示当前所处的分支。</p><h2 id="【3】创建新分支"><a href="#【3】创建新分支" class="headerlink" title="【3】创建新分支"></a>【3】创建新分支</h2><p>使用如下的命令，可以<strong>基于当前分支</strong>，<strong>创建一个新的分支</strong>，此时，新分支中的代码和当前分支完全一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF.png"></p><h2 id="【4】切换分支"><a href="#【4】切换分支" class="headerlink" title="【4】切换分支"></a>【4】切换分支</h2><p>使用如下的命令，可以<strong>切换到指定的分支上</strong>进行开发：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout login</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png"></p><h2 id="【5】创建并切换分支-⭐"><a href="#【5】创建并切换分支-⭐" class="headerlink" title="【5】创建并切换分支(⭐)"></a>【5】创建并切换分支(⭐)</h2><p>使用如下的命令，可以<strong>创建指定名称的新分支</strong>，并<strong>立即切换到新分支上</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -b 表示创建一个新分支<span class="comment"># checkout 表示切换到刚才新建的分支上git checkout -b 分支名称</span></span></span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E5%B9%B6%E4%B8%94%E5%88%87%E6%8D%A2.png"></p><p><strong>注意：</strong></p><p>“<code>git checkout -b 分支名称</code>“ 是下面</p><p>两条命令的简写形式：</p><p>① <code>git branch</code> 分支名称</p><p>② <code>git checkout</code> 分支名称</p><h2 id="【6】合并分支（⭐⭐⭐）"><a href="#【6】合并分支（⭐⭐⭐）" class="headerlink" title="【6】合并分支（⭐⭐⭐）"></a>【6】合并分支（⭐⭐⭐）</h2><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 <code>master</code> 主分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 切换到 master 分支git checkout master<span class="comment"># 2. 在master 分支上运行 git merge 命令，将 login 分支的代码合班到 master 分支git merge login</span></span></span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png"></p><p><strong>合并分支时的注意点</strong>：</p><p>假设要把 C 分支的代码合并到 A 分支，</p><p>则必须<strong>先切换到 A 分支</strong>上，<strong>再运行 git merge 命令</strong>，来合并 C 分支！</p><h2 id="【7】删除分支"><a href="#【7】删除分支" class="headerlink" title="【7】删除分支"></a>【7】删除分支</h2><p>当把功能分支的代码合并到 <code>master</code> 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png"></p><h2 id="【8】解决分支合并时的冲突问题（⭐⭐⭐）"><a href="#【8】解决分支合并时的冲突问题（⭐⭐⭐）" class="headerlink" title="【8】解决分支合并时的冲突问题（⭐⭐⭐）"></a>【8】解决分支合并时的冲突问题（⭐⭐⭐）</h2><p>如果<strong>在两个不同的分支中</strong>，对<strong>同一个文件</strong>进行了<strong>不同的修改</strong>，Git 就没法干净的合并它们。 此时，我们需要打开</p><p>这些包含冲突的文件然后<strong>手动解决冲突</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 假设：在把 reg 分支合并到 master 分支期间git checkout mastergit merge reg<span class="comment"># 打开包含冲突的文件，手动解决冲突之后，再执行如下命令git add .git commit -m &quot;解决了分支合并冲突的问题&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="八、远程仓库分支操作"><a href="#八、远程仓库分支操作" class="headerlink" title="八、远程仓库分支操作"></a>八、远程仓库分支操作</h1><h2 id="将本地分支推送到远程仓库-⭐⭐⭐"><a href="#将本地分支推送到远程仓库-⭐⭐⭐" class="headerlink" title="将本地分支推送到远程仓库(⭐⭐⭐)"></a>将本地分支推送到远程仓库(⭐⭐⭐)</h2><p>如果是<strong>第一次</strong>将本地分支推送到远程仓库，需要运行如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数git push -u 远程仓库的别名 本地分支名称:远程分支名称<span class="comment"># 实际案例git push -u origin payment:pay# 如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化git push -u origin payment</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>第一次推送分支需要带 <strong>-u 参数</strong>，此后可以直接使用 <code>git push</code> 推送代码到远程分支。</p><h2 id="查看远程仓库中所有的分支列表"><a href="#查看远程仓库中所有的分支列表" class="headerlink" title="查看远程仓库中所有的分支列表"></a>查看远程仓库中所有的分支列表</h2><p>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><h2 id="跟踪分支-⭐⭐⭐"><a href="#跟踪分支-⭐⭐⭐" class="headerlink" title="跟踪分支(⭐⭐⭐)"></a>跟踪分支(⭐⭐⭐)</h2><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例git checkout pay<span class="comment"># 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名git checkout -b 本地分支名称 远程仓库名称/远程分支名称# 示例git checkout -b payment origin/pay</span></span></span><br></pre></td></tr></table></figure><h2 id="拉取远程分支的最新的代码"><a href="#拉取远程分支的最新的代码" class="headerlink" title="拉取远程分支的最新的代码"></a>拉取远程分支的最新的代码</h2><p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码一致git pull</span></span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><p>可以使用如下的命令，删除远程仓库中指定的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除远程仓库中，制定名称的远程分支git push 远程仓库名称 --delete 远程分支名称<span class="comment"># 示例git push origin --delete pay</span></span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>能够掌握 <code>Git</code> 中基本命令的使用<ul><li><code>git init</code></li><li><code>git add .</code></li><li><code>git commit –m &quot;提交消息&quot;</code></li><li><code>git status</code> 和 <code>git status -s</code></li></ul></li><li>能够使用 <code>Github</code> 创建和维护远程仓库<ul><li>能够配置 <code>Github</code> 的 <code>SSH</code> 访问</li><li>能够将本地仓库上传到 <code>Github</code></li></ul></li><li>能够掌握 <code>Git</code> 分支的基本使用<ul><li><code>git checkout -b 新分支名称</code></li><li><code>git push -u origin 新分支名称</code></li><li><code>git checkout 分支名称</code></li><li><code>git branch</code></li></ul></li></ul><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>创建仓库</td></tr><tr><td>git add 文件名 /git add .</td><td>跟踪文件，可以把新建文件/修改过的文件添加到暂存区</td></tr><tr><td>git status /git status -s</td><td>查看文件的状态</td></tr><tr><td>git commit -m ‘备注信息’</td><td>把暂存区中的文件提交到仓库中</td></tr><tr><td>git commit -a -m ‘备注信息’</td><td>把修改的文件直接提交到仓库中跳过添加到暂存区步骤</td></tr><tr><td>git checkout – 文件名</td><td>前提是仓库中文件都是未被修改的，可以返回前一个版本的内容</td></tr><tr><td>git reset HEAD 文件名/git reset HEAD .</td><td>撤销添加到暂存区</td></tr><tr><td>git rm -f 文件名 git commit -m ‘备注信息’</td><td>同时删除工作区和仓库中的文件</td></tr><tr><td>git rm cache git commit -m ‘备注信息’</td><td>把仓库中的文件删除，保留工作区的文件</td></tr><tr><td>git log</td><td>按时间顺序列出所有提交历史，最近提交的靠前</td></tr><tr><td>git reflog</td><td>简单显示所有提交历史</td></tr><tr><td>git log -2</td><td>只展示最新的两条提交历史，数字可以按需填写</td></tr><tr><td>git reset –hard 版本号</td><td>回退到指定版本（切换版本前需要把当前仓库清空）</td></tr><tr><td>git push</td><td>推送本地到远程仓库</td></tr><tr><td>git pull</td><td>拉取远程到本地仓库</td></tr><tr><td>git clone 远程仓库的地址</td><td>把远程仓库的文件克隆到本地</td></tr><tr><td>git branch 新分支名称</td><td>新建分支(前提是在主分支)</td></tr><tr><td>git branch</td><td>查看分支列表</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git checkout -b 新分支名称</td><td>新建分支并切换到该分支(前提是在主分支)</td></tr><tr><td>git checkout master git merge a</td><td>把 a 分支上的内容合并到主分支上，前提是要先切换到主分支</td></tr><tr><td>git branch -d 分支名称</td><td>删除分支</td></tr><tr><td>git push -u origin 本地分支:别名</td><td>把本地分支推送到远程仓库 第一次之后推送只需要 git push</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级</title>
      <link href="2021/05/05/js%E9%AB%98%E7%BA%A7/"/>
      <url>2021/05/05/js%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h1><h2 id="1-1-对象的三种创建方式–复习"><a href="#1-1-对象的三种创建方式–复习" class="headerlink" title="1.1 对象的三种创建方式–复习"></a>1.1 对象的三种创建方式–复习</h2><ol><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>new 关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">&quot;zs&quot;</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-2-构造函数"><a href="#1-2-构造函数" class="headerlink" title="1.2 构造函数"></a>1.2 构造函数</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225152226929.png" alt="image-20200225152226929"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225152237398.png" alt="image-20200225152237398"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 利用构造函数创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我会唱歌&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&quot;刘德华&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">&quot;张学友&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br><span class="line">ldh.sing();</span><br><span class="line">zxy.sing();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225152429646.png" alt="image-20200225152429646"></p><h2 id="1-3-静态成员和实例成员"><a href="#1-3-静态成员和实例成员" class="headerlink" title="1.3 静态成员和实例成员"></a>1.3 静态成员和实例成员</h2><p>成员：属性和方法。</p><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p>实例成员就是构造函数内部通过 this 添加的成员，</p><p>如下列代码中：uname age sing 就是实例成员,</p><p>实例成员只能通过实例化的对象来访问</p><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>构造函数本身也是 1 个对象！</p><p>静态成员：在构造函数本身上添加的成员。</p><p>如下列代码中 sex 就是静态成员,静态成员</p><p>只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例成员就是构造函数内部通过this添加的成员</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我会唱歌&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// uname age sing 就是实例成员</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh.uname);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.age);</span><br><span class="line"><span class="comment">//实例成员只能通过实例化的对象来访问</span></span><br><span class="line"><span class="built_in">console</span>.log(Star.uname); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员 在构造函数本身上添加的成员 sex 就是静态成员</span></span><br><span class="line">Star.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Star.sex);</span><br><span class="line"><span class="comment">//静态成员只能通过构造函数来访问</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh.sex); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h1 id="二、原型对象"><a href="#二、原型对象" class="headerlink" title="二、原型对象"></a>二、原型对象</h1><h2 id="2-1-构造函数的问题"><a href="#2-1-构造函数的问题" class="headerlink" title="2.1 构造函数的问题"></a>2.1 构造函数的问题</h2><p>构造函数创建对象很好用，但是如果把方法定义在构造函数内，就存在浪费内存的问题。</p><p><img src= "/img/loading.gif" data-lazy-src="/images/img1.png"></p><p><strong>我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上。</strong></p><h2 id="2-2-构造函数的原型-prototype"><a href="#2-2-构造函数的原型-prototype" class="headerlink" title="2.2 构造函数的原型 prototype"></a>2.2 构造函数的原型 prototype</h2><p>构造函数通过原型分配的函数是所有对象所共享的。</p><p>JavaScript 规定，<strong>每一个构造函数都有一个 prototype 属性，指向另一个对象，这个对象叫做【原型对象】</strong>。</p><p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225153123502.png" alt="image-20200225153123502"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数中定义属性</span></span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把方法定义到原型对象身上</span></span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我会唱歌&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&quot;刘德华&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">&quot;张学友&quot;</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">ldh.sing();</span><br><span class="line">zxy.sing();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的实例对象，共用一个方法，省内存</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh.sing === zxy.sing);</span><br></pre></td></tr></table></figure><h2 id="2-3-对象原型"><a href="#2-3-对象原型" class="headerlink" title="2.3 对象原型"></a>2.3 对象原型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实例对象都有一个属性 __proto__ 指向构造函数的 prototype 原型对象。</span><br><span class="line">之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有</span><br><span class="line">__proto__ 原型的存在。 __proto__对象原型和原型对象 prototype 是等价的。</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象</span><br><span class="line">prototype。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/img2.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/img3.png"></p><h2 id="2-4-constructor-构造函数"><a href="#2-4-constructor-构造函数" class="headerlink" title="2.4 constructor 构造函数"></a>2.4 constructor 构造函数</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225153855562.png" alt="image-20200225153855562"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225154124731.png" alt="image-20200225154124731"></p><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用 constructor 指回原来的构造函数如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line">Star.prototype = &#123;</span><br><span class="line">  <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Star</span>, // 手动设置指回原来的构造函数</span><br><span class="line">  <span class="title">sing</span>: <span class="title">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我会唱歌&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  movie: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我会演电影&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">&quot;张学友&quot;</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure><h2 id="2-5-三角关系"><a href="#2-5-三角关系" class="headerlink" title="2.5 三角关系"></a>2.5 三角关系</h2><p>构造函数、实例对象和原型对象的三角关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>构造函数的prototype属性指向了构造函数原型对象</span><br><span class="line"><span class="number">2.</span>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</span><br><span class="line"><span class="number">3.</span>构造函数的原型对象的<span class="title">constructor</span>属性指向了构造函数,实例对象的原型的<span class="title">constructor</span>属性也指向了构造函数</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/img4.png"></p><h1 id="三、原型链与对象成员的查找规则"><a href="#三、原型链与对象成员的查找规则" class="headerlink" title="三、原型链与对象成员的查找规则"></a>三、原型链与对象成员的查找规则</h1><h2 id="3-1-原型链"><a href="#3-1-原型链" class="headerlink" title="3.1 原型链"></a>3.1 原型链</h2><!--任何原型对象也是一个对象,该对象就有 __proto__ 属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;--><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225211429244.png" alt="image-20200225211429244"></p><h2 id="3-2-对象成员的查找机制"><a href="#3-2-对象成员的查找机制" class="headerlink" title="3.2 对象成员的查找机制"></a>3.2 对象成员的查找机制</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找：原型对象的原型（Object的原型对象）。 依此类推一直找到 Object</span><br><span class="line">为止（null）。</span><br></pre></td></tr></table></figure><p>沿着原型链查找！！</p><h1 id="四、原型对象的应用"><a href="#四、原型对象的应用" class="headerlink" title="四、原型对象的应用"></a>四、原型对象的应用</h1><h2 id="4-1-原型对象中-this-指向"><a href="#4-1-原型对象中-this-指向" class="headerlink" title="4.1 原型对象中 this 指向"></a>4.1 原型对象中 this 指向</h2><p><strong>不管构造函数中的 this，还是原型对象中的 this，都指向我们 new 出来的实例对象。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.uname = uname;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> that;</span><br><span class="line">    Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">        that = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line">    ldh.sing();</span><br><span class="line">    <span class="built_in">console</span>.log(that === ldh);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-通过原型为数组扩展内置方法"><a href="#4-2-通过原型为数组扩展内置方法" class="headerlink" title="4.2 通过原型为数组扩展内置方法"></a>4.2 通过原型为数组扩展内置方法</h2><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法。比如给数组增加自定义求偶数和的功能。</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225212516229.png" alt="image-20200225212516229"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 系统中内置了很多构造函数：例如：Object、Array</span></span><br><span class="line"><span class="comment">// Array构造函数也有一个对应的原型对象</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 数组的实例对象 arr</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 调用sum方法（成员的查找规则）</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.sum());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的实例对象 arr1</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1.sum());</span><br></pre></td></tr></table></figure><h1 id="五、继承"><a href="#五、继承" class="headerlink" title="五、继承"></a>五、继承</h1><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225212707959.png" alt="image-20200225212707959"></p><p>子构造函数 继承 父构造函数！</p><h2 id="5-1-call-方法"><a href="#5-1-call-方法" class="headerlink" title="5.1 call()方法"></a>5.1 call()方法</h2><p>**调用这个函数, 并且修改函数运行时的 this 指向 **</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225213119597.png" alt="image-20200225213119597"></p><ul><li>call()可以调用函数</li><li>call()可以修改 this 的指向，使用 call()的时候 参数 1 是修改后的 this 指向，参数 2,参数 3。。。是函数的实参列表。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我想喝手磨咖啡&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// fn();</span></span><br><span class="line"><span class="comment">// 1. call() 可以调用函数</span></span><br><span class="line"><span class="comment">// fn.call();</span></span><br><span class="line"><span class="comment">// 2. call() 可以改变这个函数的this指向 此时这个函数的this 就指向了o这个对象</span></span><br><span class="line">fn.call(o, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="5-2-继承属性"><a href="#5-2-继承属性" class="headerlink" title="5.2 继承属性"></a>5.2 继承属性</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225213417611.png" alt="image-20200225213417611"></p><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用 call 方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 .子构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, score</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 指向子构造函数的对象实例 ldh</span></span><br><span class="line">  <span class="comment">// 3.使用call方式实现子继承父的属性【调用父构造函数，并让其this变为ldh】</span></span><br><span class="line">  Father.call(<span class="built_in">this</span>, uname, age);</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Son(<span class="string">&quot;刘德华&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//console.log(son);</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure><h2 id="5-3-继承方法"><a href="#5-3-继承方法" class="headerlink" title="5.3 继承方法"></a>5.3 继承方法</h2><p>借用原型对象继承方法！</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225213535228.png" alt="image-20200225213535228"></p><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>修改子构造函数的原型对象（new 父构造函数得到的对象）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">  <span class="built_in">this</span>.uname = uname;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.money = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">100000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2 .子构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, score</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">  Father.call(<span class="built_in">this</span>, uname, age);</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"><span class="comment">// 这个是子构造函数专门的方法</span></span><br><span class="line">Son.prototype.exam = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;孩子要考试&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">&quot;刘德华&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225214006398.png" alt="image-20200225214006398"></p><h1 id="六、对象与类"><a href="#六、对象与类" class="headerlink" title="六、对象与类"></a>六、对象与类</h1><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225102826210.png" alt="image-20200225102826210"></p><h2 id="6-1-对象"><a href="#6-1-对象" class="headerlink" title="6.1 对象"></a>6.1 对象</h2><p>对象是由属性和方法组成的：是一组无序<strong>键值对</strong>的集合，指的是一个具体的事物。</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h2 id="6-2-类"><a href="#6-2-类" class="headerlink" title="6.2 类"></a>6.2 类</h2><ul><li>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后用这个类来实例化对象。</li><li>类抽象了对象的公共部分，它泛指某一大类（class），而对象特指某一个。</li><li>通过类的实例化，可以得到一个具体的对象</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225103010056.png" alt="image-20200225103010056"></p><h2 id="6-3-定义类和创建对象"><a href="#6-3-定义类和创建对象" class="headerlink" title="6.3 定义类和创建对象"></a>6.3 定义类和创建对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤1 使用class关键字，类名的首字母通常会大写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">  <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步骤2使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225103336398.png" alt="image-20200225103336398"></p><h2 id="6-4-类的构造函数-constructor"><a href="#6-4-类的构造函数-constructor" class="headerlink" title="6.4 类的构造函数 constructor"></a>6.4 类的构造函数 constructor</h2><p>constructor() 方法是类的构造函数(默认方法)，用于传递参数,返回实例对象，通过 new 命令生成对象实例时，自动调用该方法。</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225103758437.png" alt="image-20200225103758437"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225103848453.png" alt="image-20200225103848453"></p><p>一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p><h2 id="6-5-类中添加属性和方法"><a href="#6-5-类中添加属性和方法" class="headerlink" title="6.5 类中添加属性和方法"></a>6.5 类中添加属性和方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤1 使用class关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// constructor 构造器或者构造函数</span></span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125; <span class="comment">//--------------注意1，所有的方法不需要使用function。------&gt;注意2,方法与方法之间不需要添加逗号</span></span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤2使用定义的类创建实例  注意new关键字</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Person(<span class="string">&quot;刘德华&quot;</span>, <span class="number">18</span>);</span><br><span class="line">ldh.say();</span><br></pre></td></tr></table></figure><p><strong>注意哟:</strong></p><ol><li>通过 class 关键字创建类, 类名我们还是习惯性定义首字母大写</li><li>类里面有个 constructor 函数,可以接受传递过来的参数,同时返回实例对象</li><li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li><li>多个方法之间不需要添加逗号分隔</li><li>生成实例 new 不能省略</li><li>语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加 function</li></ol><h1 id="七、类的本质"><a href="#七、类的本质" class="headerlink" title="七、类的本质"></a>七、类的本质</h1><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225220405554.png" alt="image-20200225220405554"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225221512414.png" alt="image-20200225221512414"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 通常类名首字母大写</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 通过new来创建实例化对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 当new实例对象时，constructor会被自动调用</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// constructor前面不要加function</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// constructor里面的this指向实例对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// new实例对象时，可以给constructor传递参数</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> that;</span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">constructor</span>(<span class="params">uname, age</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.uname = uname;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.age = age;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sing</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;唱歌&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">dance</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;跳舞&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Star);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 类也有原型对象</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(Star.prototype);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建实例对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 通过类的原型对象添加方法</span></span></span><br><span class="line"><span class="javascript">  Star.prototype.skill = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;翻墙&quot;</span>);</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(ldh.__proto__ === Star.prototype);</span></span><br><span class="line">  ldh.skill();</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(ldh);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(ldh === that);</span></span><br><span class="line">  ldh.sing();</span><br><span class="line">  ldh.dance();</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">&quot;张学友&quot;</span>, <span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(zxy);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.类没有变量提升，必须先声明类，再实例化对象</span></span><br><span class="line">    <span class="comment">// 2.类中的属性和方法，使用时要加this</span></span><br><span class="line">    <span class="comment">// 3.类中的this指向</span></span><br><span class="line">    <span class="comment">//      构造函数constructor中的this：实例化对象</span></span><br><span class="line">    <span class="comment">//      方法中的this：调用者</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">uname, age</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 添加属性</span></span><br><span class="line">            <span class="built_in">this</span>.uname = uname;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="comment">// this.sing();</span></span><br><span class="line">            <span class="built_in">this</span>.sayHi();</span><br><span class="line">            <span class="comment">// 属性值可以是任意类型</span></span><br><span class="line">            <span class="built_in">this</span>.btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">            <span class="comment">// 给元素对象注册事件，把方法作为事件处理函数</span></span><br><span class="line">            <span class="built_in">this</span>.btn.onclick = <span class="built_in">this</span>.sing;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">sing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// this：button</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;唱歌&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;我叫&quot;</span> + <span class="built_in">this</span>.uname); <span class="comment">// this: ldh</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="八、类的继承"><a href="#八、类的继承" class="headerlink" title="八、类的继承"></a>八、类的继承</h1><h2 id="8-1-基本用法"><a href="#8-1-基本用法" class="headerlink" title="8.1 基本用法"></a>8.1 基本用法</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225104533609.png" alt="image-20200225104533609"></p><ul><li>语法</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225104858890.png" alt="image-20200225104858890"></p><ul><li>代码示例</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225104823512.png" alt="image-20200225104823512"></p><h2 id="8-2-super-关键字"><a href="#8-2-super-关键字" class="headerlink" title="8.2 super 关键字"></a>8.2 super 关键字</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225105501224.png" alt="image-20200225105501224"></p><h3 id="【1】调用父类的构造函数"><a href="#【1】调用父类的构造函数" class="headerlink" title="【1】调用父类的构造函数"></a>【1】调用父类的构造函数</h3><p>如果子类显式定义了 constructor 构造函数，那么在其构造函数中，必须调用 super()，否则会报错。</p><p>这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225115155781.png" alt="image-20200225115155781"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/image-20200225115303210.png" alt="image-20200225115303210"></p><h3 id="【2】调用父类的普通函数"><a href="#【2】调用父类的普通函数" class="headerlink" title="【2】调用父类的普通函数"></a>【2】调用父类的普通函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// super 关键字调用父类普通函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是爸爸&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// super.say() 就是调用父类中的普通函数 say()</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>.say() + <span class="string">&quot;的儿子&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.say();</span><br></pre></td></tr></table></figure><h2 id="8-3-继承中属性和方法的查找规则"><a href="#8-3-继承中属性和方法的查找规则" class="headerlink" title="8.3 继承中属性和方法的查找规则"></a>8.3 继承中属性和方法的查找规则</h2><p>继承中的属性或者方法查找原则: 就近原则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</span></span><br><span class="line"><span class="comment">// 2. 继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是爸爸&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我是儿子&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.say();</span><br></pre></td></tr></table></figure><h2 id="8-4-子类构造函数中的-super-必须放在-this-之前"><a href="#8-4-子类构造函数中的-super-必须放在-this-之前" class="headerlink" title="8.4 子类构造函数中的 super()必须放在 this 之前"></a>8.4 子类构造函数中的 super()必须放在 this 之前</h2><p>在子类的构造函数中，只有调用<code>super</code>之后，才可以使用<code>this</code>关键字，否则会报错。</p><p>这是因为子类实例的构建，基于父类实例，只有<code>super</code>方法才能调用父类实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类有加法方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x + <span class="built_in">this</span>.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 利用super 调用父类的构造函数 super 必须在子类this之前调用,放到this之后会报错</span></span><br><span class="line">    <span class="built_in">super</span>(x, y);</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">subtract</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x - <span class="built_in">this</span>.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">son.subtract();</span><br><span class="line">son.sum();</span><br></pre></td></tr></table></figure><h2 id="8-5-使用类的注意事项"><a href="#8-5-使用类的注意事项" class="headerlink" title="8.5 使用类的注意事项"></a>8.5 使用类的注意事项</h2><h3 id="【1】属性和方法前要加-this"><a href="#【1】属性和方法前要加-this" class="headerlink" title="【1】属性和方法前要加 this"></a>【1】属性和方法前要加 this</h3><p>类里面的共有属性和方法，一定要加 this 使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.类没有变量提升，必须先声明类，再实例化对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.类中的属性和方法，使用时要加this</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 3.类中的this指向</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//      构造函数constructor中的this：实例化对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//      方法中的this：调用者</span></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">constructor</span>(<span class="params">uname, age</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 添加属性</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.uname = uname;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.age = age;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// this.sing();</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.sayHi();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 属性值可以是任意类型</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.btn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 给元素对象注册事件，把方法作为事件处理函数</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.btn.onclick = <span class="built_in">this</span>.sing;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sing</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// this：button</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;唱歌&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;我叫&quot;</span> + <span class="built_in">this</span>.uname); <span class="comment">// this: ldh</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&quot;刘德华&quot;</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="【2】this-指向问题"><a href="#【2】this-指向问题" class="headerlink" title="【2】this 指向问题"></a>【2】this 指向问题</h3><ol><li>constructor 中的 this 指向的是 new 出来的实例对象</li><li>类中自定义的方法,一般也指向的 new 出来的实例对象</li><li>事件处理函数中，this 指向的就是触发事件的事件源</li></ol><h1 id="九、ES5-新增方法"><a href="#九、ES5-新增方法" class="headerlink" title="九、ES5 新增方法"></a>九、ES5 新增方法</h1><h2 id="9-1-数组方法-forEach-遍历数组"><a href="#9-1-数组方法-forEach-遍历数组" class="headerlink" title="9.1 数组方法 forEach 遍历数组"></a>9.1 数组方法 forEach 遍历数组</h2><p>==forEach()== 方法对数组的每个元素执行一次给定的函数。</p><p>返回值：undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr foreach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// value 当前数组元素</span></span><br><span class="line">  <span class="comment">// index 当前元素的索引号</span></span><br><span class="line">  <span class="comment">// array 当前的数组</span></span><br><span class="line">&#125;)</span><br><span class="line">  <span class="comment">//相当于数组遍历的 for循环 没有返回值</span></span><br></pre></td></tr></table></figure><h2 id="9-1-数组方法-map-遍历数组"><a href="#9-1-数组方法-map-遍历数组" class="headerlink" title="9.1 数组方法 map 遍历数组"></a>9.1 数组方法 map 遍历数组</h2><p>==map()==方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p><p>返回值：一个由原数组每个元素执行回调函数的结果组成的新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="string">&quot;min&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;mo&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> pro = list.map(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// item 原数组的 每一个元素</span></span><br><span class="line">  <span class="comment">// index 原数组 下标</span></span><br><span class="line">  <span class="comment">// 当前元素属于 的数组对象</span></span><br><span class="line">  <span class="keyword">return</span> item + <span class="string">&quot;1&quot;</span>; <span class="comment">// 处理后可以返回一个新数组</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(pro); <span class="comment">// [&quot;min1&quot;, &quot;list1&quot;, &quot;do1&quot;, &quot;mo1&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="9-2-数组方法-filter-过滤数组"><a href="#9-2-数组方法-filter-过滤数组" class="headerlink" title="9.2 数组方法 filter 过滤数组"></a>9.2 数组方法 filter 过滤数组</h2><ul><li>return true：标识该事件处理方法已完全处理该方法，该事件不会传播出去</li><li>return false：标识该事件处理方法未完全处理该方法，该事件还会传播出去</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把小于10的元素筛选出来</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">531</span>, <span class="number">226</span>, <span class="number">45</span>, <span class="number">100</span>];</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    newArr.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone 6&quot;</span>, <span class="attr">price</span>: <span class="string">&quot;2000&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone 7&quot;</span>, <span class="attr">price</span>: <span class="string">&quot;3000&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone 8&quot;</span>, <span class="attr">price</span>: <span class="string">&quot;3000&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;iphone 9&quot;</span>, <span class="attr">price</span>: <span class="string">&quot;4000&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;华为&quot;</span>, <span class="attr">price</span>: <span class="string">&quot;4000&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> result = data.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 筛选出商品名中包含iPhone的商品</span></span><br><span class="line">  <span class="keyword">return</span> value.name.indexOf(<span class="string">&quot;iphone&quot;</span>) !== -<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h2 id="9-3-数组方法-some-查找数组中是否有满足条件的元素"><a href="#9-3-数组方法-some-查找数组中是否有满足条件的元素" class="headerlink" title="9.3 数组方法 some 查找数组中是否有满足条件的元素"></a>9.3 数组方法 some 查找数组中是否有满足条件的元素</h2><p>==some()== 方法测试数组中是不是至少有 1 个元素通过了被提供的函数测试。</p><p>返回值：Boolean 型 true 或 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数一是:数组元素</span></span><br><span class="line">  <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">  <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">  <span class="keyword">return</span> value &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag); <span class="comment">//返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  检测在数组中是否有元素大于 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(arr); <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(arr); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="9-4-some-和-forEach-区别"><a href="#9-4-some-和-forEach-区别" class="headerlink" title="9.4 some 和 forEach 区别"></a>9.4 some 和 forEach 区别</h2><ul><li>如果查询数组中唯一的元素, 用 some 方法更合适,在 some 里面 遇到 return true 就是终止遍历 迭代效率更高</li><li>在 forEach 里面 return 不会终止迭代</li></ul><h2 id="9-5-trim-方法去除字符串两端的空格"><a href="#9-5-trim-方法去除字符串两端的空格" class="headerlink" title="9.5 trim 方法去除字符串两端的空格"></a>9.5 trim 方法去除字符串两端的空格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;   hello   &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()）  <span class="comment">//hello 去除两端空格</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;   he l l o   &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()）  <span class="comment">//he l l o  去除两端空格</span></span><br></pre></td></tr></table></figure><h2 id="9-6-获取对象的属性名（了解）"><a href="#9-6-获取对象的属性名（了解）" class="headerlink" title="9.6 获取对象的属性名（了解）"></a>9.6 获取对象的属性名（了解）</h2><p>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  pname: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">  price: <span class="number">1999</span>,</span><br><span class="line">  num: <span class="number">2000</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[id，pname,price,num]</span></span><br></pre></td></tr></table></figure><h2 id="9-7-Object-defineProperty（了解）"><a href="#9-7-Object-defineProperty（了解）" class="headerlink" title="9.7 Object.defineProperty（了解）"></a>9.7 Object.defineProperty（了解）</h2><p>Object.defineProperty 设置或修改对象中的新属性或原有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;</span><br><span class="line">value:修改或新增的属性的值,</span><br><span class="line">writable:<span class="literal">true</span>/<span class="literal">false</span>,<span class="comment">//如果值为false 不允许修改这个属性值，默认值是false</span></span><br><span class="line">enumerable: <span class="literal">false</span>,<span class="comment">//enumerable 如果值为false 则不允许遍历，默认值是false</span></span><br><span class="line">        configurable: <span class="literal">false</span>  <span class="comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性，默认值是false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="十-函数的定义和调用"><a href="#十-函数的定义和调用" class="headerlink" title="十 函数的定义和调用"></a>十 函数的定义和调用</h1><h2 id="10-1-函数的定义方式"><a href="#10-1-函数的定义方式" class="headerlink" title="10.1 函数的定义方式"></a>10.1 函数的定义方式</h2><ol><li><p>方式 1 函数声明方式 function 关键字 (命名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式 2 函数表达式(匿名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方式 3 new Function()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>..., <span class="string">&#x27;函数体&#x27;</span>)</span><br><span class="line">注意</span><br><span class="line"><span class="comment">/*Function 里面参数都必须是字符串格式</span></span><br><span class="line"><span class="comment">第三种方式执行效率低，也不方便书写，因此较少使用</span></span><br><span class="line"><span class="comment">所有函数都是 Function 的实例(对象)</span></span><br><span class="line"><span class="comment">函数也属于对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="10-2-函数的调用"><a href="#10-2-函数的调用" class="headerlink" title="10.2 函数的调用"></a>10.2 函数的调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;人生的巅峰&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;人生的巅峰&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">o.sayHi();</span><br><span class="line"><span class="comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Star();</span><br><span class="line"><span class="comment">/* 4. 绑定事件函数*/</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="comment">/* 5. 定时器函数*/</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">1000</span>);</span><br><span class="line">这个函数是定时器自动<span class="number">1</span>秒钟调用一次(</span><br><span class="line">  <span class="comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;人生的巅峰&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><h1 id="十一-this"><a href="#十一-this" class="headerlink" title="十一 this"></a>十一 this</h1><h2 id="11-1-函数内部的-this-指向"><a href="#11-1-函数内部的-this-指向" class="headerlink" title="11.1 函数内部的 this 指向"></a>11.1 函数内部的 this 指向</h2><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了 this 的指向不同</p><p>一般指向我们的调用者.</p><p><img src= "/img/loading.gif" data-lazy-src="/images/img1.png"></p><h2 id="11-2-改变函数内部-this-指向"><a href="#11-2-改变函数内部-this-指向" class="headerlink" title="11.2 改变函数内部 this 指向"></a>11.2 改变函数内部 this 指向</h2><h3 id="11-2-1-call-方法"><a href="#11-2-1-call-方法" class="headerlink" title="11.2.1 call 方法"></a>11.2.1 call 方法</h3><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p><p>应用场景: 经常做继承.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// 此时的this指向的是window</span></span><br><span class="line">fn.call(o, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//此时的this指向的是对象o,参数使用逗号隔开</span></span><br></pre></td></tr></table></figure><h3 id="11-2-2-apply-方法"><a href="#11-2-2-apply-方法" class="headerlink" title="11.2.2 apply 方法"></a>11.2.2 apply 方法</h3><p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。</p><p>应用场景: 经常跟数组有关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// 此时的this指向的是window</span></span><br><span class="line">fn.apply(o, [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">//此时的this指向的是对象o,参数使用数组传递</span></span><br></pre></td></tr></table></figure><h3 id="11-2-3-bind-方法"><a href="#11-2-3-bind-方法" class="headerlink" title="11.2.3 bind 方法"></a>11.2.3 bind 方法</h3><p>bind() 方法不会调用函数,但是能改变函数内部 this 指向,返回的是原函数改变 this 之后产生的新函数</p><p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind</p><p>应用场景:不调用函数,但是还想改变 this 指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn.bind(o, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//此处的f是bind返回的新函数</span></span><br><span class="line">f(); <span class="comment">//调用新函数  this指向的是对象o 参数使用逗号隔开</span></span><br></pre></td></tr></table></figure><h3 id="11-2-4-call、apply、bind-三者的异同"><a href="#11-2-4-call、apply、bind-三者的异同" class="headerlink" title="11.2.4 call、apply、bind 三者的异同"></a>11.2.4 call、apply、bind 三者的异同</h3><ul><li><p>共同点 : 都可以改变 this 指向</p></li><li><p>不同点:</p><ul><li>call 和 apply 会调用函数, 并且改变函数内部 this 指向.</li><li>call 和 apply 传递的参数不一样,call 传递参数使用逗号隔开,apply 使用数组传递</li><li>bind 不会调用函数, 可以改变函数内部 this 指向.</li></ul></li><li><p>应用场景</p><ol><li>call 经常做继承.</li><li>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数,但是还想改变 this 指向. 比如改变定时器内部的 this 指向.</li></ol></li></ul><h1 id="十二-严格模式"><a href="#十二-严格模式" class="headerlink" title="十二 严格模式"></a>十二 严格模式</h1><h2 id="12-1-什么是严格模式"><a href="#12-1-什么是严格模式" class="headerlink" title="12.1 什么是严格模式"></a>12.1 什么是严格模式</h2><p>JavaScript 除了提供正常模式外，还提供了严格模式（strict mode）。ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码。</p><p>严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>严格模式对正常的 JavaScript 语义做了一些更改：</p><p>1.消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</p><p>2.消除代码运行的一些不安全之处，保证代码运行的安全。</p><p>3.提高编译器效率，增加运行速度。</p><p>4.禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p><h2 id="12-2-开启严格模式"><a href="#12-2-开启严格模式" class="headerlink" title="12.2 开启严格模式"></a>12.2 开启严格模式</h2><p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><ul><li><p>情况一 :为脚本开启严格模式</p><ul><li><p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他<br>script 脚本文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line"><span class="meta">　　　　&quot;use strict&quot;</span>;</span><br><span class="line">       <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="meta">  　&quot;use strict&quot;</span>; <span class="comment">//当前script标签开启了严格模式</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//当前script标签未开启严格模式</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>情况二: 为函数开启严格模式</p><ul><li><p>要给某个函数开启严格模式，需要把“use strict”; (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前fn函数开启了严格模式</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="12-3-严格模式中的变化"><a href="#12-3-严格模式中的变化" class="headerlink" title="12.3 严格模式中的变化"></a>12.3 严格模式中的变化</h2><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(num)<span class="comment">//严格模式后使用未声明的变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> num2;<span class="comment">//严格模式不允许删除变量</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star();</span><br><span class="line"><span class="built_in">console</span>.log(ldh.sex);</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">//严格模式下，定时器 this 还是指向 window</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h1 id="十三-闭包"><a href="#十三-闭包" class="headerlink" title="十三 闭包"></a>十三 闭包</h1><h2 id="13-1-高阶函数"><a href="#13-1-高阶函数" class="headerlink" title="13.1 高阶函数"></a>13.1 高阶函数</h2><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="13-2-什么是闭包"><a href="#13-2-什么是闭包" class="headerlink" title="13.2 什么是闭包"></a>13.2 什么是闭包</h2><p>特征：【1】函数内嵌套了函数</p><p>​ 【2】内部的函数使用外部函数的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// fn1是闭包函数</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);  <span class="comment">// 10</span></span><br><span class="line">  &#125;</span><br><span class="line">  fn2();</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="13-3-闭包的作用"><a href="#13-3-闭包的作用" class="headerlink" title="13.3 闭包的作用"></a>13.3 闭包的作用</h2><p>作用 1：延伸变量的作用范围，在函数外面访问局部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fun;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f();</span><br><span class="line">或者;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>作用 2：函数调用后，变量不会被销毁，让这些变量的值始终保存在内存中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun();</span><br><span class="line">f(); <span class="comment">// 11</span></span><br><span class="line">f(); <span class="comment">// 12</span></span><br><span class="line">f(); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h2 id="13-4-闭包的案例"><a href="#13-4-闭包的案例" class="headerlink" title="13.4 闭包的案例"></a>13.4 闭包的案例</h2><p>利用闭包的方式得到当前 li 的索引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">    &lt;li&gt;榴莲&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;臭豆腐&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;鲱鱼罐头&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;大猪蹄子&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 闭包应用-点击li输出当前li的索引号</span></span><br><span class="line">    <span class="comment">// 1. 我们可以利用动态添加属性的方式</span></span><br><span class="line">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        lis[i].index = i;</span><br><span class="line">        lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.index);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 利用闭包的方式得到当前小li 的索引号</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line">        <span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">       lis[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;  <span class="comment">// 形参</span></span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(i);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)(i);  <span class="comment">// 实参</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>点击 li，3 秒之后打印 li 的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  lis[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">      &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 秒钟之后,打印所有 li 元素的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十四-递归"><a href="#十四-递归" class="headerlink" title="十四 递归"></a>十四 递归</h1><h2 id="14-1-什么是递归"><a href="#14-1-什么是递归" class="headerlink" title="14.1 什么是递归"></a>14.1 什么是递归</h2><p><strong>递归：</strong>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p><strong>注意：</strong>递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return。</p><h2 id="14-2-利用递归函数求-1-n-的阶乘-1-2-3-4-n"><a href="#14-2-利用递归函数求-1-n-的阶乘-1-2-3-4-n" class="headerlink" title="14.2 利用递归函数求 1~n 的阶乘 1 _ 2 _ 3 _ 4 _ ..n"></a>14.2 利用递归函数求 1~n 的阶乘 1 _ 2 _ 3 _ 4 _ ..n</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * fn(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="14-3-利用递归函数求斐波那契数列-兔子序列-1、1、2、3、5、8、13、21…"><a href="#14-3-利用递归函数求斐波那契数列-兔子序列-1、1、2、3、5、8、13、21…" class="headerlink" title="14.3 利用递归函数求斐波那契数列(兔子序列) 1、1、2、3、5、8、13、21…"></a>14.3 利用递归函数求斐波那契数列(兔子序列) 1、1、2、3、5、8、13、21…</h2><p>规律：第 n 个数的值是：第 n-1 + 第 n-2 的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span> || n = <span class="number">2</span>)&#123;</span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn(n - <span class="number">1</span>) + fn(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="14-4-利用递归遍历数组"><a href="#14-4-利用递归遍历数组" class="headerlink" title="14.4 利用递归遍历数组"></a>14.4 利用递归遍历数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">&quot;家电&quot;</span>,</span><br><span class="line">    goods: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">11</span>,</span><br><span class="line">        gname: <span class="string">&quot;冰箱&quot;</span>,</span><br><span class="line">        goods: [</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">111</span>,</span><br><span class="line">            gname: <span class="string">&quot;海尔&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">112</span>,</span><br><span class="line">            gname: <span class="string">&quot;美的&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">12</span>,</span><br><span class="line">        gname: <span class="string">&quot;洗衣机&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">&quot;服饰&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 我们想要做输入id号,就可以返回的数据对象</span></span><br><span class="line"><span class="comment">// 1. 利用 forEach 去遍历里面的每一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getID</span>(<span class="params">arr, id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(item);</span></span><br><span class="line">    <span class="keyword">if</span> (item.id == id) &#123;</span><br><span class="line">      o = item;</span><br><span class="line">      <span class="comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span></span><br><span class="line">      <span class="comment">// 里面应该有goods这个数组并且数组的长度不为 0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.goods &amp;&amp; item.goods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      o = getID(item.goods, id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getID(data, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h1 id="十五-深拷贝、浅拷贝"><a href="#十五-深拷贝、浅拷贝" class="headerlink" title="十五 深拷贝、浅拷贝"></a>十五 深拷贝、浅拷贝</h1><h2 id="15-1-浅拷贝"><a href="#15-1-浅拷贝" class="headerlink" title="15.1 浅拷贝"></a>15.1 浅拷贝</h2><p>浅拷贝只是拷贝一层, 更深层次对象级别的只拷贝引用.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  name: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">  msg: &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="comment">// o[k] 属性名  obj[k]属性值</span></span><br><span class="line">  o[k] = obj[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="built_in">Object</span>.assign(o, obj);</span><br></pre></td></tr></table></figure><h2 id="15-2-深拷贝"><a href="#15-2-深拷贝" class="headerlink" title="15.2 深拷贝"></a>15.2 深拷贝</h2><p>深拷贝拷贝多层, 每一级别的数据都会拷贝.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  name: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">  msg: &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  color: [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;red&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">newobj, oldobj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> oldobj) &#123;</span><br><span class="line">    <span class="comment">// 判断我们的属性值属于那种数据类型</span></span><br><span class="line">    <span class="comment">// 1. 获取属性值  oldobj[k]</span></span><br><span class="line">    <span class="keyword">var</span> item = oldobj[k];</span><br><span class="line">    <span class="comment">// 2. 判断这个值是否是数组</span></span><br><span class="line">    <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">                newobj[k] = [];</span></span><br><span class="line"><span class="comment">                deepCopy(newobj[k], item) </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">      <span class="comment">// 准备个新数组</span></span><br><span class="line">      <span class="keyword">var</span> newArr = [];</span><br><span class="line">      <span class="comment">// 把属性值拷贝给新数组</span></span><br><span class="line">      deepCopy(newArr, item);</span><br><span class="line">      <span class="comment">// 把新数组赋值给newobj</span></span><br><span class="line">      newobj[k] = newArr;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="comment">// 3. 判断这个值是否是对象</span></span><br><span class="line">      newobj[k] = &#123;&#125;;</span><br><span class="line">      deepCopy(newobj[k], item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 4. 属于简单数据类型</span></span><br><span class="line">      newobj[k] = item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">deepCopy(o, obj);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"></span><br><span class="line">o.msg.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><h1 id="十六-正则表达式"><a href="#十六-正则表达式" class="headerlink" title="十六 正则表达式"></a>十六 正则表达式</h1><h2 id="16-1-正则表达式的创建"><a href="#16-1-正则表达式的创建" class="headerlink" title="16.1 正则表达式的创建"></a>16.1 正则表达式的创建</h2><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过调用 RegExp 对象的构造函数创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regexp);</span><br></pre></td></tr></table></figure><p>方式二：利用字面量创建 正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure><h2 id="16-2-测试正则表达式"><a href="#16-2-测试正则表达式" class="headerlink" title="16.2 测试正则表达式"></a>16.2 测试正则表达式</h2><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="number">123</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&quot;abc&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="16-3-正则表达式的组成"><a href="#16-3-正则表达式的组成" class="headerlink" title="16.3 正则表达式的组成"></a>16.3 正则表达式的组成</h2><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p>[正则测试工具]( &lt;<a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a>)</p><h2 id="16-4-边界符"><a href="#16-4-边界符" class="headerlink" title="16.4 边界符"></a>16.4 边界符</h2><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&quot;abcd&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&quot;aabcd&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;abcd&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;aabcd&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&quot;abcd&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&quot;aabcd&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&quot;abcabc&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="16-5-字符类"><a href="#16-5-字符类" class="headerlink" title="16.5 字符类"></a>16.5 字符类</h2><h3 id="16-5-1-号"><a href="#16-5-1-号" class="headerlink" title="16.5.1 [ ]号"></a>16.5.1 [ ]号</h3><p>[ ]表示有一系列字符可供选择，只要匹配其中一个就可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;andy&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;baby&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;color&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">&#x27;red&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;aa&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;b&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;c&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"> <span class="comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;z&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&#x27;A&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//字符组合，26个英文字母(大写和小写都可以)任何一个字母返回 true</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9_-]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="number">8</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;A&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;_&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;-&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&#x27;!&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;B&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="number">8</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">&#x27;!&#x27;</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="16-5-2-量词符"><a href="#16-5-2-量词符" class="headerlink" title="16.5.2 量词符"></a>16.5.2 量词符</h3><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复 0 次或更多次</td></tr><tr><td>+</td><td>重复 1 次或更多次</td></tr><tr><td>?</td><td>重复 0 次或 1 次</td></tr><tr><td>{n}</td><td>重复 n 次</td></tr><tr><td>{n,}</td><td>重复 n 次或更多次</td></tr><tr><td>{n,m}</td><td>重复 n 到 m 次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;0,4&#125;bc$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;bc&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;abc&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;aabc&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;aaabc&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;aaaabc&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;aaaaabc&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="16-5-3-用户表单验证"><a href="#16-5-3-用户表单验证" class="headerlink" title="16.5.3 用户表单验证"></a>16.5.3 用户表单验证</h3><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为: 用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为: 用户名不符合规范, 并且颜色为红色</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 4-6位的字符（字母、数字、_）</span></span><br><span class="line">        <span class="keyword">var</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        ipt.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 获取内容</span></span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">this</span>.value.trim();</span><br><span class="line">            <span class="comment">// 正则表达式</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_]&#123;4,6&#125;$/</span>;</span><br><span class="line">            <span class="comment">// 匹配校验</span></span><br><span class="line">            <span class="comment">// console.log(reg.test(name));</span></span><br><span class="line">            <span class="keyword">if</span> (reg.test(name)) &#123;</span><br><span class="line">                span.className = <span class="string">&#x27;right&#x27;</span>;</span><br><span class="line">                span.innerHTML = <span class="string">&#x27;用户名输入正确&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                span.className = <span class="string">&#x27;wrong&#x27;</span>;</span><br><span class="line">                span.innerHTML = <span class="string">&#x27;用户名输入错误&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="16-5-4-括号总结"><a href="#16-5-4-括号总结" class="headerlink" title="16.5.4 括号总结"></a>16.5.4 括号总结</h3><p>1.大括号 量词符. 里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符.</p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/">正则表达式在线测试</a></p><h2 id="16-6-预定义类"><a href="#16-6-预定义类" class="headerlink" title="16.6 预定义类"></a>16.6 预定义类</h2><table><thead><tr><th>预定类</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配 0-9 之间的任意数字</td></tr><tr><td>\D</td><td>匹配所有 0-9 以外的字符</td></tr><tr><td>\w</td><td>匹配任意的字母、数字、下划线</td></tr><tr><td>\W</td><td>除所有字母、数字、下划线以外的字符</td></tr><tr><td>\s</td><td>匹配空格</td></tr><tr><td>\S</td><td>匹配非空格的字符</td></tr></tbody></table><h2 id="16-7-正则替换-replace"><a href="#16-7-正则替换-replace" class="headerlink" title="16.7 正则替换 replace"></a>16.7 正则替换 replace</h2><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><ul><li>g 全选</li><li>i 包括大小写</li><li>gi 全选和大小写都包括</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="string">&#x27;andy&#x27;</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.replace(<span class="regexp">/andy/</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr2)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//全部替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcabc&#x27;</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>,<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bcabc</span></span><br><span class="line"><span class="comment">//全部替换g</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>a,<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bc哈哈bc</span></span><br><span class="line"><span class="comment">//忽略大小写i</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aAbcAba&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="regexp">/a/gi</span>,<span class="string">&#x27;哈哈&#x27;</span>)<span class="comment">//&quot;哈哈哈哈bc哈哈b哈哈&quot;</span></span><br></pre></td></tr></table></figure><h3 id="案例-过滤敏感词汇"><a href="#案例-过滤敏感词汇" class="headerlink" title="案例:过滤敏感词汇"></a>案例:过滤敏感词汇</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;message&quot;</span>&gt;&lt;<span class="regexp">/textarea&gt; &lt;button&gt;提交&lt;/</span>button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;textarea&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    div.innerHTML = text.value.replace(<span class="regexp">/激情|gay/g</span>, <span class="string">&#x27;**&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="十七-ES6-的新增语法"><a href="#十七-ES6-的新增语法" class="headerlink" title="十七 ES6 的新增语法"></a>十七 ES6 的新增语法</h1><h2 id="17-1-let"><a href="#17-1-let" class="headerlink" title="17.1 let"></a>17.1 let</h2><p>用于声明变量的关键字</p><p><strong>特点 1：具有块级作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><p>注意：使用 let 关键字声明变量才具有块级作用域，使用 var 声明的变量不具备块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><strong>特点 2：防止循环计数变量变为全局变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// i is not defined</span></span><br></pre></td></tr></table></figure><p><strong>特点 3：不存在变量提升</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><strong>特点 4：暂时性死区</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</span></span><br><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&quot;abc&quot;</span>; <span class="comment">// tmp is not defined</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典面试题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">//2</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/var.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">//0</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/let.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>let 关键字就是用来声明变量的</li><li>使用 let 关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用 let 关键字声明的变量才具有块级作用域 var 关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用 let 关键字声明的变量没有变量提升</li><li>使用 let 关键字声明的变量具有暂时性死区特性</li></ul><h2 id="17-2-const"><a href="#17-2-const" class="headerlink" title="17.2 const"></a>17.2 const</h2><p>声明常量，常量就是值（内存地址）不能变化的量</p><p>语法：const 常量名 = 值</p><p><strong>特点 1：具有块级作用域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><p><strong>特点 2：声明常量时必须赋初始值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><p><strong>特点 3：常量赋值后，值不能修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">20</span>; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;20&quot;</span> &#125;;</span><br><span class="line">obj = <span class="number">10</span>; <span class="comment">// 报错</span></span><br><span class="line">obj.name = <span class="string">&quot;zs&quot;</span>; <span class="comment">// 不报错，地址没发生变化</span></span><br><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="string">&quot;30&quot;</span> &#125;; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;];</span></span><br><span class="line">ary = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>const 声明的变量是一个常量</li><li>既然是常量不能重新赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改其内存地址</li><li>声明 const 时候必须要给定初始值</li></ul><h2 id="17-3-let、const、var-的区别"><a href="#17-3-let、const、var-的区别" class="headerlink" title="17.3 let、const、var 的区别"></a>17.3 let、const、var 的区别</h2><table><thead><tr><th align="center">var</th><th align="center">let</th><th align="center">const</th></tr></thead><tbody><tr><td align="center">函数级作用域</td><td align="center">块级作用域</td><td align="center">块级作用域</td></tr><tr><td align="center">变量提升</td><td align="center">不存在变量提升</td><td align="center">不存在变量提升</td></tr><tr><td align="center">值可更改</td><td align="center">值可更改</td><td align="center">值不可更改</td></tr></tbody></table><h2 id="17-4-解构赋值"><a href="#17-4-解构赋值" class="headerlink" title="17.4 解构赋值"></a>17.4 解构赋值</h2><h3 id="数组解构："><a href="#数组解构：" class="headerlink" title="数组解构："></a>数组解构：</h3><p>把数组中的元素赋值给其他变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//lisi</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// wangwu</span></span><br></pre></td></tr></table></figure><p>如果解构不成功，变量的值为 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d] = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//lisi</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// wangwu</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="对象解构："><a href="#对象解构：" class="headerlink" title="对象解构："></a>对象解构：</h3><p>把对象的属性值赋值给其他变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let &#123;属性名:变量1, 属性名:变量2&#125; = 对象;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>变量名和属性名不一致的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge &#125; = obj; <span class="comment">// myName myAge 这两个变量名和属性名就不一致</span></span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// &#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为 undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h2 id="17-5-箭头函数"><a href="#17-5-箭头函数" class="headerlink" title="17.5 箭头函数"></a>17.5 箭头函数</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*以前的定义函数*/</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体*/</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//箭头写法</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">//箭头函数写法</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>箭头函数不绑定 this 关键字，箭头函数中的 this，指向的是函数定义位置的上下文 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">//this 指向 是obj对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> resFn = fn.call(obj);</span><br><span class="line">resFn();</span><br></pre></td></tr></table></figure><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul><li>箭头函数中不绑定 this，箭头函数中的 this 指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的 this 指向谁，它就指向谁</li><li>箭头函数的优点在于解决了 this 执行环境所造成的一些问题。比如：解决了匿名函数 this 指向的问题（匿名函数的执行环境具有全局性），包括 setTimeout 和 setInterval 中使用 this 所造成的问题</li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  say: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.age); <span class="comment">// 100</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.say(); <span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域window</span></span><br></pre></td></tr></table></figure><h2 id="17-6-剩余参数"><a href="#17-6-剩余参数" class="headerlink" title="17.6 剩余参数"></a>17.6 剩余参数</h2><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组。</p><p>实参个数不固定时，使用一个形参变量【在形参前加…】接收剩余的所有参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//args.forEach(function(value)&#123;</span></span><br><span class="line">  <span class="comment">//  total += value;</span></span><br><span class="line">  <span class="comment">//&#125;);</span></span><br><span class="line">  args.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> (total += value));</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br></pre></td></tr></table></figure><h3 id="剩余参数和数组解构配合使用"><a href="#剩余参数和数组解构配合使用" class="headerlink" title="剩余参数和数组解构配合使用"></a>剩余参数和数组解构配合使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students;</span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">// &#x27;wangwu&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s2); <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="17-7-Array-的扩展方法"><a href="#17-7-Array-的扩展方法" class="headerlink" title="17.7 Array 的扩展方法"></a>17.7 Array 的扩展方法</h2><h3 id="17-7-1-扩展运算符"><a href="#17-7-1-扩展运算符" class="headerlink" title="17.7.1 扩展运算符"></a>17.7.1 扩展运算符</h3><p>把数组拆分成逗号分隔的参数序列。[‘a’,’b’,’c’] ===&gt; ‘a’,’b’,’c’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// ...ary  // 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...ary); <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">ary1.push(...ary2); <span class="comment">// 相当于 ary1.push(3,4,5);</span></span><br></pre></td></tr></table></figure><h4 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log([...divs]); <span class="comment">// [div,div,div]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="attr">pwd</span>:<span class="string">&#x27;123456&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(&#123;...obj&#125;); <span class="comment">// &#123;name:&#x27;admin&#x27;,pwd:&#x27;123456&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="17-7-2-构造函数方法：Array-from"><a href="#17-7-2-构造函数方法：Array-from" class="headerlink" title="17.7.2 构造函数方法：Array.from()"></a>17.7.2 构造函数方法：Array.from()</h3><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  length: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(arrayLike, <span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">2</span>); <span class="comment">//[2,4]</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">66</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id == <span class="number">2</span>); <span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的元素的索引，如果没有找到则返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.includes(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.includes(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>); <span class="comment">//从索引为2开始查找b</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.includes(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="find-在找到元素时就会终止循环，findIndex-返回值是元素索引，filter-与-forEach-不会终止循环"><a href="#find-在找到元素时就会终止循环，findIndex-返回值是元素索引，filter-与-forEach-不会终止循环" class="headerlink" title="find 在找到元素时就会终止循环，findIndex 返回值是元素索引，filter 与 forEach 不会终止循环"></a>find 在找到元素时就会终止循环，findIndex 返回值是元素索引，filter 与 forEach 不会终止循环</h4><h2 id="17-8-String-的扩展方法"><a href="#17-8-String-的扩展方法" class="headerlink" title="17.8 String 的扩展方法"></a>17.8 String 的扩展方法</h2><h3 id="17-8-1-模板字符串"><a href="#17-8-1-模板字符串" class="headerlink" title="17.8.1 模板字符串"></a>17.8.1 模板字符串</h3><p>ES6 新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure><h4 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure><h4 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  sex: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt; `</span>;</span><br></pre></td></tr></table></figure><h4 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;哈哈哈哈 追不到我吧 我就是这么强大&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br></pre></td></tr></table></figure><h3 id="17-8-2-实例方法：startsWith-和-endsWith"><a href="#17-8-2-实例方法：startsWith-和-endsWith" class="headerlink" title="17.8.2 实例方法：startsWith() 和 endsWith()"></a>17.8.2 实例方法：startsWith() 和 endsWith()</h3><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">str.startsWith(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// true</span></span><br><span class="line">str.endsWith(<span class="string">&quot;!&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="17-8-3-实例方法：repeat"><a href="#17-8-3-实例方法：repeat" class="headerlink" title="17.8.3 实例方法：repeat()"></a>17.8.3 实例方法：repeat()</h3><p>repeat 方法表示将原字符串重复 n 次，返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.repeat(<span class="number">3</span>); <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.repeat(<span class="number">2</span>); <span class="comment">// &quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure><h2 id="17-9-Set-数据结构"><a href="#17-9-Set-数据结构" class="headerlink" title="17.9 Set 数据结构"></a>17.9 Set 数据结构</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set 本身是一个构造函数，用来生成 Set 数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>Set 函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]); <span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值</span></span><br><span class="line">s.delete(<span class="number">2</span>); <span class="comment">// 删除 set 结构中的2值</span></span><br><span class="line">s.has(<span class="number">1</span>); <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值</span></span><br><span class="line">s.clear(); <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value));</span><br></pre></td></tr></table></figure><h2 id="18-对象属性和方法的简写"><a href="#18-对象属性和方法的简写" class="headerlink" title="18 对象属性和方法的简写"></a>18 对象属性和方法的简写</h2><ul><li><p>对象属性的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;uname&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">密码： &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span> id=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">&lt;button&gt;注册&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 单击注册按钮，收集用户信息，创建用户信息对象</span></span><br><span class="line">    <span class="keyword">var</span> uname = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#uname&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> password = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#password&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 收集数据</span></span><br><span class="line">        <span class="keyword">var</span> username = uname.value;</span><br><span class="line">        <span class="keyword">var</span> pwd = password.value;</span><br><span class="line">        <span class="comment">// 创建用户对象</span></span><br><span class="line">        <span class="comment">// var obj = &#123;</span></span><br><span class="line">        <span class="comment">//     username: username,</span></span><br><span class="line">        <span class="comment">//     pwd: pwd</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">var</span> obj = &#123;</span><br><span class="line">            username,</span><br><span class="line">            pwd</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>对象方法的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&quot;ldh&quot;</span>,</span><br><span class="line">  sing: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;冰雨&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法可以简写</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">sing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;忘情水&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="2021/05/05/node.js/"/>
      <url>2021/05/05/node.js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="1-fs-文件系统"><a href="#1-fs-文件系统" class="headerlink" title="1. fs 文件系统"></a>1. <code>fs</code> 文件系统</h1><h2 id="1-1-fs-文件系统模块"><a href="#1-1-fs-文件系统模块" class="headerlink" title="1.1 fs 文件系统模块"></a>1.1 <code>fs</code> 文件系统模块</h2><ol><li><p><code>fs</code> 模块是 <code>Node.js</code> 官方提供的、用来<strong>操作文件</strong>的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求</p><ul><li><code>fs.readFile()</code> 方法，用来读取指定文件中的内容</li><li><code>fs.writeFile()</code> 方法，用来向指定的文件中写入内容</li></ul></li><li><p>如果要在 <code>JavaScript</code> 代码中，使用 <code>fs</code> 模块来操作文件，则需要使用如下的方式先导入它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-2-读取指定文件中的内容-★"><a href="#1-2-读取指定文件中的内容-★" class="headerlink" title="1.2 读取指定文件中的内容 ★"></a>1.2 读取指定文件中的内容 ★</h2><ol><li> <code>fs.readFile()</code> 的语法格式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path, [options], callback);</span><br></pre></td></tr></table></figure><p>参数解读：</p><pre><code>  1. 参数1：必选参数，字符串，表示文件的路径  2. 参数2：可选参数，表示以什么编码格式来读取文件  3. 参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果  4. `fs.readFile()` 的示例代码</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一步，导入fs对象 */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// console.log(fs);</span></span><br><span class="line"><span class="comment">/* 第二步，调用 fs.readFile() 方法读取文件的内容 */</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./goudan.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  参数 1： 读取文件的存放路径</span></span><br><span class="line">  <span class="comment">//  参数 2： 读取文件时候的编码格式，一般默认是 utf8</span></span><br><span class="line">  <span class="comment">//  参数 3： 回调函数，拿到读取失败和成功的结果， err 以及 data</span></span><br><span class="line">  <span class="comment">// 读取完毕会执行这个回调</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        读取成功：err是null,data是文件内容</span></span><br><span class="line"><span class="comment">        读取失败：err是错误对象，data 是undefined</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="comment">// 判断文件是否读取成功</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件读取失败，错误信息为：&quot;</span> + err.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件读取成功，内容为：&quot;</span> + data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="1-3-向指定的文件中写入内容-★"><a href="#1-3-向指定的文件中写入内容-★" class="headerlink" title="1.3 向指定的文件中写入内容 ★"></a>1.3 向指定的文件中写入内容 ★</h2><ol><li><p><code>fs.writeFile()</code> 的语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(file, data, [options], callback);</span><br></pre></td></tr></table></figure><p>参数解读：</p><ol><li>参数 1：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径</li><li>参数 2：必选参数，表示要写入的内容</li><li>参数 3：可选参数，表示以什么格式写入文件内容，默认值是 <code>utf8</code></li><li>参数 4：必选参数，文件写入完成后的回调函数</li></ol></li><li><p><code>fs.writeFile()</code> 的示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一步，导入fs对象 */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">/* 第二步，写入内容 */</span></span><br><span class="line">fs.writeFile(<span class="string">&quot;./goudan1.txt&quot;</span>, <span class="string">&quot;531a&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;写入文件内容失败，错误信息为：&quot;</span> + err.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;写入文件内容成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    写入成功：err是null</span></span><br><span class="line"><span class="comment">    写入失败：err是错误对象</span></span><br><span class="line"><span class="comment">    如果文件不存在，会自动创建文件</span></span><br><span class="line"><span class="comment">    新内容会覆盖旧内容</span></span><br><span class="line"><span class="comment">    如果文件夹不存在，不会自动创建</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="1-4-fs-整理考试成绩案例"><a href="#1-4-fs-整理考试成绩案例" class="headerlink" title="1.4 fs 整理考试成绩案例"></a>1.4 <code>fs</code> 整理考试成绩案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入fs对象</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 读取成绩.txt</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./成绩.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否读取成功</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取文件失败，失败的信息为：&quot;</span> + err.message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;读取文件成功，文件内容为：&quot;</span> + data);</span><br><span class="line">  <span class="comment">// 读取文件成功， 文件内容为： 小红=99 小白=100 小黄=70 小黑=66 小绿=88</span></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        小红=99 小白=100 小黄=70 小黑=66 小绿=88</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        [&#x27;小红=99&#x27;,&#x27;小白=100&#x27;,&#x27;小黄=70&#x27;,&#x27;小黑=66&#x27;,&#x27;小绿=88&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        [&#x27;小红:99&#x27;,&#x27;小白:100&#x27;,&#x27;小黄:70&#x27;,&#x27;小黑:66&#x27;,&#x27;小绿:88&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        小红: 99</span></span><br><span class="line"><span class="comment">        小白: 100</span></span><br><span class="line"><span class="comment">        小黄: 70</span></span><br><span class="line"><span class="comment">        小黑: 66</span></span><br><span class="line"><span class="comment">        小绿: 88</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="comment">// console.log(data);</span></span><br><span class="line">  <span class="comment">// 把data字符串转成数组</span></span><br><span class="line">  <span class="keyword">const</span> oldArr = data.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="comment">// console.log(oldArr);  [ &#x27;小红=99&#x27;, &#x27;小白=100&#x27;, &#x27;小黄=70&#x27;, &#x27;小黑=66&#x27;, &#x27;小绿=88&#x27; ]</span></span><br><span class="line">  <span class="comment">// 遍历数组，把数组元素中的 = 替换成 ：</span></span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  oldArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    newArr.push(item.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;:&quot;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// console.log(newArr);  [ &#x27;小红:99&#x27;, &#x27;小白:100&#x27;, &#x27;小黄:70&#x27;, &#x27;小黑:66&#x27;, &#x27;小绿:88&#x27; ]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把数组拼接成字符串（拼接符是换行）</span></span><br><span class="line">  <span class="keyword">const</span> str = newArr.join(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">  <span class="comment">// console.log(str);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入内容到文件中</span></span><br><span class="line">  fs.writeFile(<span class="string">&quot;./成绩-ok.txt&quot;</span>, str, <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否写入成功</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写入文件内容失败&quot;</span>, err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;写入文件内容成功&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-path-路径模块"><a href="#2-path-路径模块" class="headerlink" title="2. path 路径模块"></a>2. <code>path</code> 路径模块</h1><h2 id="2-1-什么是-path-路径模块"><a href="#2-1-什么是-path-路径模块" class="headerlink" title="2.1 什么是 path 路径模块"></a>2.1 什么是 path 路径模块</h2><ol><li><code>path</code> 模块是 <code>Node.js</code> 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求，例如：</li></ol><ul><li><code>path.join()</code> 方法，用来将多个路径片段拼接成一个完整的路径字符串</li><li><code>path.basename()</code> 方法，用来从路径字符串中，将文件名解析出来</li></ul><ol><li><p>如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = rquire(<span class="string">&quot;path&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-path-路径拼接"><a href="#2-2-path-路径拼接" class="headerlink" title="2.2 path 路径拼接"></a>2.2 path 路径拼接</h2><ol><li><p><code>path.join()</code> 的语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.join([...paths]);</span><br></pre></td></tr></table></figure><p>参数解读：</p><ol><li><code>...paths</code> <string> 路径片段的序列</li><li>返回值: <string></li></ol></li><li><p><code>path.join()</code> 的代码示例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">&quot;goudan.txt&quot;</span>), <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件读取失败，错误信息为：&quot;</span> + err.message);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件读取成功，内容为：&quot;</span> + data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-3-path-basename-获取路径中的文件名"><a href="#2-3-path-basename-获取路径中的文件名" class="headerlink" title="2.3 path.basename() 获取路径中的文件名"></a>2.3 <code>path.basename()</code> 获取路径中的文件名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; LOADIPHLPAPI &#125; = <span class="built_in">require</span>(<span class="string">&quot;dns&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&quot;F:/haha/index.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径中文件名</span></span><br><span class="line"><span class="comment">// 完整的名称</span></span><br><span class="line"><span class="keyword">const</span> n1 = path.basename(fpath);</span><br><span class="line"><span class="comment">// 不带后缀的名称</span></span><br><span class="line"><span class="keyword">const</span> n2 = path.basename(fpath, <span class="string">&quot;.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(n1); <span class="comment">//index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(n2); <span class="comment">//index</span></span><br></pre></td></tr></table></figure><h2 id="2-4-path-extname-获取路径中的文件扩展名"><a href="#2-4-path-extname-获取路径中的文件扩展名" class="headerlink" title="2.4 path.extname() 获取路径中的文件扩展名"></a>2.4 <code>path.extname()</code> 获取路径中的文件扩展名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&quot;/a/b/c/d/index.html&quot;</span>; <span class="comment">// 文件的存放路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fullName = path.extname(fpath);</span><br><span class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">// .html 返回文件的拓展名</span></span><br></pre></td></tr></table></figure><h1 id="3-时钟案例"><a href="#3-时钟案例" class="headerlink" title="3. 时钟案例"></a>3. 时钟案例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    读取index.html,将其内容拆分3个文件</span></span><br><span class="line"><span class="comment">    读取文件内容</span></span><br><span class="line"><span class="comment">    提取css代码，写入到clock/index.css</span></span><br><span class="line"><span class="comment">    提取js代码，写入到clock/index.js</span></span><br><span class="line"><span class="comment">    提取html代码，写入到clock/index.html</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 正则对象</span></span><br><span class="line"><span class="keyword">const</span> regStyle = <span class="regexp">/&lt;style&gt;[\s\S]*&lt;\/style&gt;/</span>;</span><br><span class="line"><span class="keyword">const</span> regScript = <span class="regexp">/&lt;script&gt;[\s\S]*&lt;\/script&gt;/</span>;</span><br><span class="line"></span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">&quot;index.html&quot;</span>), <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否读取内容成功</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取内容失败,&quot;</span> + err.message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;读取内容成功,&quot;</span> + data);</span><br><span class="line">  resolveCss(data);</span><br><span class="line">  resolveJs(data);</span><br><span class="line">  resolveHTML(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveCss</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> r1 = regStyle.exec(css); <span class="comment">//数组的第一个元素就是匹配到的内容</span></span><br><span class="line">  <span class="comment">// console.log(r1[0]);</span></span><br><span class="line">  <span class="comment">// 替换&lt;styl&gt;&lt;/styl&gt;为空字符串</span></span><br><span class="line">  <span class="keyword">const</span> strCSS = r1[<span class="number">0</span>].replace(<span class="string">&quot;&lt;style&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&lt;/style&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="comment">// 把最终的结果，写入到clock/index.css文件中</span></span><br><span class="line">  fs.writeFile(</span><br><span class="line">    path.join(__dirname, <span class="string">&quot;clock/index.css&quot;</span>),</span><br><span class="line">    strCSS,</span><br><span class="line">    <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写入css文件失败&quot;</span> + err.message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;写入css文件成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveJs</span>(<span class="params">js</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  使用正则表达式提取出页面中的 &lt;scrip&gt;&lt;/scrip&gt; 标签</span></span><br><span class="line">  <span class="keyword">const</span> r2 = regScript.exec(js);</span><br><span class="line">  <span class="comment">//  将提取出来的脚本字符串，做进一步处理</span></span><br><span class="line">  <span class="keyword">const</span> newJS = r2[<span class="number">0</span>].replace(<span class="string">&quot;&lt;script&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&lt;/script&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="comment">//  将提取出来的 js 脚本，写入到 index.js 文件中</span></span><br><span class="line">  fs.writeFile(path.join(__dirname, <span class="string">&quot;clock/index.js&quot;</span>), newJS, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写入js文件失败&quot;</span>, err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;写入js文件成功&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveHTML</span>(<span class="params">htmlStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newHTML = htmlStr</span><br><span class="line">    .replace(regStyle, <span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;&#x27;</span>)</span><br><span class="line">    .replace(regScript, <span class="string">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(newHTML);</span><br><span class="line">  <span class="comment">// 写入文件</span></span><br><span class="line">  fs.writeFile(</span><br><span class="line">    path.join(__dirname, <span class="string">&quot;./clock/index.html&quot;</span>),</span><br><span class="line">    newHTML,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;写入 html文件失败！&quot;</span> + err.message);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;写入html文件成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知识点：exec（）作用就是在字符串中 <strong>用 正则 来找 匹配的字符</strong></p><p>返回值是一个数组 ， 数组中第一个元素是<strong>匹配到的内容，</strong>第二个是匹配到内容的<strong>首文字在该字符串中的索引</strong>，第三个元素则是，你<strong>传进去的字符串。</strong></p><h1 id="4-http-模块"><a href="#4-http-模块" class="headerlink" title="4. http 模块"></a>4. <code>http</code> 模块</h1><ol><li><p><code>http</code> 模块是 <code>Node.js</code> 官方提供的、用来创建 <code>web</code> 服务器的模块。通过 <code>http</code> 模块提供的 <code>http.createServer()</code> 方法，就能方便的把一台普通的电脑，变成一台 <code>Web</code> 服务器，从而对外提供 <code>Web</code> 资源服务</p></li><li><p>如果要希望使用 <code>http</code> 模块创建 <code>Web</code> 服务器，则需要先导入它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-1-创建-web-服务器-★"><a href="#4-1-创建-web-服务器-★" class="headerlink" title="4.1 创建 web 服务器 ★"></a>4.1 创建 web 服务器 ★</h2><p>5.1 实现步骤和核心代码</p><ol><li><p>导入 http 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建 web 服务器实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可快速创建一个 web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br></pre></td></tr></table></figure></li><li><p>为服务器实例绑定 request 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用服务器实例的 .on() 方法，为服务器绑定一个 request 事件</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只要有客户端来请求我们自己的服务器，就会被触发 request 事件，从而调用这个事件处理程序</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;访问服务器成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>启动服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用服务器实例的 .listen() 方法，即可启动当前的 web 服务器实例</span></span><br><span class="line">server.listen(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;启动服务器成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-创建基本的服务器"><a href="#4-2-创建基本的服务器" class="headerlink" title="4.2 创建基本的服务器"></a>4.2 创建基本的服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 http.createServer() 方法，即可快速创建一个 web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器绑定一个 request 事件</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">        req是request的简写，请求对象(客户端请求相关的信息)</span></span><br><span class="line"><span class="comment">            req.url请求对象</span></span><br><span class="line"><span class="comment">            req.method请求方式</span></span><br><span class="line"><span class="comment">        res是respose的简写，响应对象(做出响应)</span></span><br><span class="line"><span class="comment">            res.end(&#x27;响应的数据&#x27;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置响应头</span></span><br><span class="line">  res.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  res.end(<span class="string">&quot;黑马程序员1212&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">server.listen(<span class="number">1212</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-3-解决中文乱码问题"><a href="#4-3-解决中文乱码问题" class="headerlink" title="4.3 解决中文乱码问题"></a>4.3 解决中文乱码问题</h2><p>当调用 <code>res.end()</code> 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4-4-根据不同的-url-响应不同的内容"><a href="#4-4-根据不同的-url-响应不同的内容" class="headerlink" title="4.4 根据不同的 url 响应不同的内容"></a>4.4 根据不同的 <code>url</code> 响应不同的内容</h2><p>​ 需求</p><p>​ <a href="http://127.0.0.1:8080/index.html%E5%93%8D%E5%BA%94%E2%80%9C%E6%AC%A2%E8%BF%8E%E8%AE%BF%E9%97%AE%E9%A6%96%E9%A1%B5%E2%80%9D">http://127.0.0.1:8080/index.html响应“欢迎访问首页”</a></p><p>​ <a href="http://127.0.0.1:8080/index.html%E5%93%8D%E5%BA%94%E2%80%9C%E6%AC%A2%E8%BF%8E%E5%88%97%E8%A1%A8%E9%A1%B5%E2%80%9D">http://127.0.0.1:8080/index.html响应“欢迎列表页”</a></p><p>​ 其他页面“not found”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//判断请求地址  req.url 响应不同的地址</span></span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">&quot;/index.html&quot;</span> || req.url === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    content = <span class="string">&quot;欢迎访问首页&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">&quot;/list.hmtl&quot;</span>) &#123;</span><br><span class="line">    content = <span class="string">&quot;欢迎访问列表页&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    content = <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置响应头</span></span><br><span class="line">  res.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  res.end(content);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头</span></span><br><span class="line">  res.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  <span class="comment">// 判断请求地址  req.url 响应不同的内容</span></span><br><span class="line">  <span class="keyword">if</span> (req.url === <span class="string">&quot;/index.html&quot;</span> || req.url === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&quot;欢迎访问首页&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">&quot;/list.html&quot;</span>) &#123;</span><br><span class="line">    res.end(<span class="string">&quot;欢迎访问列表页&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="5-时钟-web-服务器案例"><a href="#5-时钟-web-服务器案例" class="headerlink" title="5. 时钟 web 服务器案例"></a>5. 时钟 <code>web</code> 服务器案例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 http、fs、path 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 监听 web 服务器的 request 事件</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取url地址</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="comment">// 预定义空白的文件存放路径</span></span><br><span class="line">  <span class="keyword">let</span> fpath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果请求的路径是 / ，则手动指定文件的存放路径</span></span><br><span class="line">    fpath = path.join(__dirname, <span class="string">&quot;/clock/index.html&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果请求的路径不为 / ，则动态拼接文件的存放路径</span></span><br><span class="line">    fpath = path.join(__dirname, <span class="string">&quot;/clock&quot;</span>, url);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 读取文件内容，响应回去</span></span><br><span class="line">  fs.reafFile(fpath, <span class="string">&quot;utf8&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line">server.listen(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;启动服务器成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="6-Node-中的模块化"><a href="#6-Node-中的模块化" class="headerlink" title="6. Node 中的模块化"></a>6. <code>Node</code> 中的模块化</h1><h2 id="6-1-模块化"><a href="#6-1-模块化" class="headerlink" title="6.1 模块化"></a>6.1 模块化</h2><p>模块化是一种思想。（拆分和组合，达到复用目的）</p><p>编程中也需要模块化的思想，把一个一个的小功能拆分成一个一个的模块。<br>当实现一个大功能时，可以像搭积木一样，把小模块按照需求组合起来。</p><h2 id="6-2-模块的分类"><a href="#6-2-模块的分类" class="headerlink" title="6.2 模块的分类"></a>6.2 模块的分类</h2><ol><li><p><strong>内置模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 加载内置的 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义模块</strong> （自己创建的 js 文件，一个 js 文件就是一个模块）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 加载用户的自定义模块</span></span><br><span class="line"><span class="keyword">const</span> custom = <span class="built_in">require</span>(<span class="string">&quot;./custom.js&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>第三方模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 加载第三方模块，(使用第三方模块也就是包)</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&quot;moment&quot;</span>);</span><br></pre></td></tr></table></figure><p>注意 1：加载模块时，对应模块中的代码就会被执行。</p><p>注意 2：可以省略文件的后缀.js</p></li></ol><h2 id="6-3-模块的作用域"><a href="#6-3-模块的作用域" class="headerlink" title="6.3 模块的作用域"></a>6.3 模块的作用域</h2><p>在当前模块中定义的变量、常量、函数，只能在当前模块使用。</p><p>好处：防止了全局变量污染、文件依赖等问题的产生.</p><h2 id="6-4-模块成员"><a href="#6-4-模块成员" class="headerlink" title="6.4 模块成员"></a>6.4 模块成员</h2><p>在当前模块中定义的变量、常量、函数，统称为“模块成员”</p><h2 id="6-5-module-exports-对象-★"><a href="#6-5-module-exports-对象-★" class="headerlink" title="6.5 module.exports 对象 ★"></a>6.5 <code>module.exports</code> 对象 ★</h2><p>在每个 <code>.js</code> 自定义模块中都有一个 <code>module</code> 对象，它里面存储了和当前模块有关的信息</p><ol><li>==在自定义模块中，可以使用 <code>module.exports</code> 对象，将模块内的成员共享出去，供外界使用==</li><li>==外界用 <code>require()</code> 方法导入自定义模块时，得到的就是 <code>module.exports</code> 所指向的对象==</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/123.png"></p><h2 id="6-6-module-exports-对象一键共享多个成员"><a href="#6-6-module-exports-对象一键共享多个成员" class="headerlink" title="6.6 module.exports 对象一键共享多个成员"></a>6.6 <code>module.exports</code> 对象一键共享多个成员</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/456.png"></p><h2 id="6-7-exports-对象"><a href="#6-7-exports-对象" class="headerlink" title="6.7 exports 对象"></a>6.7 <code>exports</code> 对象</h2><p>由于 <code>module.exports</code> 单词写起来比较复杂，为了简化向外共享成员的代码，<code>Node</code> 提供了 <code>exports</code> 对象。默认情况下，<code>exports</code> 和 <code>module.exports</code> 指向同一个对象。最终共享的结果，还是以 <code>module.exports</code> 指向的对象为准</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">exports</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.exports);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下，`exports` 和 `module.exports` 指向同一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">exports</span> === <span class="built_in">module</span>.exports); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将私有成员共享出去</span></span><br><span class="line"><span class="built_in">exports</span>.username = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接挂载方法</span></span><br><span class="line"><span class="built_in">exports</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hellp&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-8-exports-和-module-exports-的使用误区"><a href="#6-8-exports-和-module-exports-的使用误区" class="headerlink" title="6.8 exports 和 module.exports 的使用误区"></a>6.8 <code>exports</code> 和 <code>module.exports</code> 的使用误区</h2><ol><li>时刻谨记，<code>require()</code> 模块时，得到的永远是 <code>module.exports</code> 指向的对象</li><li><strong>注意：为了防止混乱，建议大家不要在同一个模块中同时使用 <code>exports</code> 和 <code>module.exports</code></strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.username = <span class="string">&quot;Tom&quot;</span>; <span class="comment">// 不会被打印</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.username = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会被执行</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个都会执行</span></span><br><span class="line"><span class="built_in">module</span>.exports.username = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.gender = <span class="string">&quot;男&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三个都会打印</span></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">  gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">exports</span>;</span><br><span class="line"><span class="built_in">module</span>.exports.username = <span class="string">&quot;Tom&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="7-npm-初体验-（包）"><a href="#7-npm-初体验-（包）" class="headerlink" title="7. npm 初体验 （包）"></a>7. <code>npm</code> 初体验 （包）</h1><h2 id="7-1-使用第三方包对时间进行格式化"><a href="#7-1-使用第三方包对时间进行格式化" class="headerlink" title="7.1 使用第三方包对时间进行格式化"></a>7.1 使用第三方包对时间进行格式化</h2><ol><li><p>使用 <code>npm</code> 包管理工具，在项目中安装格式化时间的包 <code>moment</code></p></li><li><p>使用 <code>require()</code> 导入格式化时间的包</p></li><li><p>参考 <code>moment</code> 的官方 <code>API</code> 文档对时间进行格式化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.moment</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&quot;moment&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.参考 moment 官方 API 文档，调用对应的方法，对时间进行格式化</span></span><br><span class="line"><span class="comment">// 2.1 调用 moment() 方法，得到当前的事件</span></span><br><span class="line"><span class="comment">// 2.2 针对当前的时间，调用 format() 方法，按照指定的格式进行时间的格式化</span></span><br><span class="line"><span class="keyword">const</span> dt = moment().format(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dt);</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-2-npm-install-命令安装包"><a href="#7-2-npm-install-命令安装包" class="headerlink" title="7.2 npm install 命令安装包"></a>7.2 <code>npm install</code> 命令安装包</h2><ol><li><p>如果想在项目中安装指定名称的包，需要运行如下的命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 包的完整名称</span><br></pre></td></tr></table></figure></li><li><p>上述的装包命令，可以简写成如下格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i 包的完整名称</span><br><span class="line">npm i moment</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-3-设置指定版本的包"><a href="#7-3-设置指定版本的包" class="headerlink" title="7.3 设置指定版本的包"></a>7.3 设置指定版本的包</h2><p>默认情况下，使用 <code>npm install</code> 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 <code>@ </code>符号指定具体的版本，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment@<span class="number">2.22</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><h2 id="7-4-卸载包"><a href="#7-4-卸载包" class="headerlink" title="7.4 卸载包"></a>7.4 卸载包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall 包名</span><br></pre></td></tr></table></figure><h2 id="7-5-解决包下载速度慢的问题"><a href="#7-5-解决包下载速度慢的问题" class="headerlink" title="7.5 解决包下载速度慢的问题"></a>7.5 解决包下载速度慢的问题</h2><ol><li><p>通过 npm 包管理器，将 nrm 安装为全局可用的工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nrm -g</span><br></pre></td></tr></table></figure></li><li><p>查看下载列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure></li><li><p>切换默认下载地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure></li></ol><h1 id="8-包管理配置"><a href="#8-包管理配置" class="headerlink" title="8. 包管理配置"></a>8. 包管理配置</h1><h2 id="8-1-package-json"><a href="#8-1-package-json" class="headerlink" title="8.1 package.json"></a>8.1 <code>package.json</code></h2><ul><li><p>在项目根目录中，创建一个叫做 **<code>package.json</code>**的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除 <code>node_modules</code> 目录之后，在团队成员之间共享项目的源代码</p></li><li><p>今后在项目开发中，一定要把 <code>node_modules</code> 文件夹，添加到 <code>.gitignore</code> 忽略文件中</p></li></ul><h2 id="8-2-快速创建-package-json"><a href="#8-2-快速创建-package-json" class="headerlink" title="8.2 快速创建 package.json"></a>8.2 快速创建 <code>package.json</code></h2><p><code>npm</code> 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 <code>package.json</code> 这个包管理配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>上述命令<strong>只能在英文的目录下成功运行！</strong>所以，项目文件夹的名称<strong>一定要使用英文命名，不要使用中文，不能出现空格</strong></li><li>运行 <code>npm install</code> 命令安装包的时候，<code>npm</code> 包管理工具会自动把包的名称和版本号，记录到 <code>package.json</code> 中</li></ol><h2 id="8-3-一次性安装所有包"><a href="#8-3-一次性安装所有包" class="headerlink" title="8.3 一次性安装所有包"></a>8.3 一次性安装所有包</h2><p>当我们拿到一个剔除了 node_modules 的项目之后，需要先把所有的包下载到项目中，才能将项目运行起来。</p><p>可以运行 <code>npm install</code> 命令（或 <code>npm i</code>）一次性安装所有的依赖包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h1 id="9-包的分类"><a href="#9-包的分类" class="headerlink" title="9. 包的分类"></a>9. 包的分类</h1><h2 id="9-1-项目包"><a href="#9-1-项目包" class="headerlink" title="9.1 项目包"></a>9.1 项目包</h2><ol><li>那些被安装到项目的 <code>node_modules</code> 目录中的包，都是项目包</li><li>项目包又分为两类，分别是：</li></ol><ul><li>开发依赖包，被记录到 <code>devDependencies</code> 节点中的包，<strong>只在开发期间会用到</strong></li><li>核心依赖包，被记录到 <code>dependencies</code> 节点中的包，<strong>在开发期间和项目上线之后都会用到</strong><br>![](/images/010 - 项目包.png)</li></ul><h2 id="9-2-全局包"><a href="#9-2-全局包" class="headerlink" title="9.2 全局包"></a>9.2 全局包</h2><ol><li>在执行 <code>npm install</code> 命令时，如果提供了 <code>-g</code> 参数，则会把包安装为全局包</li><li>全局包会被安装到 <code>C:\Users\用户目录\AppData\Roaming\npm\node_modules</code> 目录下</li><li>注意：</li></ol><ul><li>只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令</li><li>判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可<br>![](/images/011 - 全局包.png)</li></ul><h2 id="9-3-i5ting-toc-的安装和使用"><a href="#9-3-i5ting-toc-的安装和使用" class="headerlink" title="9.3 i5ting_toc 的安装和使用"></a>9.3 <code>i5ting_toc</code> 的安装和使用</h2><ol><li><p><code>i5ting_toc</code> 是一个可以把 <code>md</code> 文档转为 <code>html</code> 页面的小工具<br>![](/images/012 - i5ting_toc.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="10-express"><a href="#10-express" class="headerlink" title="10. express"></a>10. express</h1><h2 id="10-1-Express-的基本使用"><a href="#10-1-Express-的基本使用" class="headerlink" title="10.1 Express 的基本使用"></a>10.1 Express 的基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在项目所处的目录中，运行如下的终端命令，即可将 express 安装到项目中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><h3 id="导入-express"><a href="#导入-express" class="headerlink" title="导入 express"></a>导入 express</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建-web-服务器"><a href="#创建-web-服务器" class="headerlink" title="创建 web 服务器"></a>创建 web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><h3 id="监听请求"><a href="#监听请求" class="headerlink" title="监听请求"></a>监听请求</h3><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-2-监听-GET-和-POST-请求，并影响客户端"><a href="#10-2-监听-GET-和-POST-请求，并影响客户端" class="headerlink" title="10.2 监听 GET 和 POST 请求，并影响客户端"></a>10.2 监听 GET 和 POST 请求，并影响客户端</h2><ol><li><p>监听 <code>GET</code> 请求</p><ul><li>通过 <code>app.get()</code> 方法，可以监听客户端的 GET 请求，具体的语法格式如下<br>![](/images/017 - 监听 GET 请求.png)</li></ul></li><li><p>监听 <code>POST</code> 请求</p><ul><li>通过 <code>app.post()</code> 方法，可以监听客户端的 POST 请求，具体的语法格式如下<br>![](/images/018 - 监听 POST 请求.png)</li></ul></li><li><p>把内容响应给客户端</p></li></ol><ul><li>通过 <code>res.send()</code> 方法，可以把处理好的内容，发送给客户端<br>![](/images/019 - send.png)</li></ul><h3 id="10-2-1-http-创建服务器："><a href="#10-2-1-http-创建服务器：" class="headerlink" title="10.2.1 http 创建服务器："></a>10.2.1 http 创建服务器：</h3><p>​ 需求：</p><p>​ get 请求：</p><p>​ <a href="http://127.0.0.1:8080/api/getusers">http://127.0.0.1:8080/api/getusers</a></p><p>​ 响应：“获取用户列表成功”</p><p>​ post 请求：</p><p>​ <a href="http://127.0.0.1:8080/api/addusers">http://127.0.0.1:8080/api/addusers</a></p><p>​ 响应：“ 添加用户成功”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 创建服务器对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 绑定request事件</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断请求方式</span></span><br><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url === <span class="string">&quot;/api/getusers&quot;</span>) &#123;</span><br><span class="line">      res.end(<span class="string">&quot;得到用户信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.method === <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url === <span class="string">&quot;/api/addusers&quot;</span>) &#123;</span><br><span class="line">      res.end(<span class="string">&quot;添加用户成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;启动服务器成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-2-2-express-创建服务器："><a href="#10-2-2-express-创建服务器：" class="headerlink" title="10.2.2 express 创建服务器："></a>10.2.2 express 创建服务器：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 监听get请求</span></span><br><span class="line">app.get(<span class="string">&quot;/api/getusers&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;获取用户成功啦&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    name: <span class="string">&quot;赵四&quot;</span>,</span><br><span class="line">    age: <span class="number">50</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听post请求</span></span><br><span class="line">app.post(<span class="string">&quot;/api/addusers&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;添加用户成功啦&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3. 调用 app.listen(端口号, 启动后的回调函数), 启动服务器</span></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-3-获取-URL-中携带的查询参数"><a href="#10-3-获取-URL-中携带的查询参数" class="headerlink" title="10.3 获取 URL 中携带的查询参数"></a>10.3 获取 URL 中携带的查询参数</h2><ol><li>通过 <code>req.query</code> 对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数<br>![](/images/020 - 获取 URL 中携带的查询参数.png)</li></ol><h2 id="10-4-获取-URL-中的动态参数"><a href="#10-4-获取-URL-中的动态参数" class="headerlink" title="10.4 获取 URL 中的动态参数"></a>10.4 获取 URL 中的动态参数</h2><ol><li><p>通过 <code>req.params</code> 对象，可以访问到 <code>URL</code> 中，通过 : 匹配到的动态参数<br>![](/images/021 - 获取 URL 中的动态参数.png)</p></li><li><p>补充知识点</p></li></ol><ul><li><code>/:id​</code> – id 值不是固定的，可以自己定义，例如： <code>/:ids</code></li><li>展示到页面中的 <code>id</code> 键，是自定义的变量值</li><li>参数可以有多个，例如： <code>/:ids/:name</code></li></ul><h2 id="10-5-获取-URL-中的参数"><a href="#10-5-获取-URL-中的参数" class="headerlink" title="10.5 获取 URL 中的参数"></a>10.5 获取 URL 中的参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 监听get请求</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 接收客户端的查询参数（查询字符串）</span></span><br><span class="line">  <span class="comment">// req.query&#123;&#125;</span></span><br><span class="line">  res.send(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    查询字符串：http://127.0.0.1:8080?name=zs&amp;age=30</span></span><br><span class="line"><span class="comment">    动态参数： http://127.0.0.1:8080/zs/age</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 第1步，在监听的url地址中，:参数名 的方式设置参数（占位符）</span></span><br><span class="line">app.get(<span class="string">&quot;/user/:id/:name/:age&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 第2步，通过req.params获取动态参数</span></span><br><span class="line">  res.send(req.params);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听post请求</span></span><br><span class="line">app.post(<span class="string">&quot;/api/addusers&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;添加用户成功啦&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3. 调用 app.listen(端口号, 启动后的回调函数), 启动服务器</span></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-6-托管静态资源"><a href="#10-6-托管静态资源" class="headerlink" title="10.6 托管静态资源"></a>10.6 托管静态资源</h2><h3 id="10-6-1-express-static"><a href="#10-6-1-express-static" class="headerlink" title="10.6.1 express.static()"></a>10.6.1 <code>express.static()</code></h3><ol><li><code>express</code> 提供了一个非常好用的函数，叫做 <code>express.static()</code>，通过它，我们可以非常方便地创建一个静态资源服务器，<br>例如，通过如下代码就可以将 <code>public</code> 目录下的图片、<code>CSS</code> 文件、<code>JavaScript</code> 文件对外开放访问了</li><li><code>app.use(express.static(&#39;clock&#39;));</code> 在浏览器直接输入 <a href="http://127.0.0.1/index.html">http://127.0.0.1/index.html</a> 就可以直接访问，不需要在 index.html 前面加 clock<br>![](/images/022 - express.static().png)</li></ol><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    静态资源托管：</span></span><br><span class="line"><span class="comment">        客户端请求静态资源文件（html、css、js、图片）</span></span><br><span class="line"><span class="comment">        服务器会自动到指定文件夹下读取对应文件的内容，响应返回的数据</span></span><br><span class="line"><span class="comment">    app.use(express.static(&#x27;clock&#x27;));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">&quot;clock&quot;</span>));</span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-6-2-托管多个静态资源目录"><a href="#10-6-2-托管多个静态资源目录" class="headerlink" title="10.6.2 托管多个静态资源目录"></a>10.6.2 托管多个静态资源目录</h3><ol><li>如果要托管多个静态资源目录，请多次调用 <code>express.static()</code> 函数，<br>访问静态资源文件时，<code>express.static()</code> 函数会根据目录的添加顺序查找所需的文件<br>![](/images/023 - 托管多个静态资源目录.png)</li></ol><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里，调用 express.static() 方法，快速的对外提供静态资源</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;public&quot;</span>));</span><br><span class="line">app.use(express.static(<span class="string">&quot;static&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-6-3-挂载路径前缀"><a href="#10-6-3-挂载路径前缀" class="headerlink" title="10.6.3 挂载路径前缀"></a>10.6.3 挂载路径前缀</h3><ol><li>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式<br>![](/images/024 - 挂载路径前缀.png)</li></ol><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里，调用 express.static() 方法，快速的对外提供静态资源</span></span><br><span class="line">app.use(<span class="string">&quot;/static&quot;</span>, express.static(<span class="string">&quot;public&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="11-路由"><a href="#11-路由" class="headerlink" title="11. 路由"></a>11. 路由</h1><h2 id="11-1-Express-路由"><a href="#11-1-Express-路由" class="headerlink" title="11.1 Express 路由"></a>11.1 <code>Express</code> 路由</h2><p>路由：一种映射关系</p><p>express 路由：==客户端的请求==和==服务器处理函数==之间的==映射关系==</p><h2 id="11-2-路由挂载"><a href="#11-2-路由挂载" class="headerlink" title="11.2 路由挂载"></a>11.2 路由挂载</h2><p>监听客户端请求，也叫挂载路由</p><h2 id="11-3-路由匹配"><a href="#11-3-路由匹配" class="headerlink" title="11.3 路由匹配"></a>11.3 路由匹配</h2><p>如果请求类型和请求地址，匹配成功就执行对应的处理函数</p><p>从上往下一次匹配，匹配成功就不会继续往下匹配</p><h2 id="11-4-Express-路由最简单的用法"><a href="#11-4-Express-路由最简单的用法" class="headerlink" title="11.4 Express 路由最简单的用法"></a>11.4 Express 路由最简单的用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.get(<span class="string">&quot;/api/getuser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;获取用户成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">&quot;/api/adduser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;添加用户成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">&quot;/api/edituser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;编辑用户成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/api/deluser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;删除用户成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开启路由器</span></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>效果：</strong><br><img src= "/img/loading.gif" data-lazy-src="/images/%E8%B7%AF%E7%94%B11.png"></p><h2 id="11-5-模块化路由"><a href="#11-5-模块化路由" class="headerlink" title="11.5 模块化路由"></a>11.5 模块化路由</h2><p>​ 为了方便对路由进行模块化的管理，<code>Express</code> 不建议将路由直接挂载到 <code>app</code> 上，而是推荐将路由抽离为单独的模块，将路由抽离为单独模块的步骤如下</p><ul><li>创建路由模块对应的 <code>.js</code> 文件</li><li>调用 <code>express.Router()</code>函数创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>使用 <code>module.exports</code> 向外共享路由对象</li><li>使用 <code>app.use()</code> 函数注册路由模块</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%B7%AF%E7%94%B12.png"></p><h2 id="11-6-把路由处理函数放到单独的模块-★"><a href="#11-6-把路由处理函数放到单独的模块-★" class="headerlink" title="11.6 把路由处理函数放到单独的模块 ★"></a>11.6 把路由处理函数放到单独的模块 ★</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%B7%AF%E7%94%B14.png"></p><h1 id="12-中间件"><a href="#12-中间件" class="headerlink" title="12. 中间件"></a>12. 中间件</h1><h2 id="12-1-Express-中间件"><a href="#12-1-Express-中间件" class="headerlink" title="12.1 Express 中间件"></a>12.1 Express 中间件</h2><p>所谓的中间件（<code>Middleware</code> ），特指业务流程的<strong>中间处理环节</strong></p><p>express 的中间件：请求和响应之间的处理环节</p><h2 id="12-2-Express-中间件的格式"><a href="#12-2-Express-中间件的格式" class="headerlink" title="12.2 Express 中间件的格式"></a>12.2 Express 中间件的格式</h2><p>Express 的中间件，<strong>本质上就是一个 <code>function</code> 处理函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>next 函数</strong>是实现<strong>多个中间件连续调用</strong>的关键，它表示把流转关系<strong>转交</strong>给下一个<strong>中间件</strong>或<strong>路由</strong></p><h2 id="12-3-全局生效的中间件-○"><a href="#12-3-全局生效的中间件-○" class="headerlink" title="12.3 全局生效的中间件 ○"></a>12.3 全局生效的中间件 ○</h2><ol><li>客户端发起的<strong>任何请求</strong>，到达服务器之后，都会触发的中间件，叫做全局生效的中间件</li><li>通过调用 <code>app.use(中间件函数)</code>，即可顶一个全局生效的中间件</li><li>定义全局中间件也可以将中间件函数直接挂载到 <code>app.use()</code> 上面</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 定义一个中间件（全局中间件，所有的请求过来都会执行它）</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  <span class="comment">// 交给下一个中间件或者路由处理函数进行处理</span></span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.get(<span class="string">&quot;/api/getuser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;获取人员成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/api/deluser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;删除人员成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开启服务器</span></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-4-定义多个全局中间件"><a href="#12-4-定义多个全局中间件" class="headerlink" title="12.4 定义多个全局中间件"></a>12.4 定义多个全局中间件</h2><ol><li><p>可以使用 <code>app.use()</code> 连续定义多个全局中间件，客户端请求到达服务器之后，会按照中间件定义的先后顺序依次执行</p></li><li><p>案例代码</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个全局中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;调用了第一个全局的中间件&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个全局中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;调用了第二个全局的中间件&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line"><span class="comment">// 请求这两个路由，会依次触发上述两个全局中间件</span></span><br><span class="line">app.get(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;User Page&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-5-局部生效的中间件-○"><a href="#12-5-局部生效的中间件-○" class="headerlink" title="12.5 局部生效的中间件 ○"></a>12.5 局部生效的中间件 ○</h2><ol><li><p>不使用 <code>app.use()</code> 定义的中间件，叫做局部生效的中间件</p></li><li><p>案例代码</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    局部中间件：只对某一个请求进行预处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> m2 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line"><span class="comment">// m1 m2 这个中间件只在 &quot;当前路由中生效&quot;，这种用法属于 &quot;局部生效的中间件&quot;</span></span><br><span class="line"><span class="comment">// 请求这两个路由，会依次触发上述两个全局中间件</span></span><br><span class="line">app.get(<span class="string">&quot;/user&quot;</span>, m1, m2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;User Page&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&quot;/text&quot;</span>, [m1, m2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;User ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-6-中间件的作用"><a href="#12-6-中间件的作用" class="headerlink" title="12.6 中间件的作用"></a>12.6 中间件的作用</h2><ol><li><p>多个中间件之间，共享同一份 <code>req</code> 和 <code>res</code>，基于这样的特性，我们可以在<strong>上游</strong> 的中间件中，统一为 <code>req</code> 或 <code>res</code> 对象添加自定义的属性和方法，供下游的中间件或路由进行使用<br>![](/images/009 - 中间件的作用.png)</p></li><li><p>案例代码</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 给req添加属性</span></span><br><span class="line">  req.startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="comment">// 给res添加方法</span></span><br><span class="line">  res.cc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line"><span class="comment">// 请求这两个路由，会依次触发上述两个全局中间件</span></span><br><span class="line">app.get(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.cc();</span><br><span class="line">  res.send(<span class="string">&quot;User Page&quot;</span> + req.startTime);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-7-中间件的-5-个使用注意事项"><a href="#12-7-中间件的-5-个使用注意事项" class="headerlink" title="12.7 中间件的 5 个使用注意事项"></a>12.7 中间件的 5 个使用注意事项</h2><ol><li>一定要在路由之前注册中间件</li><li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li><li>执行完中间件的业务代码之后，不要忘记调用 <code>next()</code> 函数</li><li>为了防止代码逻辑混乱，调用 <code>next()</code> 函数后不要再写额外的代码</li><li>连续调用多个中间件时，多个中间件之间，共享 <code>req</code> 和 <code>res</code> 对象</li></ol><h1 id="13-中间件的分类"><a href="#13-中间件的分类" class="headerlink" title="13. 中间件的分类"></a>13. 中间件的分类</h1><h2 id="13-1-中间件的分类"><a href="#13-1-中间件的分类" class="headerlink" title="13.1 中间件的分类"></a>13.1 中间件的分类</h2><ol><li>为了方便大家理解和记忆中间件的使用，Express 官方把常见的中间件用法，分成了 5 大类，分别是</li></ol><ul><li>应用级别的中间件</li><li>路由级别的中间件</li><li>错误级别的中间件</li><li>Express 内置的中间件</li><li>第三方的中间件</li></ul><h2 id="13-2-应用级别的中间件"><a href="#13-2-应用级别的中间件" class="headerlink" title="13.2 应用级别的中间件"></a>13.2 应用级别的中间件</h2><p>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，<strong>绑定到 <code>app</code> 实例上的中间件</strong>，叫做应用级别的中间件<br>![](/images/010 - 应用级别的中间件.png)</p><h2 id="13-3-路由级别的中间件"><a href="#13-3-路由级别的中间件" class="headerlink" title="13.3 路由级别的中间件"></a>13.3 路由级别的中间件</h2><ol><li>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件</li><li>用法上和应用级别中间件没有任何区别，只不过，应用级别中间件是绑定到 <code>app</code> 实例上，路由级别中间件绑定到 <code>router</code> 实例上<br>![](/images/011 - 路由级别的中间件.png)</li></ol><h2 id="13-4-错误级别中间件-○"><a href="#13-4-错误级别中间件-○" class="headerlink" title="13.4 错误级别中间件 ○"></a>13.4 错误级别中间件 ○</h2><ol><li>错误级别中间件的作用： 专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>格式：错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是<code>(err, req, res, next)</code></li><li>注意： ==错误级别的中间件，必须注册在所有路由之后==</li><li>案例代码：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 路由</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.1 抛出一个自定义的错误</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;服务器内部发生了错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">  res.send(<span class="string">&quot;Home Page.&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 错误级别的中间件</span></span><br><span class="line"><span class="comment">// 注意：错误级别的中间件，必须注册在所有路由之后</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2.1 在服务器打印错误消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;发生了错误：&quot;</span> + err.message);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 向客户端响应错误相关的内容</span></span><br><span class="line">  res.send(err.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="13-5-Express-内置的中间件-○"><a href="#13-5-Express-内置的中间件-○" class="headerlink" title="13.5 Express 内置的中间件 ○"></a>13.5 Express 内置的中间件 ○</h2><p>自 <code>Express 4.16.0</code> 版本开始，<code>Express</code> 内置了 3 个常用的中间件，极大的提高了 <code>Express</code> 项目的开发效率和体验</p><ol><li><code>express.static</code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、<code>CSS</code> 样式等（无兼容性）</li><li><code>express.json</code> 解析 <code>JSON</code> post 请求 json 格式的请求体数据（<strong>有兼容性</strong>，仅在 <code>4.16.0+</code> 版本中可用）</li><li><code>express.urlencoded</code> 解析 <code>URL-encoded</code> post 请求中键值对格式的请求体数据（<strong>有兼容性</strong>，仅在 <code>4.16.0+</code> 版本中可用）<br>![](/images/012 - Express 内置的中间件.png)</li></ol><h3 id="13-5-1-express-json-中间件的使用"><a href="#13-5-1-express-json-中间件的使用" class="headerlink" title="13.5.1 express.json 中间件的使用"></a>13.5.1 <code>express.json</code> 中间件的使用</h3><ol><li><code>express.json()</code> 中间件，解析表单中的 <code>JSON</code> 格式的数据</li><li>案例代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：除了错误级别的中间件，其他的中间件，必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 通过 express.json() 这个中间件，解析表单中的 JSON 格式的数据</span></span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在服务器，可以使用 req.body 这个属性，来接收客户端发送过来的请求体数据</span></span><br><span class="line">  <span class="comment">// 默认情况下，如果不配置解析表单数据中间件，则 req.body 默认等于 undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="13-5-2-express-urlencoded-中间件的使用"><a href="#13-5-2-express-urlencoded-中间件的使用" class="headerlink" title="13.5.2 express.urlencoded 中间件的使用"></a>13.5.2 <code>express.urlencoded</code> 中间件的使用</h3><ol><li><code>express.urlencoded</code> 解析 <code>URL-encoded</code> 格式的请求体数据</li><li>案例代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 express.urlencoded() 这个中间件，来解析表单中的 url-encoded 格式的数据</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/book&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="13-6-第三方的中间件"><a href="#13-6-第三方的中间件" class="headerlink" title="13.6 第三方的中间件"></a>13.6 第三方的中间件</h2><ol><li>非 <code>Express</code> 官方内置，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以按需下载并配置第三方中间件，从而提高项目的开发效率</li><li>例如：在 <code>express@4.16.0</code> 之前的版本中，经常使用 <code>body-parser</code> 这个第三方中间件，来解析请求体数据。使用步骤如下<ul><li>运行 <code>npm install body-parser</code> 安装中间件</li><li>使用 <code>require</code> 导入中间件</li><li>调用 <code>app.use()</code> 注册并使用中间件</li></ul></li><li><strong>注意：<code>Express</code> 内置的 <code>express.urlencoded</code> 中间件，就是基于 <code>body-parser</code> 这个第三方中间件进一步封装出来的</strong></li><li>案例代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 导入解析表单数据的中间件 body-parser</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 express.urlencoded() 这个中间件，来解析表单中的 url-encoded 格式的数据</span></span><br><span class="line"><span class="comment">// app.use(express.urlencoded(&#123; extended: false &#125;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 app.use() 注册中间件</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/book&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="14-自定义中间件"><a href="#14-自定义中间件" class="headerlink" title="14. 自定义中间件"></a>14. 自定义中间件</h1><h2 id="14-1-需求以及实现步骤"><a href="#14-1-需求以及实现步骤" class="headerlink" title="14.1 需求以及实现步骤"></a>14.1 需求以及实现步骤</h2><ol><li>需求描述： 自己手动模拟一个类似于 <code>express.urlencoded</code> 这样的中间件，来解析 <strong><code>POST 提交到服务器的表单数据</code></strong></li><li>实现步骤：</li></ol><ul><li>定义中间件</li><li>监听 <code>req</code> 的 <code>data</code> 事件</li><li>监听 <code>req</code> 的 <code>end</code> 事件</li><li>使用 <code>querystring</code> 模块解析请求体数据</li><li>将解析出来的数据对象挂载为 <code>req.body</code></li><li>将自定义中间件封装为模块</li></ul><h2 id="14-2-定义中间件"><a href="#14-2-定义中间件" class="headerlink" title="14.2 定义中间件"></a>14.2 定义中间件</h2><ol><li>使用 <code>app.use()</code> 来定义全局生效的中间件</li><li>代码如下：<br>![](/images/013 - 定义中间件.png)</li></ol><h2 id="14-3-监听-req-的-data-事件"><a href="#14-3-监听-req-的-data-事件" class="headerlink" title="14.3 监听 req 的 data 事件"></a>14.3 监听 <code>req</code> 的 <code>data</code> 事件</h2><ol><li><p>在中间件中，需要监听 <code>req</code> 对象的 <code>data</code> 事件，来获取客户端发送到服务器的数据</p></li><li><p>如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 <code>data</code> 事件可能会触发多次，每一次触发 <code>data</code> 事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接</p></li><li><p>代码如下：<br>![](/images/014 - 监听 req 的 data 事件.png)</p></li></ol><h2 id="14-4-监听-req-的-end-事件"><a href="#14-4-监听-req-的-end-事件" class="headerlink" title="14.4 监听 req 的 end 事件"></a>14.4 监听 <code>req</code> 的 <code>end</code> 事件</h2><ol><li>当请求体数据接收完毕之后，会自动触发 <code>req</code> 的 <code>end</code> 事件</li><li>我们可以在 <code>req</code> 的 <code>end</code> 事件中，拿到并处理完整的请求体数据</li><li>代码如下：<br>![](/images/015 - 监听 req 的 end 事件.png)</li></ol><h2 id="14-5-用-querystring-模块解析请求体数据"><a href="#14-5-用-querystring-模块解析请求体数据" class="headerlink" title="14.5 用 querystring 模块解析请求体数据"></a>14.5 用 <code>querystring</code> 模块解析请求体数据</h2><ol><li><code>Node.js</code> 内置了一个 <code>querystring</code> 模块，专门用来处理查询字符串。通过这个模块提供的 <code>parse()</code> 函数，可以轻松把查询字符串，解析成对象的格式</li><li>代码如下<br>![](/images/016 - 使用 querystring 模块解析请求体数据.png)</li></ol><h2 id="14-6-将解析出来的数据对象挂载为-req-body"><a href="#14-6-将解析出来的数据对象挂载为-req-body" class="headerlink" title="14.6 将解析出来的数据对象挂载为 req.body"></a>14.6 将解析出来的数据对象挂载为 <code>req.body</code></h2><ol><li>**上游的中间件和下游的中间件及路由之间，共享同一份 <code>req</code> 和 <code>res</code>**，因此，我们可以将解析出来的数据，挂载为 <code>req</code> 的自定义属性，命名为 <code>req.body</code>，供下游使用</li><li>代码如下<br>![](/images/017 - 将解析出来的数据对象挂载为 req.body.png)</li></ol><h2 id="14-7-自定义中间件完整代码"><a href="#14-7-自定义中间件完整代码" class="headerlink" title="14.7 自定义中间件完整代码"></a>14.7 自定义中间件完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 导入node.js内置模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    自定义中间件，解析post请求体中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 数据是一部分一部分接收到的，接收过程有1个事件data，接收完成有1个事件end*/</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 监听data事件</span></span><br><span class="line">  req.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 监听end事件</span></span><br><span class="line">  req.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 把键值对字符串转成对象</span></span><br><span class="line">    <span class="keyword">const</span> body = qs.parse(str);</span><br><span class="line">    <span class="comment">// console.log(body);</span></span><br><span class="line">    <span class="comment">// 把解析后的对象挂载到req.body</span></span><br><span class="line">    req.body = body;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.post(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(req.body);</span></span><br><span class="line">  res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;running……&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="15-基于-Express-写接口-○"><a href="#15-基于-Express-写接口-○" class="headerlink" title="15. 基于 Express 写接口 ○"></a>15. 基于 Express 写接口 ○</h1><p>​ ==挂载路由模块化== ==服务器导入路由模块==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9F%BA%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A81.png"></p><p><strong>效果：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9F%BA%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A82.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9F%BA%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A83.png"></p><h1 id="16-cors"><a href="#16-cors" class="headerlink" title="16. cors"></a>16. cors</h1><h2 id="16-1-接口的跨域问题"><a href="#16-1-接口的跨域问题" class="headerlink" title="16.1 接口的跨域问题"></a>16.1 接口的跨域问题</h2><ol><li>到目前为止，我们编写的 <code>GET</code> 和 <code>POST</code> 接口，存在一个很严重的问题：<strong>不支持跨域请求</strong></li><li>解决接口跨域问题的方案主要有两种</li></ol><ul><li><p><strong>CORS</strong> (主流的解决方案，推荐使用)</p></li><li><p><strong>JSONP</strong> (有缺陷的解决方案：只支持 GET 请求)</p><p>跨域请求：</p></li></ul><p>​ (1) 浏览器有一个同源策略</p><p>​ 不允许向跟当前网页地址，非同源的地址发送 ajax 请求</p><p>​ (2) 如何判断是否同源</p><p>​ 协议，域名，端口号都相同才是同源地址</p><p>​ (3) 浏览器请求发出去了</p><p>​ 接口服务器也响应了</p><p>​ 浏览器拒绝处理响应的内容，并报错</p><h2 id="16-2-使用-cors-中间件解决跨域问题"><a href="#16-2-使用-cors-中间件解决跨域问题" class="headerlink" title="16.2 使用 cors 中间件解决跨域问题"></a>16.2 使用 cors 中间件解决跨域问题</h2><ol><li>cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题</li><li>使用步骤<ul><li>安装中间件： <code>npm install cors</code></li><li>导入中间件： <code> const cors = require(&#39;cors&#39;)</code></li><li>配置中间件： 在路由之前调用<code> app.use(cors())</code></li></ul></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/cors.png"></p><h2 id="16-3-cors-请求的分类"><a href="#16-3-cors-请求的分类" class="headerlink" title="16.3 cors 请求的分类"></a>16.3 cors 请求的分类</h2><ol><li><p>简单请求</p><p>同时满足以下两大条件的请求，就属于简单请求</p><ul><li><strong>请求方式</strong>：<code>GET</code>、<code>POST</code>、<code>HEAD</code> 三者之一</li><li>HTTP 头部信息不超过以下几种字段：<ul><li>无自定义头部字段</li><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width </code></li><li><code>Content-Type</code>（只有三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>）</li></ul></li></ul></li><li><p>预检请求</p><ol><li>只要符合以下任何一个条件的请求，都需要进行预检请求<ul><li>请求方式为 <code>GET</code>、<code>POST</code>、<code>HEAD</code> 之外的请求 <code>Method</code> 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 <code>application/json</code> 格式的数据</li></ul></li><li>在浏览器与服务器正式通信之前，浏览器会<strong>先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求</strong>，所以这一次的 OPTION 请求称为“预检请求”。<strong>服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</strong></li></ol></li><li><p>简单请求和预检请求的区别</p><ol><li>简单请求的特点：客户端与服务器之间<strong>只会发生一次请求</strong></li><li>预检请求的特点：客户端与服务器之间<strong>会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求</strong></li></ol></li></ol><h1 id="17-jsonp"><a href="#17-jsonp" class="headerlink" title="17. jsonp"></a>17. jsonp</h1><ol><li>概念：浏览器端通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据的方式叫做 <code>JSONP</code></li><li>特点</li></ol><ul><li><p><code>JSONP</code> 不属于真正的 <code>Ajax</code> 请求，因为它没有使用 <code>XMLHttpRequest</code> 这个对象</p></li><li><p><code>JSONP</code> 仅支持 <code>GET</code> 请求，不支持 <code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等请求</p><p>3.如果项目中已经配置了 <code>CORS</code> 跨域资源共享，为了防止冲突，必须在配置 <code>CORS</code> 中间件之前声明 <code>JSONP</code> 的接 口，否则 <code>JSONP</code> 接口会被处理成开启了 <code>CORS</code> 的接口</p></li></ul><h2 id="实现-JSONP-接口的步骤"><a href="#实现-JSONP-接口的步骤" class="headerlink" title="实现 JSONP 接口的步骤"></a>实现 <code>JSONP</code> 接口的步骤</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/jsonp1.png"></p><h2 id="使用-jQuery-发起-JSONP-请求"><a href="#使用-jQuery-发起-JSONP-请求" class="headerlink" title="使用 jQuery 发起 JSONP 请求"></a>使用 jQuery 发起 JSONP 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          method: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">          url: <span class="string">&quot;http://127.0.0.1:3000/api/jsonp&quot;</span>,</span></span><br><span class="line"><span class="javascript">          dataType: <span class="string">&quot;jsonp&quot;</span>,</span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(res);</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="18-SQL-语句-★"><a href="#18-SQL-语句-★" class="headerlink" title="18. SQL 语句 ★"></a>18. SQL 语句 ★</h1><h2 id="18-1-什么是-SQL"><a href="#18-1-什么是-SQL" class="headerlink" title="18.1 什么是 SQL"></a>18.1 什么是 SQL</h2><ol><li><code>SQL</code> 是 <strong>结构化查询语言</strong>，专门用来<strong>访问和处理数据库的编程语言</strong>。能够让我们以编程的形式，操作数据库里面的数据</li><li>三个关键点：<ul><li><code>SQL</code> 是一门<strong>数据库编程语言</strong></li><li>使用 <code>SQL</code> 语言编写出来的代码，叫做 <strong>SQL 语句</strong></li><li><code>SQL</code> 语言只能在关系型数据库中使用（例如 <code>MySQL</code>、<code>Oracle</code>、<code>SQL Server</code>）。非关系型数据库（例如 <code>Mongodb</code>）不支持 <code>SQL</code> 语言</li></ul></li></ol><h2 id="18-2-SQL-能做什么"><a href="#18-2-SQL-能做什么" class="headerlink" title="18.2 SQL 能做什么"></a>18.2 SQL 能做什么</h2><ol><li>从数据库中查询数据</li><li>向数据库中插入新的数据</li><li>更新数据库中的数据</li><li>从数据库删除数据</li><li>可以创建新数据库</li><li>可在数据库中创建新表</li><li>可在数据库中创建存储过程、视图</li></ol><h2 id="18-3-SQL-的-select-查询语句"><a href="#18-3-SQL-的-select-查询语句" class="headerlink" title="18.3 SQL 的 select 查询语句"></a>18.3 SQL 的 select 查询语句</h2><p>![](/images/009 - SELECT 语句.png)</p><ol><li><p>查询所有列写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure></li><li><p>查询多个列写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username, password <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure></li></ol><h2 id="18-4-SQL-的-insert-into-插入语句"><a href="#18-4-SQL-的-insert-into-插入语句" class="headerlink" title="18.4 SQL 的 insert into 插入语句"></a>18.4 SQL 的 insert into 插入语句</h2><ol><li><p>语法</p><p><code>INSERT INTO</code> 语句用于向数据表中插入新的数据行，语法格式如下:<br>![](/images/012 - INSERT INTO 语句.png)</p></li><li><p>案例代码</p></li></ol><ul><li>注意：新的数据需要加上引号，否则会报错</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users (username, password) <span class="keyword">values</span> (<span class="string">&#x27;mz&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="18-5-SQL-的-update-修改语句"><a href="#18-5-SQL-的-update-修改语句" class="headerlink" title="18.5 SQL 的 update 修改语句"></a>18.5 SQL 的 update 修改语句</h2><ol><li><p>语法</p><p><code>Update</code> 语句用于修改表中的数据。语法格式如下<br>![](/images/013 - SQL 的 UPDATE 语句.png)</p></li><li><p>案例代码</p><ul><li><strong>多个被更新的列之间， 使用英文的逗号进行分隔</strong></li><li><strong>where 后面跟着的是更新的条件</strong></li><li><strong>注意： 初学者经常忘记提供更新的 where 条件，这样会导致整张表的数据都被更新，一定要慎重</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update users <span class="keyword">set</span> password<span class="operator">=</span><span class="number">654321</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update users <span class="keyword">set</span> password<span class="operator">=</span><span class="number">888888</span>, status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="18-6-SQL-的-delete-删除语句"><a href="#18-6-SQL-的-delete-删除语句" class="headerlink" title="18.6 SQL 的 delete 删除语句"></a>18.6 SQL 的 delete 删除语句</h2><ol><li>语法</li></ol><ul><li>DELETE 语句用于删除表中的行<br>![](/images/014 - DELETE 语句用于删除表中的行.png)</li></ul><ol><li>案例代码</li></ol><ul><li><strong>注意： 初学者经常忘记提供更新的 where 条件，这样会导致整张表的数据都被更新，一定要慎重</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> users where id=<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="18-7-SQL-的-where-子句"><a href="#18-7-SQL-的-where-子句" class="headerlink" title="18.7 SQL 的 where 子句"></a>18.7 SQL 的 where 子句</h2><ol><li><p><code>WHERE</code> 子句用于限定选择的标准。在 <code>SELECT</code>、<code>UPDATE</code>、<code>DELETE</code> 语句中，皆可使用 <code>WHERE</code> 子句来限定选择的标准<br>![](/images/015 - WHERE 子句.png)</p></li><li><p>可在 <code>WHERE</code> 子句中使用的运算符</p></li></ol><ul><li>注意：在某些版本的 <code>SQL</code> 中，操作符 <code>&lt;&gt;</code> 可以写为 <code>!=</code><br>![](/images/016 - WHERE 子句.png)</li></ul><ol><li>可以通过 <code>WHERE</code> 子句来限定 <code>SELECT</code> 的查询条件</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 id 为 1 的所有用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 id 大于 2 的所有用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询 username 不等于 admin 的所有用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">&lt;&gt;</span><span class="string">&#x27;zs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="18-8-SQL-的-and-和-or-运算符"><a href="#18-8-SQL-的-and-和-or-运算符" class="headerlink" title="18.8 SQL 的 and 和 or 运算符"></a>18.8 SQL 的 and 和 or 运算符</h2><ol><li><code>AND</code> 和 <code>OR</code> 可在 <code>WHERE</code> 子语句中把两个或多个条件结合起来</li><li><code>AND</code> 表示必须同时满足多个条件，相当于 <code>JavaScript</code> 中的 <code>&amp;&amp;</code> 运算符，例如 <code>if (a !== 10 &amp;&amp; a !== 20)</code></li><li><code>OR</code> 表示只要满足任意一个条件即可，相当于 <code>JavaScript</code> 中的 <code>||</code> 运算符，例如 <code>if(a !== 10 || a !== 20)</code></li><li>案例代码</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- and</span></span><br><span class="line"><span class="comment">-- 使用 AND 来显示所有 status 为 0，并且 id 小于 3 的用户</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="comment">-- 使用 OR 来显示所有 status 为 1，或者 username 为 zs 的用户</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> username<span class="operator">=</span><span class="string">&#x27;zs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="18-9-SQL-的-order-by-子句"><a href="#18-9-SQL-的-order-by-子句" class="headerlink" title="18.9 SQL 的 order by 子句"></a>18.9 SQL 的 order by 子句</h2><ol><li>语法</li></ol><ul><li><code>ORDER BY</code> 语句用于根据指定的列对结果集进行排序</li><li><code>ORDER BY</code> 语句默认按照升序对记录进行排序，<code>ASC</code> 关键字代表升序排序</li><li>如果您希望按照降序对记录进行排序，可以使用 <code>DESC</code> 关键字</li></ul><ol><li><p><strong><code>ORDER BY</code> 子句 - 升序排序</strong></p><p>对 <code>users</code> 表中的数据，按照 <code>status</code> 字段进行升序排序</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 下面这两条 SQL 语句是等价的，</span></span><br><span class="line"><span class="comment">-- 因为 order by 默认进行升序排序</span></span><br><span class="line"><span class="comment">-- 其中，ASC 关键字代表升序排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- select * from users order by status</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> status <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><ol><li><p><strong><code>ORDER BY</code> 子句 – 降序排序</strong></p><p>对 users 表中的数据，按照 id 字段进行降序排序</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- desc 代表降序排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> status <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="18-10-order-by-子句-–-多重排序"><a href="#18-10-order-by-子句-–-多重排序" class="headerlink" title="18.10 order by 子句 – 多重排序"></a>18.10 order by 子句 – 多重排序</h2><ol><li>对 <code>users</code> 表中的数据，先按照 <code>status</code> 字段进行降序排序，再按照 <code>username</code> 的字母顺序，进行升序排序</li><li>案例代码</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> status <span class="keyword">desc</span>, username <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h2 id="18-11-SQL-count-函数"><a href="#18-11-SQL-count-函数" class="headerlink" title="18.11 SQL count(*) 函数"></a>18.11 SQL count(*) 函数</h2><ol><li><p><code>COUNT(*)</code> 函数用于返回查询结果的总数据条数<br><img src= "/img/loading.gif" data-lazy-src="/images/017-count.png"></p></li><li><p>案例语法</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 users 表中 status 为 0 的总数据条数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> users wheres status<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="18-12-使用-as-为列设置别名"><a href="#18-12-使用-as-为列设置别名" class="headerlink" title="18.12 使用 as 为列设置别名"></a>18.12 使用 as 为列设置别名</h2><p>如果希望给查询出来的列名称设置别名，可以使用 <code>AS</code> 关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将列名从 count(*) 修改为 total</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将列名 username 改为 uname， password 改为 upwd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">as</span> uname, password <span class="keyword">as</span> upwd <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure><h1 id="19-js-代码操作-MySQL-模块"><a href="#19-js-代码操作-MySQL-模块" class="headerlink" title="19. js 代码操作 MySQL 模块"></a>19. js 代码操作 MySQL 模块</h1><h2 id="19-1-操作步骤"><a href="#19-1-操作步骤" class="headerlink" title="19.1 操作步骤"></a>19.1 操作步骤</h2><ol><li><p>安装 mysql 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql</span><br></pre></td></tr></table></figure></li><li><p>配置 mysql 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入mysql包</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="comment">// 创建链接对象</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.createPool(&#123;</span><br><span class="line">  host: <span class="string">&quot;127.0.0.1&quot;</span>, <span class="comment">// 指定数据库所在电脑的ip</span></span><br><span class="line">  user: <span class="string">&quot;root&quot;</span>, <span class="comment">// 用户名</span></span><br><span class="line">  password: <span class="string">&quot;&quot;</span>, <span class="comment">// 密码</span></span><br><span class="line">  database: <span class="string">&quot;my_db_01&quot;</span>, <span class="comment">// 数据库名字</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>测试 mysql 模块能否正常工作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试是否连接成功</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line">db.query(sql, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 成功 err null results 结果</span></span><br><span class="line">  <span class="comment">// 失败 err 错误对象</span></span><br><span class="line">  <span class="comment">// console.log(err);</span></span><br><span class="line">  <span class="comment">// console.log(err.message);</span></span><br><span class="line">  <span class="comment">// console.log(results);</span></span><br><span class="line">  <span class="comment">// 判断是否执行成功</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(err.message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>整体效果：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/js%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><h2 id="19-2-写基本的接口"><a href="#19-2-写基本的接口" class="headerlink" title="19.2 写基本的接口"></a>19.2 写基本的接口</h2><h3 id="一、创一个服务器"><a href="#一、创一个服务器" class="headerlink" title="一、创一个服务器"></a>一、创一个服务器</h3><p>​ 1、引入 express 包</p><p>​ 2、导入 express</p><p>​ 3、创建服务器</p><p>​ 4、开启服务器</p><p>​ 5、设置全局中间件（解析 post 请求中的数据）</p><p>​ 6、导入路由模块</p><p>7、注册路由模块对象</p><p><img src= "/img/loading.gif" data-lazy-src="/images/code%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E5%9D%97.png"></p><h3 id="二、单独设置路由模块"><a href="#二、单独设置路由模块" class="headerlink" title="二、单独设置路由模块"></a>二、单独设置路由模块</h3><p>​ 1、导入 express</p><p>​ 2、创建路由对象</p><p>​ 3、导入路由处理函数对应的模块</p><p>​ 4、拦截路由</p><p>​ 5、暴露出去路由</p><p><img src= "/img/loading.gif" data-lazy-src="/images/code%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9D%97.png"></p><h3 id="三、单独模块来写路由处理函数"><a href="#三、单独模块来写路由处理函数" class="headerlink" title="三、单独模块来写路由处理函数"></a>三、单独模块来写路由处理函数</h3><p>​ 1、注册路由处理函数</p><p>​ 1-获取用户的数据是否合法</p><p>​ 2-把数据添加到数据库中</p><p>​ 判断是否添加成功</p><p>​ 2、登录的处理函数</p><p>​ 1-获取用户提交的数据</p><p>​ 2-验证数据的合法性</p><p>​ 3-验证用户是否存在</p><p>​ 4-判断用户是否存在（查询到的数组不能是空数组）</p><p>​ 5-判断密码是否正确</p><p>​ 3、获取用户列表的处理函数</p><p>​ 4、导入数据库中的数据</p><p><img src= "/img/loading.gif" data-lazy-src="/images/code%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E6%A8%A1%E5%9D%97.png"></p><h3 id="四、单独一个模块来写数据库"><a href="#四、单独一个模块来写数据库" class="headerlink" title="四、单独一个模块来写数据库"></a>四、单独一个模块来写数据库</h3><p>​ 1、创建 mysql</p><p>​ 2、导入 sql</p><p>​ 3、暴露出去 db</p><p><img src= "/img/loading.gif" data-lazy-src="/images/code%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9D%97.png"></p><h1 id="20-session"><a href="#20-session" class="headerlink" title="20. session"></a>20. session</h1><h2 id="20-1-什么是-cookie"><a href="#20-1-什么是-cookie" class="headerlink" title="20.1 什么是 cookie"></a>20.1 什么是 cookie</h2><ol><li><code>Cookie</code> 是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie <strong>有效期</strong>、<strong>安全性</strong>、<strong>使用范围</strong>的<strong>可选属性</strong>组成</li><li>不同域名下的 Cookie 各自独立，每当客户端发起请求时，会<strong>自动</strong>把<strong>当前域名下</strong>所有<strong>未过期的 Cookie</strong> 一同发送到服务器</li><li><code>Cookie</code> 的几大特性</li></ol><ul><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4KB 限制</li></ul><h2 id="20-2-安装-express-session-中间件"><a href="#20-2-安装-express-session-中间件" class="headerlink" title="20.2 安装 express-session 中间件"></a>20.2 安装 express-session 中间件</h2><ol><li><p>安装 <code>express-session</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session --save</span><br></pre></td></tr></table></figure></li><li><p>导入 <code>session</code> 中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>express-session</code> 中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">  session(&#123;</span><br><span class="line">    secret: <span class="string">&quot;小白白~_~&quot;</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h2 id="20-3-向-session-中存数据"><a href="#20-3-向-session-中存数据" class="headerlink" title="20.3 向 session 中存数据"></a>20.3 向 session 中存数据</h2><ol><li><p>当 <code>express-session</code> 中间件配置成功后，即可通过 <code>req.session</code> 来访问和使用 <code>session</code> 对象，从而存储用户的关键信息</p></li><li><p>实例：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/session.png"></p></li></ol><p>3.</p><h2 id="20-4-从-session-中取数据"><a href="#20-4-从-session-中取数据" class="headerlink" title="20.4 从 session 中取数据"></a>20.4 从 session 中取数据</h2><ol><li>可以直接从 <code>req.session</code> 对象上获取之前存储的数据</li><li>实例<img src= "/img/loading.gif" data-lazy-src="/images/session2.png"></li></ol><h2 id="20-5-清空-session"><a href="#20-5-清空-session" class="headerlink" title="20.5 清空 session"></a>20.5 清空 session</h2><ol><li>调用 <code>req.session.destroy()</code> 函数，即可清空服务器保存的 <code>session</code> 信息</li><li>实例配置 cors 跨域和解析表单数据的中间件<img src= "/img/loading.gif" data-lazy-src="/images/session3.png"></li></ol><h1 id="21-jwt"><a href="#21-jwt" class="headerlink" title="21. jwt"></a>21. jwt</h1><h2 id="21-1-JWT-的工作原理"><a href="#21-1-JWT-的工作原理" class="headerlink" title="21.1 JWT 的工作原理"></a>21.1 JWT 的工作原理</h2><ol><li>用户的信息通过 <code>Token</code> 字符串的形式，保存在客户端浏览器中</li><li>服务器通过还原 <code>Token</code> 字符串的形式来认证用户的身份<br>![](/images/012 - JWT 的工作原理.png)</li></ol><h2 id="21-2-JWT-的组成部分"><a href="#21-2-JWT-的组成部分" class="headerlink" title="21.2 JWT 的组成部分"></a>21.2 JWT 的组成部分</h2><ol><li><code>JWT</code> 通常由三部分组成，分别是 <code>Header</code>（头部）、<code>Payload</code>（有效荷载）、<code>Signature</code>（签名）</li><li>三者之间使用英文的“.”分隔</li></ol><ul><li><p><code>Payload</code> 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串</p></li><li><p><code>Header</code> 和 <code>Signature</code> 是安全性相关的部分，只是为了保证 <code>Token</code> 的安全性</p></li></ul><h2 id="21-3-JWT-安装"><a href="#21-3-JWT-安装" class="headerlink" title="21.3 JWT 安装"></a>21.3 JWT 安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><h2 id="21-4-导入-JWT"><a href="#21-4-导入-JWT" class="headerlink" title="21.4 导入 JWT"></a>21.4 导入 JWT</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/jwt1.png"></p><h2 id="21-5-定义-secret-密钥"><a href="#21-5-定义-secret-密钥" class="headerlink" title="21.5 定义 secret 密钥"></a>21.5 定义 secret 密钥</h2><p>​ 为了保证 <code>JWT</code>字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密的 <code>secret</code> 密钥</p><ul><li>当生成 <code>JWT</code> 字符串的时候，需要使用 <code>secret</code> 密钥对用户信息进行加密，最终得到加密好的 JWT 字符串</li><li>当把 <code>JWT</code> 字符串解析还原成 <code>JSON</code> 对象的时候，需要使用 <code>secret</code> 密钥进行解密</li></ul><p><img src= "/img/loading.gif" data-lazy-src="/images/jwt2.png"></p><h2 id="21-6-在登录成功后生成-JWT-字符串"><a href="#21-6-在登录成功后生成-JWT-字符串" class="headerlink" title="21.6 在登录成功后生成 JWT 字符串"></a>21.6 在登录成功后生成 JWT 字符串</h2><p>调用 <code>jsonwebtoken</code> 包提供的 <code>sign()</code> 方法，将用户的信息加密成 <code>JWT</code> 字符串，响应给客户端</p><p>示例：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/jwt3.png"></p><h2 id="21-7-将-JWT-字符串还原为-JSON-对象"><a href="#21-7-将-JWT-字符串还原为-JSON-对象" class="headerlink" title="21.7 将 JWT 字符串还原为 JSON 对象"></a>21.7 将 JWT 字符串还原为 JSON 对象</h2><ol><li><p>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 <code>Authorization</code> 字段，将 <code>Token</code> 字符串发送到服务器进行身份认证</p></li><li><p>此时，服务器可以通过 <code>express-jwt</code> 这个中间件，自动将客户端发送过来的 <code>Token</code> 解析还原成 <code>JSON</code> 对象</p></li><li><p>示例</p><p><img src= "/img/loading.gif" data-lazy-src="/images/jwt4.png"></p></li></ol><h2 id="21-8-使用-req-user-获取用户信息"><a href="#21-8-使用-req-user-获取用户信息" class="headerlink" title="21.8 使用 req.user 获取用户信息"></a>21.8 使用 req.user 获取用户信息</h2><ol><li><p>当 <code>express-jwt</code> 这个中间件配置成功之后，即可在那些有权限的接口中，使用 <code>req.user</code> 对象，来访问从 <code>JWT</code> 字符串中解析出来的用户信息了</p></li><li><p>实例</p><p><img src= "/img/loading.gif" data-lazy-src="/images/jwt5.png"></p></li></ol><h2 id="21-9-捕获解析-JWT-失败后产生的错误"><a href="#21-9-捕获解析-JWT-失败后产生的错误" class="headerlink" title="21.9 捕获解析 JWT 失败后产生的错误"></a>21.9 捕获解析 JWT 失败后产生的错误</h2><ol><li><p>当使用 <code>express-jwt</code> 解析 <code>Token</code> 字符串时，如果客户端发送过来的 <code>Token</code> 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</p></li><li><p>可以通过 <code>Express</code> 的错误中间件，捕获这个错误并进行相关的处理</p></li><li><p>示例</p><p><img src= "/img/loading.gif" data-lazy-src="/images/jwt6.png"></p></li></ol><h1 id="22-大事件项目-api-server"><a href="#22-大事件项目-api-server" class="headerlink" title="22. 大事件项目 api_server"></a>22. 大事件项目 api_server</h1><h2 id="22-1-初始化"><a href="#22-1-初始化" class="headerlink" title="22.1 初始化"></a>22.1 初始化</h2><h3 id="22-1-1-创建项目"><a href="#22-1-1-创建项目" class="headerlink" title="22.1.1 创建项目"></a>22.1.1 创建项目</h3><ol><li><p>新建 <code>api_server</code> 文件夹作为项目根目录，并在项目根目录中运行如下的命令，初始化包管理配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>运行如下的命令，安装特定版本的 <code>express</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express@4.17.1</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录中新建 <code>app.js</code> 作为整个项目的入口文件，并初始化如下的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里你想写啥就写啥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span><br><span class="line">app.listen(<span class="number">3007</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;呀，傻der来看你的服务器启动成功了吗&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="22-1-2-配置-cors-跨域"><a href="#22-1-2-配置-cors-跨域" class="headerlink" title="22.1.2 配置 cors 跨域"></a>22.1.2 配置 cors 跨域</h3><ol><li><p>运行如下的命令，安装 <code>cors</code> 中间件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cors</span><br></pre></td></tr></table></figure></li><li><p>在 <code>app.js</code> 中导入并配置 <code>cors</code> 中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 cors 中间件</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="comment">// 解决跨域请求的中间件</span></span><br><span class="line">app.use(cors());</span><br></pre></td></tr></table></figure></li></ol><h3 id="22-1-3-配置解析表单数据的中间件"><a href="#22-1-3-配置解析表单数据的中间件" class="headerlink" title="22.1.3 配置解析表单数据的中间件"></a>22.1.3 配置解析表单数据的中间件</h3><p>通过如下的代码，配置解析 <code>application/x-www-form-urlencoded</code> 格式的表单数据的中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3-解析post请求的中间件</span></span><br><span class="line">app.use(</span><br><span class="line">  express.urlencoded(&#123;</span><br><span class="line">    extended: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="22-1-4-初始化路由模块"><a href="#22-1-4-初始化路由模块" class="headerlink" title="22.1.4 初始化路由模块"></a>22.1.4 初始化路由模块</h3><blockquote><p>路由模块中，只存放客户端的请求与处理函数之间的映射关系</p></blockquote><ol><li><p>在项目根目录中，新建 <code>router</code> 文件夹，在 router 文件夹下创建<code>userRouter.js</code>文件用来存放所有的路由模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由</span></span><br><span class="line">router.post(<span class="string">&quot;/reguser&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;reguser ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录路由</span></span><br><span class="line">router.post(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;login ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露出去路由对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>app.js</code> 中，导入并使用 <code>用户路由模块</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入并注册用户路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/userRouter&quot;</span>);</span><br><span class="line">app.use(<span class="string">&quot;/api&quot;</span>, userRouter);</span><br></pre></td></tr></table></figure></li></ol><h3 id="22-1-5-抽离用户路由模块中的处理函数"><a href="#22-1-5-抽离用户路由模块中的处理函数" class="headerlink" title="22.1.5 抽离用户路由模块中的处理函数"></a>22.1.5 抽离用户路由模块中的处理函数</h3><blockquote><p>路由处理函数模块中，专门负责存放每个路由对应的处理函数</p></blockquote><ol><li><p>在项目根目录中，新建 <code>router_Handler</code> 文件夹，在 router_Handler 文件夹下创建<code>userHandler.js</code>文件用来存放所有的路由处理函数模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册用户的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.reguser = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;reguser OK&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.login = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;login OK&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>将 <code>/router/userRouter.js</code> 中的代码修改为如下结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入用户路由处理函数模块</span></span><br><span class="line"><span class="keyword">const</span> userHandler = <span class="built_in">require</span>(<span class="string">&quot;../router_Handler/userHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册新用户</span></span><br><span class="line">router.post(<span class="string">&quot;/reguser&quot;</span>, userHandler.reguser);</span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line">router.post(<span class="string">&quot;/login&quot;</span>, userHandler.login);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></li></ol><h2 id="22-2-登录注册"><a href="#22-2-登录注册" class="headerlink" title="22.2 登录注册"></a>22.2 登录注册</h2><h3 id="22-2-1-新建数据库"><a href="#22-2-1-新建数据库" class="headerlink" title="22.2.1 新建数据库"></a>22.2.1 新建数据库</h3><p>在<code>db_xbb</code> 数据库中新建 <code>ev_users</code> 表</p><h3 id="22-2-2-安装并配置-mysql-模块"><a href="#22-2-2-安装并配置-mysql-模块" class="headerlink" title="22.2.2 安装并配置 mysql 模块"></a>22.2.2 安装并配置 mysql 模块</h3><ol><li><p>安装 mysql 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录中新建个 <code>db</code> 文件夹，在<code>db</code> 文件夹下新建<code>db.js</code>文件</p><p><img src= "/img/loading.gif" data-lazy-src="/images/db.png"></p></li></ol><h3 id="22-3-注册"><a href="#22-3-注册" class="headerlink" title="22.3 注册"></a>22.3 注册</h3><h4 id="22-3-1-实现的步骤"><a href="#22-3-1-实现的步骤" class="headerlink" title="22.3.1 实现的步骤"></a>22.3.1 实现的步骤</h4><ol><li><p>检测表单数据是否合法</p></li><li><p>检测用户名是否被占用</p></li><li><p>对密码进行加密处理</p></li><li><p>插入新用户 ​</p></li></ol><h4 id="22-3-2-检测表单数据是否合法"><a href="#22-3-2-检测表单数据是否合法" class="headerlink" title="22.3.2 检测表单数据是否合法"></a>22.3.2 检测表单数据是否合法</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%B3%A8%E5%86%8C1.png"></p><h4 id="22-3-3-检测用户名是否被占用"><a href="#22-3-3-检测用户名是否被占用" class="headerlink" title="22.3.3 检测用户名是否被占用"></a>22.3.3 检测用户名是否被占用</h4><ol><li><p>在 <code>userHandler.js</code> 路由处理函数模块中导入 <code>db.js</code> 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&quot;../db/db&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>执行 sql 语句来判断</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%B3%A8%E5%86%8C2.png"></p></li></ol><h4 id="22-3-4-对密码进行加密处理"><a href="#22-3-4-对密码进行加密处理" class="headerlink" title="22.3.4 对密码进行加密处理"></a>22.3.4 对密码进行加密处理</h4><ol><li><p>安装<code>bcryptjs</code> 包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bcryptjs</span><br></pre></td></tr></table></figure></li><li><p>在 <code>userHandler.js</code> 路由处理函数模块中导入 <code>bcryptjs</code> 包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入加密对象</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&quot;bcryptjs&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在注册用户的处理函数中，确认用户名可用之后，调用 <code>bcrypt.hashSync(明文密码, 随机盐的长度)</code> 方法，对用户的密码进行加密处理</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%8A%A0%E5%AF%86.png"></p></li></ol><h4 id="22-3-5-添加新用户"><a href="#22-3-5-添加新用户" class="headerlink" title="22.3.5 添加新用户"></a>22.3.5 添加新用户</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><h3 id="22-4-优化-res-send"><a href="#22-4-优化-res-send" class="headerlink" title="22.4 优化 res.send()"></a>22.4 优化 res.send()</h3><blockquote><p>在处理函数中，需要多次调用 <code>res.send()</code> 向客户端响应 <code>处理失败</code> 的结果，为了简化代码，可以手动封装一个 res.cc() 函数</p></blockquote><p>在 <code>app.js</code> 中，所有路由之前，声明一个全局中间件，为 res 对象挂载一个 <code>res.cc()</code> 函数</p><p>![](&lt;/&lt;images/优化 res.send().png&gt;&gt;)</p><h3 id="22-5-优化表单数据验证"><a href="#22-5-优化表单数据验证" class="headerlink" title="22.5 优化表单数据验证"></a>22.5 优化表单数据验证</h3><blockquote><p>解决 if…else 语句效率低，不易维护的问题</p></blockquote><ol><li><p>安装 <code>@hapi/joi</code> 包，为表单中携带的每个数据项，定义验证规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @hapi/joi@17.1.0</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>@escook/express-joi</code> 中间件，来实现自动对表单数据进行验证的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @escook/express-joi</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>/schema/userSchema.js</code> 用户信息验证规则模块</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81.png"></p></li><li><p>修改 <code>/router/userRouter.js</code> 中的代码</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p></li><li><p>在 <code>app.js</code> 的全局错误级别中间件中，捕获验证失败的错误，并把验证失败的结果响应给客户端</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/111.png"></p><h3 id="22-6-登录"><a href="#22-6-登录" class="headerlink" title="22.6 登录"></a>22.6 登录</h3><h4 id="22-6-1-检验登录表单是否合法"><a href="#22-6-1-检验登录表单是否合法" class="headerlink" title="22.6.1 检验登录表单是否合法"></a>22.6.1 检验登录表单是否合法</h4><p>修改<code>router/userRouter.js</code> 登录路由，加上局部中间件，来进行验证</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E7%99%BB%E5%BD%95%E6%8C%82%E8%BD%BD%E8%B7%AF%E7%94%B1.png"></p><h4 id="22-6-2-安装生成-Token-字符串的包"><a href="#22-6-2-安装生成-Token-字符串的包" class="headerlink" title="22.6.2 安装生成 Token 字符串的包"></a>22.6.2 安装生成 Token 字符串的包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken</span><br></pre></td></tr></table></figure><h4 id="22-6-3-导入-jsonwebtoken-包"><a href="#22-6-3-导入-jsonwebtoken-包" class="headerlink" title="22.6.3 导入 jsonwebtoken 包"></a>22.6.3 导入 <code>jsonwebtoken</code> 包</h4><p>在路由处理函数模块 <code>router_Handler/userHandler.js</code> 中添加</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E5%8A%A0%E5%AF%86token%E5%8C%85.png"></p><h4 id="22-6-4-在根目录下创建-config-js-文件"><a href="#22-6-4-在根目录下创建-config-js-文件" class="headerlink" title="22.6.4 在根目录下创建 config.js 文件"></a>22.6.4 在根目录下创建 config.js 文件</h4><p>创建 <code>config.js</code> 文件，并向外共享 <strong>加密</strong> 和 <strong>还原</strong> Token 的 <code>jwtSecretKey</code> 字符串</p><p><img src= "/img/loading.gif" data-lazy-src="/images/config.png"></p><h4 id="22-6-5-这一步关键呦"><a href="#22-6-5-这一步关键呦" class="headerlink" title="22.6.5 这一步关键呦"></a>22.6.5 这一步关键呦</h4><ol><li>==接收客户端提交的数据==</li><li>==判断用户是否存在==</li><li>==判断密码是否正确==</li><li>==把用户信息生成 token 字符串==</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E7%99%BB%E5%BD%95%E8%B7%AF%E7%94%B1%E5%87%BD%E6%95%B0.png"></p><h4 id="22-6-6-配置解析-token-的中间件"><a href="#22-6-6-配置解析-token-的中间件" class="headerlink" title="22.6.6 配置解析 token 的中间件"></a>22.6.6 配置解析 token 的中间件</h4><h5 id="1-安装解析-token-的中间件"><a href="#1-安装解析-token-的中间件" class="headerlink" title="1. 安装解析 token 的中间件"></a>1. 安装解析 token 的中间件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-jwt</span><br></pre></td></tr></table></figure><h5 id="2-在-app-js-中注册路由之前，配置解析-Token-的中间件"><a href="#2-在-app-js-中注册路由之前，配置解析-Token-的中间件" class="headerlink" title="2. 在 app.js 中注册路由之前，配置解析 Token 的中间件"></a>2. 在 <code>app.js</code> 中注册路由之前，配置解析 Token 的中间件</h5><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%A7%A3%E6%9E%90token%E5%AD%97%E7%AC%A6%E4%B8%B2.png"></p><h5 id="3-在-app-js-中的-错误级别中间件-里面，捕获并处理-Token-认证失败后的错误"><a href="#3-在-app-js-中的-错误级别中间件-里面，捕获并处理-Token-认证失败后的错误" class="headerlink" title="3. 在 app.js 中的 错误级别中间件 里面，捕获并处理 Token 认证失败后的错误"></a>3. 在 <code>app.js</code> 中的 <code>错误级别中间件</code> 里面，捕获并处理 Token 认证失败后的错误</h5><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%A7%A3%E6%9E%90token%E9%94%99%E8%AF%AF%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p><h2 id="22-3-个人中心"><a href="#22-3-个人中心" class="headerlink" title="22.3 个人中心"></a>22.3 个人中心</h2><p>1-==创建 <code>router/userinfoHandler.js</code> 路由模块文件==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">// 导入路由处理函数</span></span><br><span class="line"><span class="keyword">const</span> userinfoHandler = <span class="built_in">require</span>(<span class="string">&quot;../routerHandler/userinfoHandler&quot;</span>);</span><br><span class="line"><span class="comment">// 拦截路由</span></span><br><span class="line">router.get(<span class="string">&quot;/userinfo&quot;</span>, userinfoHandler.getUserinfo);</span><br><span class="line"><span class="comment">// 暴露出去</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>2-==创建 <code>route_Handler/userinfoHandler.js</code> 路由处理函数模块文件==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户基本信息的处理函数</span></span><br><span class="line"><span class="built_in">exports</span>.getUserInfo = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3-==在 <code>app.js</code> 中导入路由模块==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* --------导入路由模块对象并注册-------------- */</span></span><br><span class="line"><span class="keyword">const</span> userinfoRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/userinfoRouter&quot;</span>);</span><br><span class="line">app.use(<span class="string">&quot;/my&quot;</span>, userinfoRouter);</span><br></pre></td></tr></table></figure><h3 id="22-3-1-获取用户信息"><a href="#22-3-1-获取用户信息" class="headerlink" title="22.3.1 获取用户信息"></a>22.3.1 获取用户信息</h3><ol><li>在<code>route_Handler/userinfoHandler.js</code>导入数据库</li><li>用户登录成功后会解析 token ，req 中会多一个 user 属性</li><li>定义 sql 语句并执行，判断 sql 语句是否执行成功</li><li>判断用户信息是否存在</li><li>拿到用户信息</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png"><img src= "/img/loading.gif" data-lazy-src="/images/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png"></p><h3 id="22-3-2-更新用户信息"><a href="#22-3-2-更新用户信息" class="headerlink" title="22.3.2 更新用户信息"></a>22.3.2 更新用户信息</h3><h4 id="1-定义更新路由和路由处理函数模块"><a href="#1-定义更新路由和路由处理函数模块" class="headerlink" title="1-定义更新路由和路由处理函数模块"></a>1-定义更新路由和路由处理函数模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新用户信息的路由</span></span><br><span class="line">router.post(<span class="string">&quot;/userinfo&quot;</span>, userinfo_handler.updateUserInfo);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新用户基本信息的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.updateUserInfo = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-验证表单数据"><a href="#2-验证表单数据" class="headerlink" title="2- 验证表单数据"></a>2- 验证表单数据</h4><ol><li><p>在<code>schema/userSchema.js</code> ==定义 id、nickname、email 验证规则==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%991.png"></p></li><li><p>==将验证规则暴露出去==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%992.png"></p></li><li><p>在 <code>router/userinfoRouter.js</code> ==导入验证数据合法性的中间件和验证规则对象==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p></li><li><p>修改<code>router/userinfoRouter.js</code> 中的更新用户信息的路由，==写入局部中间件==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E8%B7%AF%E7%94%B1.png"></p></li></ol><h4 id="3-实现的基本功能"><a href="#3-实现的基本功能" class="headerlink" title="3- 实现的基本功能"></a>3- 实现的基本功能</h4><ol><li>接收客户端发送的数据</li><li>定义并执行 sql 语句</li><li>判断用户信息是否修改成功</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h3 id="22-3-3-重置密码"><a href="#22-3-3-重置密码" class="headerlink" title="22.3.3 重置密码"></a>22.3.3 重置密码</h3><h4 id="1-定义重置密码的路由和路由处理函数模块"><a href="#1-定义重置密码的路由和路由处理函数模块" class="headerlink" title="1- 定义重置密码的路由和路由处理函数模块"></a>1- 定义重置密码的路由和路由处理函数模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重置密码的路由</span></span><br><span class="line">router.post(<span class="string">&quot;/updatepwd&quot;</span>, userinfo_handler.updatePassword);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重置密码的路由处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.updatePwd = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-验证表单数据-1"><a href="#2-验证表单数据-1" class="headerlink" title="2- 验证表单数据"></a>2- 验证表单数据</h4><blockquote><p>旧密码与新密码，必须符合密码的验证规则，并且新密码不能与旧密码一致！</p></blockquote><ol><li><p>在 <code>/schema/userSchema.js</code> 模块中==定义重置密码的验证规则==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99.png"></p></li><li><p>将 <code>/schema/userSchema.js</code> 模块中的==验证规则对象暴露出去==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99%E5%AF%B9%E8%B1%A1.png"></p></li><li><p>在 <code>router/userinfoRouter.js</code> ==导入验证数据合法性的中间件和验证规则对象==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p></li><li><p>修改<code>router/userinfoRouter.js</code> 中的重置密码的路由，==写入局部中间件==</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E7%9A%84%E8%B7%AF%E7%94%B1.png"></p><h4 id="3-实现重置密码的功能"><a href="#3-实现重置密码的功能" class="headerlink" title="3- 实现重置密码的功能"></a>3- 实现重置密码的功能</h4><ol><li>接收客户端发送的数据</li><li>根据 id 查询当前用户是否存在</li><li>导入加密密码的包</li><li>验证旧密码是否一致</li><li>对新密码进行加密处理并修改</li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E7%9A%84%E5%AF%BC%E5%85%A5%E5%8A%A0%E5%AF%86%E5%8C%85.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h3 id="22-3-4-更新用户头像"><a href="#22-3-4-更新用户头像" class="headerlink" title="22.3.4 更新用户头像"></a>22.3.4 更新用户头像</h3><h4 id="1-定义更新头像路由和路由处理函数模块"><a href="#1-定义更新头像路由和路由处理函数模块" class="headerlink" title="1-定义更新头像路由和路由处理函数模块"></a>1-定义更新头像路由和路由处理函数模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新用户信息的路由</span></span><br><span class="line">router.post(<span class="string">&quot;/update/avatar&quot;</span>, userinfo_handler.updateAvatar);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新用户基本信息的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.updateAvatar = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-验证表单数据-2"><a href="#2-验证表单数据-2" class="headerlink" title="2- 验证表单数据"></a>2- 验证表单数据</h4><ol><li><p>在<code>schema/userSchema.js</code> ==定义头像验证规则==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E5%A4%B4%E5%83%8F%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99.png"></p></li><li><p>==将验证规则暴露出去==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E5%A4%B4%E5%83%8F%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99%E5%AF%B9%E8%B1%A1.png"></p></li><li><p>在 <code>router/userinfoRouter.js</code> ==导入验证数据合法性的中间件和验证规则对象==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E5%A4%B4%E5%83%8F%E7%9A%84%E9%AA%8C%E8%AF%81%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p></li><li><p>修改<code>router/userinfoRouter.js</code> 中的更新用户信息的路由，==写入局部中间件==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E5%A4%B4%E5%83%8F%E7%9A%84%E8%B7%AF%E7%94%B1.png"></p></li></ol><h4 id="3-实现的基本功能-1"><a href="#3-实现的基本功能-1" class="headerlink" title="3- 实现的基本功能"></a>3- 实现的基本功能</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0%E5%A4%B4%E5%83%8F%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h2 id="22-4-文章分类管理"><a href="#22-4-文章分类管理" class="headerlink" title="22.4 文章分类管理"></a>22.4 文章分类管理</h2><h3 id="22-4-1-新建-ev-article-cate-表"><a href="#22-4-1-新建-ev-article-cate-表" class="headerlink" title="22.4.1 新建 ev_article_cate 表"></a>22.4.1 新建 ev_article_cate 表</h3><h3 id="22-4-2-获取文章分类列表"><a href="#22-4-2-获取文章分类列表" class="headerlink" title="22.4.2 获取文章分类列表"></a>22.4.2 获取文章分类列表</h3><h4 id="1-初始化新建-router-articleRouter-js路由模块"><a href="#1-初始化新建-router-articleRouter-js路由模块" class="headerlink" title="1- 初始化新建 router/articleRouter.js路由模块"></a>1- 初始化新建 <code>router/articleRouter.js</code>路由模块</h4><p>​ 新创建个 <code>router/articleRouter.js</code> 路由模块</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%8E%B7%E5%8F%96%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8.png"></p><h4 id="2-初始化新建router-Handler-artcateHandler-js-路由处理函数模块"><a href="#2-初始化新建router-Handler-artcateHandler-js-路由处理函数模块" class="headerlink" title="2- 初始化新建router_Handler/artcateHandler.js 路由处理函数模块"></a>2- 初始化新建<code>router_Handler/artcateHandler.js</code> 路由处理函数模块</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%8E%B7%E5%8F%96%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h4 id="3-在-app-js-中导入路由模块"><a href="#3-在-app-js-中导入路由模块" class="headerlink" title="3- 在 app.js 中导入路由模块"></a>3- 在 <code>app.js</code> 中导入路由模块</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9D%97.png"></p><h4 id="4-获取文章列表操作"><a href="#4-获取文章列表操作" class="headerlink" title="4- 获取文章列表操作"></a>4- 获取文章列表操作</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%8E%B7%E5%8F%96%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h3 id="22-4-3-新增文章分类"><a href="#22-4-3-新增文章分类" class="headerlink" title="22.4.3 新增文章分类"></a>22.4.3 新增文章分类</h3><h4 id="1-在-router-artcateRouter-js-中写入新增文章分类的路由"><a href="#1-在-router-artcateRouter-js-中写入新增文章分类的路由" class="headerlink" title="1- 在 router/artcateRouter.js 中写入新增文章分类的路由"></a>1- 在 <code>router/artcateRouter.js</code> 中写入新增文章分类的路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增文章分类的路由</span></span><br><span class="line">router.post(<span class="string">&quot;/article/addcates&quot;</span>, artcate_handler.addCate);</span><br></pre></td></tr></table></figure><h4 id="2-在-route-Handler-artcateHandler-js-中写入新增文章分类的路由处理函数"><a href="#2-在-route-Handler-artcateHandler-js-中写入新增文章分类的路由处理函数" class="headerlink" title="2- 在 route_Handler/artcateHandler.js 中写入新增文章分类的路由处理函数"></a>2- 在 <code>route_Handler/artcateHandler.js</code> 中写入新增文章分类的路由处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增文章分类的处理函数</span></span><br><span class="line"><span class="built_in">exports</span>.addCate = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-验证表单数据"><a href="#3-验证表单数据" class="headerlink" title="3- 验证表单数据"></a>3- 验证表单数据</h4><ol><li><p>==创建 <code>/schema/artcateSchema.js</code> 文章分类数据验证模块并暴露出去==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB%E7%9A%84%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99.png"></p></li><li><p>在 <code>router/artcateRouter.js</code> ==导入验证数据的中间件==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E9%AA%8C%E8%AF%81%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p></li><li><p>在<code>router/artcateRouter.js</code> 中修改路由模块,==添加局部中间件==</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB%E7%9A%84%E5%B1%80%E9%83%A8%E4%B8%AD%E9%97%B4%E4%BB%B6png.png"></p><h4 id="3-实现新增分类的功能"><a href="#3-实现新增分类的功能" class="headerlink" title="3- 实现新增分类的功能"></a>3- 实现新增分类的功能</h4><p>完善 <code>route_Handler/artcateHandler.js</code> 中的新增文章分类的处理函数</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%96%B0%E5%A2%9E%E5%88%86%E7%B1%BB%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h3 id="22-4-4-根据文章-Id-删除文章分类"><a href="#22-4-4-根据文章-Id-删除文章分类" class="headerlink" title="22.4.4 根据文章 Id 删除文章分类"></a>22.4.4 根据文章 Id 删除文章分类</h3><h4 id="1-在-router-artcateRouter-js-中写入删除文章分类的路由"><a href="#1-在-router-artcateRouter-js-中写入删除文章分类的路由" class="headerlink" title="1- 在 router/artcateRouter.js 中写入删除文章分类的路由"></a>1- 在 <code>router/artcateRouter.js</code> 中写入删除文章分类的路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类的路由</span></span><br><span class="line">router.get(<span class="string">&quot;/article/deletecate/:id&quot;</span>, artcateHandler.delCateById);</span><br></pre></td></tr></table></figure><h4 id="2-在-route-Handler-artcateHandler-js-中写入新增文章分类的路由处理函数-1"><a href="#2-在-route-Handler-artcateHandler-js-中写入新增文章分类的路由处理函数-1" class="headerlink" title="2- 在 route_Handler/artcateHandler.js 中写入新增文章分类的路由处理函数"></a>2- 在 <code>route_Handler/artcateHandler.js</code> 中写入新增文章分类的路由处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.delCateById = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-验证表单数据-1"><a href="#3-验证表单数据-1" class="headerlink" title="3- 验证表单数据"></a>3- 验证表单数据</h4><ol><li><p>在 <code>schema/artcateSchema.js</code> ==定义分类 id 的校验规则==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%A0%E9%99%A4%E7%9A%84%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99.png"></p></li><li><p>将校验后的==规则对象==暴露出去</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%A0%E9%99%A4%E7%9A%84%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99%E5%AF%B9%E8%B1%A1.png"></p></li><li><p>在 <code>router/artcateRouter.js</code> 中==导入校验规则对象==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E5%88%A0%E9%99%A4%E7%9A%84%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99%E5%AF%B9%E8%B1%A1.png"></p></li><li><p>修改 <code>router/artcateRouter.js</code> 中删除文章分类的路由，==添加个局部中间件==</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E5%88%A0%E9%99%A4%E7%9A%84%E5%B1%80%E9%83%A8%E4%B8%AD%E9%97%B4%E4%BB%B6.png"></p><h4 id="4-实现删除分类的功能"><a href="#4-实现删除分类的功能" class="headerlink" title="4- 实现删除分类的功能"></a>4- 实现删除分类的功能</h4><p>完善 <code>route_Handler/artcateHandler.js</code> 中的删除文章分类的处理函数</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%88%A0%E9%99%A4%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h3 id="22-4-5-根据-Id-获取文章分类数据"><a href="#22-4-5-根据-Id-获取文章分类数据" class="headerlink" title="22.4.5 根据 Id 获取文章分类数据"></a>22.4.5 根据 Id 获取文章分类数据</h3><h4 id="1-在-router-artcateRouter-js-中写入获取文章分类的路由"><a href="#1-在-router-artcateRouter-js-中写入获取文章分类的路由" class="headerlink" title="1- 在 router/artcateRouter.js 中写入获取文章分类的路由"></a>1- 在 <code>router/artcateRouter.js</code> 中写入获取文章分类的路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类的路由</span></span><br><span class="line">router.get(<span class="string">&quot;/article/cates/:id&quot;</span>, artcateHandler.getCateById);</span><br></pre></td></tr></table></figure><h4 id="2-在-route-Handler-artcateHandler-js-中写入获取文章分类的路由处理函数"><a href="#2-在-route-Handler-artcateHandler-js-中写入获取文章分类的路由处理函数" class="headerlink" title="2- 在 route_Handler/artcateHandler.js 中写入获取文章分类的路由处理函数"></a>2- 在 <code>route_Handler/artcateHandler.js</code> 中写入获取文章分类的路由处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.getCateById = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-验证表单数据-2"><a href="#3-验证表单数据-2" class="headerlink" title="3- 验证表单数据"></a>3- 验证表单数据</h4><ol><li><p>将校验后的==规则对象==暴露出去</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%A0%A1%E9%AA%8C%E5%AF%B9%E8%B1%A11.png"></p></li><li><p>在 <code>router/artcateRouter.js</code> 中==导入校验规则对象==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E6%A0%A1%E9%AA%8C%E5%AF%B9%E8%B1%A11.png"></p></li><li><p>修改 <code>router/artcateRouter.js</code> 中获取文章分类的路由，==添加个局部中间件==</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%8E%B7%E5%8F%96%E5%88%86%E7%B1%BB%E8%B7%AF%E7%94%B1.png"></p><h4 id="4-实现分类的功能"><a href="#4-实现分类的功能" class="headerlink" title="4- 实现分类的功能"></a>4- 实现分类的功能</h4><p>完善 <code>route_Handler/artcateHandler.js</code> 中的删除文章分类的处理函数</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E8%8E%B7%E5%8F%96%E5%88%86%E7%B1%BB%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h3 id="22-4-6-根据-Id-更新文章分类数据"><a href="#22-4-6-根据-Id-更新文章分类数据" class="headerlink" title="22.4.6 根据 Id 更新文章分类数据"></a>22.4.6 根据 Id 更新文章分类数据</h3><h4 id="1-在-router-artcateRouter-js-中写入更新文章分类的路由"><a href="#1-在-router-artcateRouter-js-中写入更新文章分类的路由" class="headerlink" title="1- 在 router/artcateRouter.js 中写入更新文章分类的路由"></a>1- 在 <code>router/artcateRouter.js</code> 中写入更新文章分类的路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类的路由</span></span><br><span class="line">router.get(<span class="string">&quot;/article/updatecate&quot;</span>, artcateHandler.updateCate);</span><br></pre></td></tr></table></figure><h4 id="2-在-route-Handler-artcateHandler-js-中写入更新文章分类的路由处理函数"><a href="#2-在-route-Handler-artcateHandler-js-中写入更新文章分类的路由处理函数" class="headerlink" title="2- 在 route_Handler/artcateHandler.js 中写入更新文章分类的路由处理函数"></a>2- 在 <code>route_Handler/artcateHandler.js</code> 中写入更新文章分类的路由处理函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类的处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.updateCate = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-验证表单数据-3"><a href="#3-验证表单数据-3" class="headerlink" title="3- 验证表单数据"></a>3- 验证表单数据</h4><ol><li><p>将校验后的==规则对象==暴露出去</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%A0%A1%E9%AA%8C%E5%AF%B9%E8%B1%A12.png"></p></li><li><p>在 <code>router/artcateRouter.js</code> 中==导入校验规则对象==</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%AF%BC%E5%85%A5%E6%A0%A1%E9%AA%8C%E5%AF%B9%E8%B1%A12.png"></p></li><li><p>修改 <code>router/artcateRouter.js</code> 中更新文章分类的路由，==添加个局部中间件==</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B01.png"></p><h4 id="4-实现分类的功能-1"><a href="#4-实现分类的功能-1" class="headerlink" title="4- 实现分类的功能"></a>4- 实现分类的功能</h4><p>完善 <code>route_Handler/artcateHandler.js</code> 中的更新文章分类的处理函数</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E6%9B%B4%E6%96%B0.png"></p><h2 id="22-5-发布新文章"><a href="#22-5-发布新文章" class="headerlink" title="22.5 发布新文章"></a>22.5 发布新文章</h2><h3 id="22-5-1-新建ev-articles表"><a href="#22-5-1-新建ev-articles表" class="headerlink" title="22.5.1 新建ev_articles表"></a>22.5.1 新建<code>ev_articles</code>表</h3><h3 id="22-5-2-初始化路由模块"><a href="#22-5-2-初始化路由模块" class="headerlink" title="22.5.2 初始化路由模块"></a>22.5.2 初始化路由模块</h3><h4 id="1-新建-router-articleRoute-js-发布文章的路由模块"><a href="#1-新建-router-articleRoute-js-发布文章的路由模块" class="headerlink" title="1- 新建 router/articleRoute.js 发布文章的路由模块"></a>1- 新建 <code>router/articleRoute.js</code> 发布文章的路由模块</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%8F%91%E5%B8%83%E6%96%B0%E6%96%87%E7%AB%A0%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9D%97.png"></p><h4 id="2-新建-router-Handler-articleHandler-js-发布文章的路由处理函数"><a href="#2-新建-router-Handler-articleHandler-js-发布文章的路由处理函数" class="headerlink" title="2- 新建 router_Handler/articleHandler.js 发布文章的路由处理函数"></a>2- 新建 <code>router_Handler/articleHandler.js</code> 发布文章的路由处理函数</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%8F%91%E5%B8%83%E6%96%B0%E6%96%87%E7%AB%A0%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><h4 id="3-在-app-js-导入路由处理对象并注册"><a href="#3-在-app-js-导入路由处理对象并注册" class="headerlink" title="3- 在 app.js 导入路由处理对象并注册"></a>3- 在 <code>app.js</code> 导入路由处理对象并注册</h4><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%8F%91%E5%B8%83%E6%96%B0%E6%96%87%E7%AB%A0.png"></p><h3 id="22-5-3-使用-multer-解析表单数据"><a href="#22-5-3-使用-multer-解析表单数据" class="headerlink" title="22.5.3 使用 multer 解析表单数据"></a>22.5.3 使用 multer 解析表单数据</h3><h4 id="1-安装-multer-导入解析-formdata-数据的包"><a href="#1-安装-multer-导入解析-formdata-数据的包" class="headerlink" title="1- 安装 multer 导入解析 formdata 数据的包"></a>1- 安装 <code>multer</code> 导入解析 formdata 数据的包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入解析formdata数据的包(把携带的二进制文件保存到指定目录)</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="comment">// 创建multer实例(指定文件保存到哪里)</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> uploads = multer(&#123;</span><br><span class="line">  dest: path.join(__dirname, <span class="string">&quot;../uploads&quot;</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-修改发布文章的路由"><a href="#2-修改发布文章的路由" class="headerlink" title="2- 修改发布文章的路由"></a>2- 修改发布文章的路由</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布新文章的路由</span></span><br><span class="line"><span class="comment">// upload.single() 是一个局部生效的中间件，用来解析 FormData 格式的表单数据</span></span><br><span class="line"><span class="comment">// 将文件类型的数据，解析并挂载到 req.file 属性中</span></span><br><span class="line"><span class="comment">// 将文本类型的数据，解析并挂载到 req.body 属性中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布文章的路由(增加局部中间件，解析formdata数据并且把携带的图片文件在佛那个保存起来)</span></span><br><span class="line">router.post(</span><br><span class="line">  <span class="string">&quot;/article/add&quot;</span>,</span><br><span class="line">  uploads.single(<span class="string">&quot;cover_img&quot;</span>),</span><br><span class="line">  articleHandler.add_article</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="22-5-4-验证表单数据"><a href="#22-5-4-验证表单数据" class="headerlink" title="22.5.4 验证表单数据"></a>22.5.4 验证表单数据</h3><h4 id="1-创建-schema-articleSchema-js-验证规则模块，并初始化如下的代码结构"><a href="#1-创建-schema-articleSchema-js-验证规则模块，并初始化如下的代码结构" class="headerlink" title="1-创建 /schema/articleSchema.js 验证规则模块，并初始化如下的代码结构"></a>1-创建 <code>/schema/articleSchema.js</code> 验证规则模块，并初始化如下的代码结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入定义验证规则的模块</span></span><br><span class="line"><span class="keyword">const</span> Joi = <span class="built_in">require</span>(<span class="string">&quot;@hapi/joi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 标题、分类Id、内容、发布状态 的验证规则</span></span><br><span class="line"><span class="keyword">const</span> title = Joi.string().required();</span><br><span class="line"><span class="keyword">const</span> cate_id = Joi.number().integer().min(<span class="number">1</span>).required();</span><br><span class="line"><span class="keyword">const</span> content = Joi.string().required().allow(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> state = Joi.string().valid(<span class="string">&quot;已发布&quot;</span>, <span class="string">&quot;草稿&quot;</span>).required();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证规则对象 - 发布文章</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add_article_schema: &#123;</span><br><span class="line">    body: &#123;</span><br><span class="line">      title,</span><br><span class="line">      cate_id,</span><br><span class="line">      content,</span><br><span class="line">      state,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-在-router-articleRouter-js-模块中，导入需要的验证规则对象，并在路由中使用"><a href="#2-在-router-articleRouter-js-模块中，导入需要的验证规则对象，并在路由中使用" class="headerlink" title="2- 在 /router/articleRouter.js 模块中，导入需要的验证规则对象，并在路由中使用"></a>2- 在 <code>/router/articleRouter.js</code> 模块中，导入需要的验证规则对象，并在路由中使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入验证数据的中间件</span></span><br><span class="line"><span class="keyword">const</span> expressJoi = <span class="built_in">require</span>(<span class="string">&quot;@escook/express-joi&quot;</span>);</span><br><span class="line"><span class="comment">// 导入文章的验证模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; add_article_schema &#125; = <span class="built_in">require</span>(<span class="string">&quot;../schema/articleSchema&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布新文章的路由</span></span><br><span class="line"><span class="comment">// upload.single() 是一个局部生效的中间件，用来解析 FormData 格式的表单数据</span></span><br><span class="line"><span class="comment">// 将文件类型的数据，解析并挂载到 req.file 属性中</span></span><br><span class="line"><span class="comment">// 将文本类型的数据，解析并挂载到 req.body 属性中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布文章的路由(增加局部中间件，解析formdata数据并且把携带的图片文件在佛那个保存起来)</span></span><br><span class="line">router.post(</span><br><span class="line">  <span class="string">&quot;/article/add&quot;</span>,</span><br><span class="line">  uploads.single(<span class="string">&quot;cover_img&quot;</span>),</span><br><span class="line">  expressJoi(add_article_schema),</span><br><span class="line">  articleHandler.add_article</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="3-在-router-handler-articleHandler-js-模块中的路由处理函数中，通过-if-判断客户端是否提交了-封面图片"><a href="#3-在-router-handler-articleHandler-js-模块中的路由处理函数中，通过-if-判断客户端是否提交了-封面图片" class="headerlink" title="3- 在 /router_handler/articleHandler.js 模块中的路由处理函数中，通过 if 判断客户端是否提交了 封面图片"></a>3- 在 <code>/router_handler/articleHandler.js</code> 模块中的路由处理函数中，通过 <code>if</code> 判断客户端是否提交了 <code>封面图片</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动判断是否上传了文章封面</span></span><br><span class="line"><span class="keyword">if</span> (!req.file || req.file.fieldname !== <span class="string">&quot;cover_img&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.cc(<span class="string">&quot;文章封面是必选参数！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-5-5-实现发布文章的功能"><a href="#22-5-5-实现发布文章的功能" class="headerlink" title="22.5.5 实现发布文章的功能"></a>22.5.5 实现发布文章的功能</h3><ol><li><p>具体代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&quot;../db/index&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; decodeBase64 &#125; = <span class="built_in">require</span>(<span class="string">&quot;bcryptjs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 发布文章的路由处理函数</span></span><br><span class="line"><span class="built_in">module</span>.exports.add_article = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.file);</span><br><span class="line">  <span class="comment">// 手动判断是否上传了文章封面</span></span><br><span class="line">  <span class="keyword">if</span> (!req.file || req.file.fieldname !== <span class="string">&quot;cover_img&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.cc(<span class="string">&quot;文章封面是必选参数！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加数据</span></span><br><span class="line">  <span class="comment">// 准备文章数据对象</span></span><br><span class="line">  <span class="keyword">const</span> articleInfo = &#123;</span><br><span class="line">    ...req.body, <span class="comment">//&#123; title: &#x27;三生三世十里桃花&#x27;, cate_id: 3, content: &#x27;棉花&#x27;, state: &#x27;已发布&#x27; &#125;</span></span><br><span class="line">    cover_img: path.join(<span class="string">&quot;/uploads&quot;</span>, req.file.filename),</span><br><span class="line">    pub_date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    author_id: req.user.id,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> sql = <span class="string">&quot;insert into ev_articles set ?&quot;</span>;</span><br><span class="line">  db.query(sql, articleInfo, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.cc(err);</span><br><span class="line">    <span class="keyword">if</span> (results.affectedRows !== <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.cc(<span class="string">&quot;发布文章失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.cc(<span class="string">&quot;发布文章成功&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(articleInfo);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>app.js</code> 中，使用 <code>express.static()</code> 中间件，将 <code>uploads</code> 目录中的图片托管为静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 托管静态资源的中间件</span></span><br><span class="line">app.use(<span class="string">&quot;/uploads&quot;</span>, express.static(<span class="string">&quot;uploads&quot;</span>));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="2021/05/05/JavaScript/"/>
      <url>2021/05/05/JavaScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><h2 id="1-JS"><a href="#1-JS" class="headerlink" title="1.JS"></a>1.JS</h2><h3 id="1-1-JS-的组成"><a href="#1-1-JS-的组成" class="headerlink" title="1.1 JS 的组成"></a>1.1 JS 的组成</h3><ol><li>ECMAScript ： JavaScript 语法</li><li>DOM ：页面文档对象模型</li><li>BOM ：浏览器对象模型</li></ol><h3 id="1-2-JS-的三种书写方式"><a href="#1-2-JS-的三种书写方式" class="headerlink" title="1.2 JS 的三种书写方式"></a>1.2 JS 的三种书写方式</h3><ol><li><p>行内式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;&quot;</span> onclick=<span class="string">&quot;alert(&#x27;sb&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>内嵌式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;sb&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;my.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-JS-的注释"><a href="#1-3-JS-的注释" class="headerlink" title="1.3 JS 的注释"></a>1.3 JS 的注释</h3><ol><li><p>单行注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来注释单行文字（  快捷键   ctrl  +  /   ）</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  获取用户年龄和姓名</span></span><br><span class="line"><span class="comment">  并通过提示框显示出来</span></span><br><span class="line"><span class="comment">*/</span>                 （  快捷键   ctrl  + Shift +  /   ）</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-4-JS-输入输出语句"><a href="#1-4-JS-输入输出语句" class="headerlink" title="1.4 JS 输入输出语句"></a>1.4 JS 输入输出语句</h3><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>变量是用于存放数据的容器。</p><h3 id="2-2-变量的使用"><a href="#2-2-变量的使用" class="headerlink" title="2.2 变量的使用"></a>2.2 变量的使用</h3><ul><li><p>声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age; <span class="comment">//  声明一个 名称为 age 的变量</span></span><br></pre></td></tr></table></figure><p>(1) var 是 JS 关键字</p><p>(2) age 是程序员自定义的变量名</p></li><li><p>赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>; <span class="comment">//  给 age 这个变量赋值为 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-变量的初始化"><a href="#2-3-变量的初始化" class="headerlink" title="2.3 变量的初始化"></a>2.3 变量的初始化</h3><p>声明一个变量并赋值， 我们称之为变量的初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = 具体数值;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>; <span class="comment">// 声明变量同时赋值为 18</span></span><br></pre></td></tr></table></figure><h3 id="2-4-变量语法扩展"><a href="#2-4-变量语法扩展" class="headerlink" title="2.4 变量语法扩展"></a>2.4 变量语法扩展</h3><ul><li><p>更新变量</p><p>​ 给变量重新赋值，覆盖之前的数据。注意：不需要 var</p><p>​ 变量名 = 新值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">age = <span class="number">81</span>; <span class="comment">//最后的结果是 81</span></span><br></pre></td></tr></table></figure></li><li><p>同时声明多个变量</p><p>​ var 变量名 1，变量名 2，变量名 3，…;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>,</span><br><span class="line">  name = <span class="string">&quot;sb&quot;</span>,</span><br><span class="line">  sex = <span class="string">&quot;男&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>声明变量 3 种特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)；</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age = 10; console.log (age);</td><td>不声明 只赋值</td><td>10</td></tr></tbody></table></li></ul><h3 id="2-5-变量命名规范"><a href="#2-5-变量命名规范" class="headerlink" title="2.5 变量命名规范"></a>2.5 变量命名规范</h3><ul><li>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</li><li>严格区分大小写。var app; 和 var App; 是两个变量</li><li>不能 以数字开头。 18age 是错误的</li><li>不能 是关键字、保留字。例如：var、for、while</li><li>变量名必须有意义。 MMD BBD nl → age</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写</li></ul><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><h3 id="3-1-数据类型分类"><a href="#3-1-数据类型分类" class="headerlink" title="3.1 数据类型分类"></a>3.1 数据类型分类</h3><ul><li>简单数据类型 （Number,String,Boolean,Undefined,Null）</li><li>复杂数据类型 （object)</li></ul><h3 id="3-2-简单数据类型"><a href="#3-2-简单数据类型" class="headerlink" title="3.2 简单数据类型"></a>3.2 简单数据类型</h3><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如 21、0.21</td><td>0</td></tr><tr><td>Boolean</td><td>布尔值类型，如 true、false，等价于 1 和 0</td><td>false</td></tr><tr><td>String</td><td>字符串类型，如 ‘张三’ “张三” ，字符串都带引号</td><td>“” ‘’</td></tr><tr><td>Undefined</td><td>var a; 声明了变量 a 但是没有给值，此时 a = undefined</td><td>undefined</td></tr><tr><td>Null</td><td>var a = null; 声明变量 a 为空值</td><td>null</td></tr></tbody></table><h4 id="Number-数字型"><a href="#Number-数字型" class="headerlink" title="Number 数字型"></a>Number 数字型</h4><ol><li><p>整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li><li><p>进制</p><p>​ 最常见的进制有二进制、八进制、十进制（默认）、十六进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">07</span>; <span class="comment">// 对应十进制的7</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">019</span>; <span class="comment">// 对应十进制的19</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">08</span>; <span class="comment">// 对应十进制的8</span></span><br><span class="line"><span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xa</span>;</span><br></pre></td></tr></table></figure></li><li><p>范围</p><p>JavaScript 中数值的最大和最小值</p><ul><li>最大值：Number.MAX_VALUE</li><li>最小值：Number.MIN_VALUE</li></ul></li><li><p>三个特殊值</p><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul></li><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOk = <span class="built_in">isNaN</span>(userAge);</span><br><span class="line"><span class="built_in">console</span>.log(isOk); <span class="comment">// false ，21 不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrName = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(userName)); <span class="comment">// true ，&quot;andy&quot;是一个非数字</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="String-字符串型"><a href="#String-字符串型" class="headerlink" title="String 字符串型"></a>String 字符串型</h4><ol><li><p>语法</p><p>​ 双引号 “” 和 单引号’’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="string">&quot;傻逼&quot;</span>；</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">&#x27;傻逼&#x27;</span>； （推荐）</span><br></pre></td></tr></table></figure></li><li><p>嵌套</p><p>​ 外双内单，外单内双</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a&#x27;b&#x27;c&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&quot;b&quot;c&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>转义字符</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n 是 newline 的意思</td></tr><tr><td>\ \</td><td>斜杠 \</td></tr><tr><td>&#39;</td><td>‘ 单引号</td></tr><tr><td>&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab 缩进</td></tr><tr><td>\b</td><td>空格 ，b 是 blank 的意思</td></tr></tbody></table></li><li><p>长度</p><p>语法：字符串.length</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.length); <span class="comment">//结果为 3</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;&quot;</span>; <span class="comment">//0个字符，空字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.length); <span class="comment">//结果为 0</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot; &quot;</span>; <span class="comment">// 空格算一个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.length); <span class="comment">//结果为 1</span></span><br></pre></td></tr></table></figure></li><li><p>拼接</p><p>口诀：数值相加，字符相连</p><p>​ 谁和字符串拼接，结果都是字符串</p><p>​ 变量和字符串拼接，引引加加</p><p>注意：1）如果+号两边都是数字，那么就运行加法运算。</p><p>​ 2）如果+号两边有任意一边是字符串，那么就运行字符串拼接操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.1 字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&quot;hello&quot;</span> + <span class="string">&quot; &quot;</span> + <span class="string">&quot;world&quot;</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">//1.2 数值字符串 &quot;相加&quot;</span></span><br><span class="line">alert(<span class="string">&quot;100&quot;</span> + <span class="string">&quot;100&quot;</span>); <span class="comment">// 100100</span></span><br><span class="line"><span class="comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="string">&quot;11&quot;</span> + <span class="number">12</span>); <span class="comment">// 1112</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;我今年&quot;</span> + age); <span class="comment">//我今年18</span></span><br><span class="line"><span class="built_in">console</span>.log(age + <span class="string">&quot;&quot;</span>); <span class="comment">//18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 案例：弹出一个输入框让用户输入年龄，然后弹出“你今年xx岁了” */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myAge = prompt(<span class="string">&quot;请输入你的年龄！&quot;</span>);</span><br><span class="line">alert(<span class="string">&quot;你今年&quot;</span> + myAge + <span class="string">&quot;岁了！&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="Boolean-布尔型"><a href="#Boolean-布尔型" class="headerlink" title="Boolean 布尔型"></a>Boolean 布尔型</h4><p>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>​ 布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="string">&quot;1&quot;</span>); <span class="comment">// true1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="string">&quot;1&quot;</span>); <span class="comment">// false1</span></span><br></pre></td></tr></table></figure><h4 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h4><p>​ 一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable;</span><br><span class="line"><span class="built_in">console</span>.log(variable); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span> + variable); <span class="comment">// 你好undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + variable); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + variable); <span class="comment">//  NaN</span></span><br></pre></td></tr></table></figure><p>​ 一个声明变量给 null 值，里面存的值为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你好&quot;</span> + vari); <span class="comment">// 你好null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + vari); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + vari); <span class="comment">//  1</span></span><br></pre></td></tr></table></figure><h3 id="3-3-获取变量数据类型"><a href="#3-3-获取变量数据类型" class="headerlink" title="3.3 获取变量数据类型"></a>3.3 获取变量数据类型</h3><p>typeof 可用来获取检测变量的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// 结果 number</span></span><br></pre></td></tr></table></figure><h3 id="3-4-数据类型转换"><a href="#3-4-数据类型转换" class="headerlink" title="3.4 数据类型转换"></a>3.4 数据类型转换</h3><h4 id="转换为字符串型"><a href="#转换为字符串型" class="headerlink" title="转换为字符串型"></a>转换为字符串型</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td></tr><tr><td>String()强制转换</td><td>转成字符串</td></tr><tr><td>加号拼接字符串 （隐式转换）</td><td>和字符串拼接的结果都是字符串</td></tr></tbody></table><ul><li><p>把数字型转成字符串型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>；</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num));</span><br><span class="line"><span class="built_in">console</span>.log(num + <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>把布尔型转成字符串型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(n));</span><br><span class="line"><span class="built_in">console</span>.log(n + <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>parseInt()</td><td>转换为整数值型</td></tr><tr><td>parseFloat()</td><td>转换为浮点数值型</td></tr><tr><td>Number()</td><td>转换为数值型</td></tr><tr><td>-、*、% （隐式转换）</td><td>利用算术运算隐式转换为数值型</td></tr></tbody></table><ul><li><p>把字符串转换成数字型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">转成整数（只有以数字开头的字符串才能转整数，其他的都不行）</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;180cm&#x27;</span>)); <span class="comment">//180</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;abc18cm&#x27;</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">转成浮点数（只有以数字开头的字符串才能转浮点数，其他的都不行）</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;180cm&#x27;</span>)); <span class="comment">//180</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&#x27;abc18cm&#x27;</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转成数值型（只有是数字字符串可以转数字型）</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">//3.14</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;180cm&#x27;</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;abc120px&#x27;</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p>把布尔值转换成数字型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转成整数;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">false</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转成浮点数;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">true</span>)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">false</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">转成数值型 （<span class="literal">true</span>转为<span class="number">1</span>，<span class="literal">false</span>转为<span class="number">0</span>）</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">//把true转换为数字型，在进行加法运算</span></span><br></pre></td></tr></table></figure></li><li><p>undefined 转数字型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转整数;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转浮点数;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转数值型;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p>null 转数字型 （null 转为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转整数;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">null</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转浮点数;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="literal">null</span>)); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转数值型 （<span class="literal">null</span>转为<span class="number">0</span>）</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>)); <span class="comment">//0</span></span><br></pre></td></tr></table></figure></li><li><p>隐式转换（-、*、/、）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span> - <span class="number">6</span>); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span> * <span class="number">6</span>); <span class="comment">//36</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span> / <span class="number">6</span>); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span> - <span class="number">0</span>); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span> * <span class="number">1</span>); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;120&quot;</span> / <span class="number">2</span>); <span class="comment">//60</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>Boolean()</td><td>其他类型转成布尔值</td></tr></tbody></table><ul><li><p>代表空、否定的值会被转换为 false ，如 ‘’、0、NaN、null、undefined</p></li><li><p>其余值都会被转换为 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&quot;小白&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-关键字和保留字"><a href="#4-关键字和保留字" class="headerlink" title="4.关键字和保留字"></a>4.关键字和保留字</h2><h3 id="4-1-关键字"><a href="#4-1-关键字" class="headerlink" title="4.1 关键字"></a>4.1 关键字</h3><p>关键字：是指 JS 本身已经使用了的字，不能再用它们充当变量名、方法名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</span><br></pre></td></tr></table></figure><h3 id="4-2-保留字"><a href="#4-2-保留字" class="headerlink" title="4.2 保留字"></a>4.2 保留字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</span><br></pre></td></tr></table></figure><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><h3 id="5-1-运算符的分类"><a href="#5-1-运算符的分类" class="headerlink" title="5.1 运算符的分类"></a>5.1 运算符的分类</h3><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h3 id="5-2-算数运算符"><a href="#5-2-算数运算符" class="headerlink" title="5.2 算数运算符"></a>5.2 算数运算符</h3><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取余（取模）</td></tr></tbody></table><ul><li><p>取余的额外用法</p><p>1）判断是否可以被整除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1 % <span class="number">2</span>); <span class="comment">//0  可以被整除</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 % <span class="number">2</span>); <span class="comment">//1  不可以被整除</span></span><br></pre></td></tr></table></figure><p>2）判断是否为偶数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num3 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> num4 = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num3 % <span class="number">2</span>); <span class="comment">//1  不是偶数</span></span><br><span class="line"><span class="built_in">console</span>.log(num4 % <span class="number">2</span>); <span class="comment">//0  是偶数</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-递增和递减运算符"><a href="#5-3-递增和递减运算符" class="headerlink" title="5.3 递增和递减运算符"></a>5.3 递增和递减运算符</h3><ul><li><p>前置递增运算符</p><p>使用口诀：先自加，后返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">++a; <span class="comment">// ++a == 11     a == 11</span></span><br><span class="line"><span class="keyword">var</span> b = ++a + <span class="number">2</span>; <span class="comment">// ++a == 12   a == 12</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 14</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++n + <span class="number">10</span>); <span class="comment">// 21   ++n先自加1变成11与10相加得21，此时n也就变成了11</span></span><br><span class="line"><span class="built_in">console</span>.log(n); <span class="comment">//11</span></span><br></pre></td></tr></table></figure></li><li><p>后置递增运算符</p><p>使用口诀：先返回原值，后自加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line">c++; <span class="comment">// c == 11    c++ == 11</span></span><br><span class="line"><span class="keyword">var</span> d = c++ + <span class="number">2</span>; <span class="comment">// c++ == 11    d == 13    c == 12</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a++ + <span class="number">10</span>); <span class="comment">// 20   a++先返回a的值10与10相加得20，此时a再自加就变成了11</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//11</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> f = e++ + ++e; <span class="comment">//  (1)e++ == 10  e == 11   (2)++e == 12   e == 12</span></span><br><span class="line"><span class="built_in">console</span>.log(f); <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h3 id="5-4-比较运算符"><a href="#5-4-比较运算符" class="headerlink" title="5.4 比较运算符"></a>5.4 比较运算符</h3><p>概念：比较运算符是两个数据进行比较时所用的运算符，比较运算后，返回布尔值（true 或 false）</p><table><thead><tr><th>运算符名称</th><th>说明</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td></tr><tr><td>&gt;</td><td>大于号</td></tr><tr><td>&gt;=</td><td>大于等于号</td></tr><tr><td>&lt;=</td><td>小于等于号</td></tr><tr><td>==</td><td>判等号 （会转型）</td></tr><tr><td>!=</td><td>不等号</td></tr><tr><td>=== !==</td><td>全等 要求值和数据类型都一致</td></tr></tbody></table><ul><li><p>等号比较</p><table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>把左边给右边</td></tr><tr><td>==</td><td>判断</td><td>判断两边值是否相等（注意此时有隐式转换）</td></tr><tr><td>===</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="number">18</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="string">&quot;18&quot;</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="number">18</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="string">&quot;18&quot;</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-5-逻辑运算符"><a href="#5-5-逻辑运算符" class="headerlink" title="5.5 逻辑运算符"></a>5.5 逻辑运算符</h3><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>解释</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称”与” and</td><td>两侧都为 true，结果为 true，只要有一侧为 false，结果就为 false</td></tr><tr><td>||</td><td>“逻辑或”，简称”或” or</td><td>两侧都为 false，结果为 false，只有一侧为 true，结果就为 true</td></tr><tr><td>！</td><td>“逻辑非”，简称”非” not</td><td>取反</td></tr></tbody></table><ul><li><p><strong>短路运算（逻辑中断）</strong></p><p>概念：左边表达式已经确定结果，就不执行后面的部分了</p><p>1）逻辑与</p><p>​ &amp;&amp;左右两边可以是布尔值，也可以是 表达式（值）</p><p>语法： <strong>表达式 1 &amp;&amp; 表达式 2</strong></p><p>​ [1] <strong>如果表达式 1 的结果是真，就返回表达式 2</strong></p><p>​ [2] <strong>如果表达式 1 的结果是假，就返回表达式 1（不会执行表达式 2）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>; <span class="comment">// t &amp;&amp; t 返回 true</span></span><br><span class="line">a2 = <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// t &amp;&amp; f 返回 false</span></span><br><span class="line">a3 = <span class="literal">false</span> &amp;&amp; <span class="literal">true</span>; <span class="comment">// f &amp;&amp; t 返回 false</span></span><br><span class="line">a4 = <span class="literal">false</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// f &amp;&amp; f 返回 false</span></span><br><span class="line">a5 = <span class="string">&quot;Cat&quot;</span> &amp;&amp; <span class="string">&quot;Dog&quot;</span>; <span class="comment">// t &amp;&amp; t 返回 &quot;Dog&quot;</span></span><br><span class="line">a6 = <span class="literal">false</span> &amp;&amp; <span class="string">&quot;Cat&quot;</span>; <span class="comment">// f &amp;&amp; t 返回 false</span></span><br><span class="line">a7 = <span class="string">&quot;Cat&quot;</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// t &amp;&amp; f 返回 false</span></span><br><span class="line">a8 = <span class="string">&quot;&quot;</span> &amp;&amp; <span class="literal">false</span>; <span class="comment">// f &amp;&amp; f 返回 &quot;&quot;</span></span><br><span class="line">a9 = <span class="literal">false</span> &amp;&amp; <span class="string">&quot;&quot;</span>; <span class="comment">// f &amp;&amp; f 返回 false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">123</span>); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&quot;</span> &amp;&amp; <span class="number">88</span>); <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> &amp;&amp; num++); <span class="comment">//21</span></span><br></pre></td></tr></table></figure><p>2）逻辑或</p><p>​ ||左右两边可以是布尔值，也可以是 表达式（值）</p><p>​ 语法： <strong>表达式 1 || 表达式 2</strong></p><p>​ [1] <strong>如果表达式 1 的结果是真，就返回表达式 1（不会执行表达式 2）</strong></p><p>[2] <strong>如果表达式 1 的结果是假，就返回表达式 2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">o1 = <span class="literal">true</span> || <span class="literal">true</span>; <span class="comment">// t || t 返回 true</span></span><br><span class="line">o2 = <span class="literal">false</span> || <span class="literal">true</span>; <span class="comment">// f || t 返回 true</span></span><br><span class="line">o3 = <span class="literal">true</span> || <span class="literal">false</span>; <span class="comment">// t || f 返回 true</span></span><br><span class="line">o4 = <span class="literal">false</span> || <span class="literal">false</span>; <span class="comment">// f || f 返回 false</span></span><br><span class="line">o5 = <span class="string">&quot;Cat&quot;</span> || <span class="string">&quot;Dog&quot;</span>; <span class="comment">// t || t 返回 &quot;Cat&quot;</span></span><br><span class="line">o6 = <span class="literal">false</span> || <span class="string">&quot;Cat&quot;</span>; <span class="comment">// f || t 返回 &quot;Cat&quot;</span></span><br><span class="line">o7 = <span class="string">&quot;Cat&quot;</span> || <span class="literal">false</span>; <span class="comment">// t || f 返回 &quot;Cat&quot;</span></span><br><span class="line">o8 = <span class="string">&quot;&quot;</span> || <span class="literal">false</span>; <span class="comment">// f || f 返回 false</span></span><br><span class="line">o9 = <span class="literal">false</span> || <span class="string">&quot;&quot;</span>; <span class="comment">// f || f 返回 &quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || <span class="number">456</span>); <span class="comment">//  123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="number">456</span>); <span class="comment">//  456</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-6-赋值运算符"><a href="#5-6-赋值运算符" class="headerlink" title="5.6 赋值运算符"></a>5.6 赋值运算符</h3><p>概念：用来把数据赋值给变量的运算符。</p><table><thead><tr><th>赋值运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td></tr><tr><td>+=、-=</td><td>加、减后再赋值</td></tr><tr><td>*=、/=、%=</td><td>乘、除、取余后再赋值</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>; <span class="comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>; <span class="comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>; <span class="comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></table></figure><h3 id="5-7-运算符的优先级"><a href="#5-7-运算符的优先级" class="headerlink" title="5.7 运算符的优先级"></a>5.7 运算符的优先级</h3><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>（）</td></tr><tr><td>2</td><td>一元运算符</td><td>++ – ！</td></tr><tr><td>3</td><td>算术运算符</td><td>先* / % 后 + -</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !==</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先 &amp;&amp; 后 ||</td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>，</td></tr></tbody></table><ul><li><p>一元运算符里面的逻辑非优先级很高</p></li><li><p>逻辑与比逻辑或优先级高</p></li></ul><h2 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6. 流程控制"></a>6. 流程控制</h2><h3 id="6-1-三种结构"><a href="#6-1-三种结构" class="headerlink" title="6.1 三种结构"></a>6.1 三种结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/images/js11.png"></p><h3 id="6-2-顺序流程控制"><a href="#6-2-顺序流程控制" class="headerlink" title="6.2 顺序流程控制"></a>6.2 顺序流程控制</h3><p>​ 顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><h3 id="6-3-分支流程控制"><a href="#6-3-分支流程控制" class="headerlink" title="6.3 分支流程控制"></a>6.3 分支流程控制</h3><p>​ 由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><ul><li><p>if 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件成立执行代码，否则什么也不做</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if else 语句（双分支语句）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if else if 语句(多分支语句)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适合于检查多重条件。</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>)  &#123;</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>)  &#123;</span><br><span class="line">   语句<span class="number">3</span>；</span><br><span class="line"> ....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-4-三元表达式"><a href="#6-4-三元表达式" class="headerlink" title="6.4 三元表达式"></a>6.4 三元表达式</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span> ？ 表达式<span class="number">2</span> ： 表达式<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行思路</p><ul><li>如果表达式 1 为 true ，则返回表达式 2 的值</li><li>如果表达式 1 为 false，则返回表达式 3 的值</li></ul></li></ul><h3 id="6-5-switch-分支流程控制"><a href="#6-5-switch-分支流程控制" class="headerlink" title="6.5 switch 分支流程控制"></a>6.5 switch 分支流程控制</h3><ul><li><p>语法结构</p><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的<strong>特定值</strong>的选项时，就可以使用 switch。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> value1:</span><br><span class="line">    <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value2:</span><br><span class="line">    <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>switch ：开关 转换 ， case ：小例子 选项</p></li><li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个<strong>变量</strong></p></li><li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p></li><li><p>switch 表达式的值会与结构中的 case 的值做比较</p></li><li><p>如果存在匹配<strong>全等(===)</strong> ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p></li><li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><p><strong>注意： 执行 case 里面的语句时，如果没有 break，则继续执行下一个 case 里面的语句。</strong></p></li><li><p>switch 语句和 if else if 语句的区别</p><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch…case 语句通常处理 case 为比较<strong>确定值</strong>的情况， 而 if…else…语句更加灵活，常用于<strong>范围判断</strong>(大于、等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而 if…else 语句有几种条件，就得判断多少次。</li><li>当<strong>分支比较少</strong>时，if… else 语句的执行效率比 switch 语句高。</li><li>当<strong>分支比较多</strong>时，switch 语句的执行效率比较高，而且结构更清晰。</li></ul></li></ul><h2 id="7-循环"><a href="#7-循环" class="headerlink" title="7. 循环"></a>7. 循环</h2><h3 id="7-1-for-循环"><a href="#7-1-for-循环" class="headerlink" title="7.1 for 循环"></a>7.1 for 循环</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化变量; 条件表达式; 操作表达式) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 1：重复打印“前端”，重复的次数让用户决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&quot;请输入重复的次数&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;前端&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 2： 求输出 1 到 100 岁，并提示出生、死亡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你今年1岁了，刚出生&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你今年100岁了，死亡了&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你今年&quot;</span> + i + <span class="string">&quot;岁了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 3：求 1-100 之间的累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  n = n + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure></li><li><p>案例 4：求 1-100 之间的平均值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  n = n + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> average = n / <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(average);</span><br></pre></td></tr></table></figure></li><li><p>案例 5：打印 1-100 之间的偶数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 6：求 1-100 之间所有的偶数和，奇数和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> even = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> odd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    even += i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    odd += i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;偶数的和是&quot;</span> + even);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;奇数的和是&quot;</span> + odd);</span><br></pre></td></tr></table></figure></li><li><p>案例 7：求 1-100 之间能被 3 整除的累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    n += i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure></li><li><p>案例 8：弹出三个输入框，让用户输入 3 个数字，求 3 个数字的累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">  n += <span class="built_in">Number</span>(prompt(<span class="string">&quot;请输入第&quot;</span> + i + <span class="string">&quot;个数字&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br></pre></td></tr></table></figure></li><li><p>案例 9：输入班级的总人数，再输入每一个人的成绩，最后得出总分和平均分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&#x27;请输入班级的总人数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  n += <span class="built_in">Number</span>(prompt(<span class="string">&#x27;请输入第&#x27;</span> + i + <span class="string">&#x27;个学生的成绩&#x27;</span>))；</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&#x27;总分是&#x27;</span> + n);</span><br><span class="line"><span class="keyword">var</span> x = n / num;</span><br><span class="line">alert(<span class="string">&#x27;平均分是&#x27;</span> + x);</span><br></pre></td></tr></table></figure></li><li><p>案例 10：一行打印五个心</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  str = str + <span class="string">&quot;❤&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-2-双重-for-循环"><a href="#7-2-双重-for-循环" class="headerlink" title="7.2 双重 for 循环"></a>7.2 双重 for 循环</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;</span><br><span class="line">  <span class="keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;</span><br><span class="line">    需执行的代码;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;这是内层循环第&quot;</span> + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这是内层循环第&quot;</span> + j + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层循环可以看做外层循环的循环体语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序</li><li>外层循环执行一次，内层循环要执行全部次数</li></ul></li><li><p>案例 1：弹出用户输入，打印 n 行 n 列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = prompt(<span class="string">&quot;请输入行数&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cols = prompt(<span class="string">&quot;请输入列数&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>; <span class="comment">// 定义一个空的字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">  <span class="comment">// 外层循环负责打印 i 行</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= cols; j++) &#123;</span><br><span class="line">    <span class="comment">// 内层循环负责打印 j 列</span></span><br><span class="line">    str = str + <span class="string">&quot;❤&quot;</span>; <span class="comment">// 字符串的拼接实现当前这一行显示 j 列</span></span><br><span class="line">  &#125;</span><br><span class="line">  str = str + <span class="string">&quot;\n&quot;</span>; <span class="comment">// 当前第 i 行打印完了就换行，进行下一行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li><li><p>案例 2： 打印正三角形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    str += <span class="string">&quot;❤&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  str += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li><li><p>案例 3：打印倒三角形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = num; j &gt;= i; j--) &#123;</span><br><span class="line">    str += <span class="string">&quot;❤&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  str += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第 1 行从 1 到 10</span></span><br><span class="line"><span class="comment">// 第 2 行从 2 到 10</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= num; j++) &#123;</span><br><span class="line">    str += <span class="string">&quot;❤&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  str += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= num - i; j++) &#123;</span><br><span class="line">    str = str + <span class="string">&quot;❤&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  str = str + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li><li><p>案例 4：九九乘法表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">    z = i * j;</span><br><span class="line">    str += j + <span class="string">&quot;×&quot;</span> + i + <span class="string">&quot;=&quot;</span> + z + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  str += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-3-while-循环"><a href="#7-3-while-循环" class="headerlink" title="7.3 while 循环"></a>7.3 while 循环</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">  <span class="comment">// 循环体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行思路</p><p>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p></li><li><p>注意</p><p>使用 while 循环时一定要注意，它<strong>必须要有退出条件</strong>，否则会成为死循环</p></li><li><p>案例 1：打印 1-100 岁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我今年&quot;</span> + i + <span class="string">&quot;岁了&quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 2：1-100 之间的累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  num += i;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></li><li><p>案例 3：弹出一个提示框，你爱我吗？ 如果输入我爱你，就结束，否则，一直询问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = prompt(<span class="string">&quot;你爱我吗？&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (num !== <span class="string">&quot;我爱你&quot;</span>) &#123;</span><br><span class="line">  num = prompt(<span class="string">&quot;你爱我吗？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&quot;我也爱你&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例 4：猜数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">531</span>;</span><br><span class="line"><span class="keyword">var</span> n = prompt(<span class="string">&quot;请输入100-1000之间的整数&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (n != num) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; num) &#123;</span><br><span class="line">    alert(<span class="string">&quot;猜大了&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;猜小了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  n = prompt(<span class="string">&quot;请输入100-1000之间的整数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&quot;猜中了&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例 5：用户登录验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = prompt(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> pw = prompt(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (user !== <span class="string">&quot;admin&quot;</span> || pw !== <span class="string">&quot;123456&quot;</span>) &#123;</span><br><span class="line">  user = prompt(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">  pw = prompt(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&quot;登录成功&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-4-do-while-循环"><a href="#7-4-do-while-循环" class="headerlink" title="7.4 do-while 循环"></a>7.4 do-while 循环</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure></li><li><p>执行思路</p><ul><li>1、先执行一次循环体代码</li><li>2、再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</li></ul></li><li><p>注意</p><p>先再执行循环体，再判断，do…while 循环语句<strong>至少会执行一次循环体代码</strong></p></li><li><p>案例 1：打印 1-100 岁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我今年&quot;</span> + i + <span class="string">&quot;岁了&quot;</span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例 2：1-100 之间的累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  num += i;</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></li><li><p>案例 3：弹出一个提示框，你爱我吗？ 如果输入我爱你，就结束，否则，一直询问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> num = prompt(<span class="string">&quot;你爱我吗&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (num != <span class="string">&quot;我爱你&quot;</span>);</span><br><span class="line">alert(<span class="string">&quot;我也爱你&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例 4：ATM 机</p><ul><li>里面现存有 100 块钱。</li><li>如果存钱，就用输入钱数加上先存的钱数, 之后弹出显示余额提示框</li><li>如果取钱，就减去取的钱数，之后弹出显示余额提示框</li><li>如果显示余额，就输出余额</li><li>如果退出，弹出退出信息提示框</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方法一 */</span></span><br><span class="line"><span class="keyword">var</span> money = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">//弹出操作界面</span></span><br><span class="line">  <span class="keyword">var</span> menu = prompt(</span><br><span class="line">    <span class="string">&quot;请输入你要的操作：&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;1. 存钱&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;2. 取钱&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;3. 显示余额&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;4. 退出&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (menu == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">    money += prompt(<span class="string">&quot;请输入你要存入的金额：&quot;</span>) * <span class="number">1</span>;</span><br><span class="line">    alert(<span class="string">&quot;你的余额是：&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">    money -= prompt(<span class="string">&quot;请输入你要取出的金额：&quot;</span>) * <span class="number">1</span>;</span><br><span class="line">    alert(<span class="string">&quot;你的余额是：&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="string">&quot;3&quot;</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;你的余额是：&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (menu != <span class="string">&quot;4&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 方法二 */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> menu = prompt(</span><br><span class="line">    <span class="string">&quot;请输入你要的操作：&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;1. 存钱&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;2. 取钱&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;3. 显示余额&quot;</span> +</span><br><span class="line">      <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">      <span class="string">&quot;4. 退出&quot;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (menu == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">    money += prompt(<span class="string">&quot;请输入你要存入的金额：&quot;</span>) * <span class="number">1</span>;</span><br><span class="line">    alert(<span class="string">&quot;你的余额是：&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">    money -= prompt(<span class="string">&quot;请输入你要取出的金额：&quot;</span>) * <span class="number">1</span>;</span><br><span class="line">    alert(<span class="string">&quot;你的余额是：&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="string">&quot;3&quot;</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;你的余额是：&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (menu == <span class="string">&quot;4&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-5-continue、break"><a href="#7-5-continue、break" class="headerlink" title="7.5 continue、break"></a>7.5 continue、break</h3><ul><li><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p><ul><li><p>例如，吃 5 个包子，第 3 个有虫子，就扔掉第 3 个，继续吃第 4 个第 5 个包子，其代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;这个包子有虫子，扔掉&quot;</span>);</span><br><span class="line">    <span class="keyword">continue</span>; <span class="comment">// 跳出本次循环，跳出的是第3次循环</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我正在吃第&quot;</span> + i + <span class="string">&quot;个包子呢&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><table><thead><tr><th>我正在吃第 1 个包子呢</th></tr></thead><tbody><tr><td><strong>我正在吃第 2 个包子呢</strong></td></tr><tr><td><strong>这个包子有虫子，扔掉</strong></td></tr><tr><td><strong>我正在吃第 4 个包子呢</strong></td></tr><tr><td><strong>我正在吃第 5 个包子呢</strong></td></tr></tbody></table></li></ul></li><li><p>break 关键字用于立即跳出整个循环（循环结束）。</p><ul><li><p>例如，吃 5 个包子，吃到第 3 个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;我正在吃第&quot;</span> + i + <span class="string">&quot;个包子呢&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><table><thead><tr><th>我正在吃第 1 个包子呢</th></tr></thead><tbody><tr><td><strong>我正在吃第 2 个包子呢</strong></td></tr></tbody></table></li></ul></li></ul><h2 id="8-数组"><a href="#8-数组" class="headerlink" title="8. 数组"></a>8. 数组</h2><h3 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h3><p>把一组相关的数据一起存放</p><h3 id="8-2-创建数组"><a href="#8-2-创建数组" class="headerlink" title="8.2 创建数组"></a>8.2 创建数组</h3><ul><li><p>利用 new 创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>() ；</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure></li><li><p>利用数组字面量创建数组 （常用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = []；</span><br></pre></td></tr></table></figure><ul><li>数组的字面量是方括号 [ ]</li><li>声明数组并赋值称为数组的初始化</li></ul></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;小白&quot;</span>, <span class="number">12</span>, <span class="literal">true</span>, <span class="number">28.9</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-3-获取数组中的元素"><a href="#8-3-获取数组中的元素" class="headerlink" title="8.3 获取数组中的元素"></a>8.3 获取数组中的元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引号];</span><br></pre></td></tr></table></figure><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p>var arr = [ ‘吴宣仪’， 531 ， ‘五选一’];</p><p>​ 索引号： 0 1 2</p><ul><li><p>案例：在星期一到星期日中选出星期日</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="string">&quot;星期一&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期二&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期四&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期五&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期六&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期日&quot;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure></li><li><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是 undefined</p></li></ul><h3 id="8-4-遍历数组"><a href="#8-4-遍历数组" class="headerlink" title="8.4 遍历数组"></a>8.4 遍历数组</h3><ul><li><p>数组遍历：把数组中的每个元素从头到尾都访问一次</p></li><li><p>数组的长度：默认情况下表示数组中元素的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名.length;</span><br></pre></td></tr></table></figure><ul><li>数组的 length 属性可以被修改：<ul><li>如果设置的 length 属性值大于数组的元素个数，则会在数组末尾出现空白元素；</li><li>如果设置的 length 属性值小于数组的元素个数，则会把超过该值的数组元素删除；</li></ul></li></ul></li><li><p>案例 1： 遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨&quot;</span>, <span class="string">&quot;香蕉&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 2：倒叙遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨&quot;</span>, <span class="string">&quot;香蕉&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例 3：求数组中所有元素的累加和，以及平均值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  num += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> average = num / arr.length;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;累加和是&quot;</span> + num);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;平均值是&quot;</span> + average);</span><br></pre></td></tr></table></figure></li><li><p>案例 4：求数组中的最大值和最小值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">521</span>, <span class="number">531</span>];</span><br><span class="line"><span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">    max = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组中最大的是&quot;</span> + max);</span><br><span class="line"><span class="keyword">var</span> min = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">    min = arr[j];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组中最小的是&quot;</span> + min);</span><br></pre></td></tr></table></figure></li><li><p>案例：把数组中所有的元素拼接成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;妲己&quot;</span>, <span class="string">&quot;亚瑟&quot;</span>, <span class="string">&quot;孙悟空&quot;</span>, <span class="string">&quot;西施&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  str += arr[i] + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-5-数组中新增元素"><a href="#8-5-数组中新增元素" class="headerlink" title="8.5 数组中新增元素"></a>8.5 数组中新增元素</h3><ol><li><p>新增数组元素，修改 length 的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;红&quot;</span>, <span class="string">&quot;绿&quot;</span>, <span class="string">&quot;蓝&quot;</span>];</span><br><span class="line">arr.length = <span class="number">5</span>; <span class="comment">//把我们的数组长度修改为5，里面有5个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">4</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>新增数组元素，修改索引号，追加数组元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;红&quot;</span>, <span class="string">&quot;绿&quot;</span>, <span class="string">&quot;蓝&quot;</span>];</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">&quot;粉&quot;</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">&quot;紫&quot;</span>;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;黑&quot;</span>; <span class="comment">// 这里就会替换掉原来的数组元素</span></span><br></pre></td></tr></table></figure></li><li><p>通过最大的索引在数组的最后添加新元素（常用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组[数组.length] = 新数据;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>案例 1：把 1-10 之间的 10 个数字，添加到一个空数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>案例 2：把 11-20 之间的 10 个数字，添加到空数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">  arr[arr.length] = j + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li><p>案例 3：把数组中大于 10 的元素，筛选出来，添加到新的数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">55</span>, <span class="number">20</span>, <span class="number">75</span>, <span class="number">531</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    newArr[newArr.length] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure></li><li><p>案例 4：把数组中不是 0 的元素，筛选出来，放到新数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">55</span>, <span class="number">20</span>, <span class="number">75</span>, <span class="number">531</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr3[i] != <span class="number">0</span>) &#123;</span><br><span class="line">    newArr[newArr.length] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure></li><li><p>案例 5：把数组中的元素倒叙的方式添加到新数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  newArr[newArr.length] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure></li><li><p>案例 6：交换数组中两个元素的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;猫&quot;</span>, <span class="string">&quot;狗&quot;</span>, <span class="string">&quot;猪&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> t;</span><br><span class="line">t = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">2</span>] = t;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-6-数组的冒泡排序"><a href="#8-6-数组的冒泡排序" class="headerlink" title="8.6 数组的冒泡排序"></a>8.6 数组的冒泡排序</h3><p>把一系列的数据按照一定的顺序进行排列显示（从大到小或从小到大）</p><ol><li>一共需要的趟数，我们用外层 for 循环<ul><li>5 个数据我们一共需要走 4 趟</li><li>长度就是 数组的长度 减去 1 arr.length - 1</li></ul></li><li>每一趟交换的次数，我们用内层 for 循环<ul><li>第 1 趟交换 4 次</li><li>第 2 趟交换 3 次</li><li>第 3 趟 2 次</li><li>第 4 趟交换 1 次</li><li>长度就是 数组的长度 减去 i</li><li>但 i 从 0 开始的，所以最终的次数就是 arr.length - i -1</li></ul></li><li>交换 2 个变量</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第1步，先找到最大值 (i指的是数组的索引号)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;= arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="comment">// 和下一个元素进行比较</span></span><br><span class="line">    <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">//交换位置</span></span><br><span class="line">      <span class="keyword">var</span> x = arr[j];</span><br><span class="line">      arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">      arr[j + <span class="number">1</span>] = x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9. 函数"></a>9. 函数</h2><h3 id="9-1-函数的概念。"><a href="#9-1-函数的概念。" class="headerlink" title="9.1 函数的概念。"></a>9.1 函数的概念。</h3><ul><li><p>函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。</p></li><li><p>目的：通过此代码块可以<strong>实现大量代码的重复使用</strong>。</p></li></ul><h3 id="9-2-函数的使用"><a href="#9-2-函数的使用" class="headerlink" title="9.2 函数的使用"></a>9.2 函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>function 是声明函数的关键字,必须小写</li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(); <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）</p></li><li><p>案例：封装计算 1-100 累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>; <span class="comment">// 准备一个变量，保存数字和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    num += i; <span class="comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">  &#125;</span><br><span class="line">  alert(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-3-函数的参数"><a href="#9-3-函数的参数" class="headerlink" title="9.3 函数的参数"></a>9.3 函数的参数</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span> , 形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..);</span><br></pre></td></tr></table></figure><ul><li>形参：来接收实参传过来的具体数值</li><li>实参：函数调用是真实的数据</li><li>注意：<ul><li>调用的时候实参值是传递给形参的（一对一传递）</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ul></li></ul><h4 id="函数形参和实参数量不匹配"><a href="#函数形参和实参数量不匹配" class="headerlink" title="函数形参和实参数量不匹配"></a>函数形参和实参数量不匹配</h4><table><thead><tr><th>参数的个数</th><th>说明</th></tr></thead><tbody><tr><td>实参的个数等于形参的个数</td><td>输出正常结果</td></tr><tr><td>实参的个数多于形参的个数</td><td>只取到形参的个数</td></tr><tr><td>实参的个数少于形参的个数</td><td>多的形参定义为 undefined，结果为 NaN</td></tr></tbody></table><ul><li>在 JavaScript 中，<strong>形参的默认值是 undefined</strong>。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="9-4-返回值"><a href="#9-4-返回值" class="headerlink" title="9.4 返回值"></a>9.4 返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名（）</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span>  需要返回的值；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();    <span class="comment">// 此时调用函数就可以得到函数体内return 后面的值</span></span><br></pre></td></tr></table></figure><ul><li><p>在使用 return 语句时，函数会停止执行，并返回指定的值</p></li><li><p>return 只能返回一个值（想要返回多个值，可以用数组。return [];）</p></li><li><p>返回值会返回调用的位置（调用者）</p></li><li><p>如果函数没有 return 或者 return；，返回的值是 undefined</p></li><li><p>return 后面可以使具体的数、变量、式子</p></li><li><p>案例 1：打印任意两个数的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  z = x + y;</span><br><span class="line">  <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">//20</span></span><br></pre></td></tr></table></figure></li><li><p>案例 2：打印任意两个数之间的累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = o; i &lt;= p; i++) &#123;</span><br><span class="line">    num += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">10</span>, <span class="number">50</span>)); <span class="comment">//1230</span></span><br></pre></td></tr></table></figure></li><li><p>案例 3：求两个数的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//return x &gt; y ? x : y;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>, <span class="number">10</span>)); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li><li><p>案例 4：给&lt;10 的数字前面补 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span> + n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//return n &lt; 10 ? &#x27;0&#x27; + n : n;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">5</span>)); <span class="comment">// 05</span></span><br></pre></td></tr></table></figure></li><li><p>案例 5：求数组中的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">      max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = getArr([<span class="number">10</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">531</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 531</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h4 id="arguments-的使用"><a href="#arguments-的使用" class="headerlink" title="arguments 的使用"></a>arguments 的使用</h4><ul><li><p>条件：当不确定有多少个参数传递的时候，可以用 arguments 来获取。</p></li><li><p>arguments 实际上它是当前函数的一个<strong>内置对象</strong>。</p></li><li><p>作用：存储了传递的所有实参。</p></li><li><p>特点：<strong>伪数组</strong></p><ul><li>具有 length 属性</li><li>按索引方式储存数据</li><li>不具有数组的 push , pop 等方法</li><li>可以像数组那样去遍历数组</li></ul></li><li><p>案例：求任意数的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">      max = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">1</span>, <span class="number">5</span>)); <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">520</span>, <span class="number">500</span>, <span class="number">531</span>)); <span class="comment">// 531</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数案例"><a href="#函数案例" class="headerlink" title="函数案例"></a>函数案例</h4><ul><li><h5 id="1、-函数翻转数组"><a href="#1、-函数翻转数组" class="headerlink" title="1、 函数翻转数组"></a>1、 函数翻转数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.length] = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum([<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;梨&quot;</span>, <span class="string">&quot;香蕉&quot;</span>])); <span class="comment">// [&#x27;香蕉&#x27;,&#x27;梨&#x27;,&#x27;苹果&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><h5 id="2、-函数对数组冒泡排序"><a href="#2、-函数对数组冒泡排序" class="headerlink" title="2、 函数对数组冒泡排序"></a>2、 函数对数组冒泡排序</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//外层循环时趟数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//内层循环，交换次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="comment">//比较次数，交换位置</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> n = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = n;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])); <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li><li><h5 id="3、函数判断闰年"><a href="#3、函数判断闰年" class="headerlink" title="3、函数判断闰年"></a>3、函数判断闰年</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闰年则输出 true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假设状态变量，执行代码，更改状态变量，返回状态变量</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">2000</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">2001</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><h5 id="4、函数调用另一个函数"><a href="#4、函数调用另一个函数" class="headerlink" title="4、函数调用另一个函数"></a>4、函数调用另一个函数</h5><h5 id="使用函数名加括号即可以将封装的操作执行"><a href="#使用函数名加括号即可以将封装的操作执行" class="headerlink" title="使用函数名加括号即可以将封装的操作执行"></a>使用<strong>函数名加括号</strong>即可以将封装的操作执行</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户输入年份，输出当前2月份的天数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = prompt(<span class="string">&quot;请输入年份&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> result = getSum(n);</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="literal">true</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;闰年，2月份有29天&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;平年，2月份有28天&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getDay();</span><br></pre></td></tr></table></figure></li><li><h5 id="5、求输入任意两个数的最大值"><a href="#5、求输入任意两个数的最大值" class="headerlink" title="5、求输入任意两个数的最大值"></a>5、求输入任意两个数的最大值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入任意两个数字，求最大值，并能出弹运算后的结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入第一个值：&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入第二个值：&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&quot;最大值是：&quot;</span> + getSum());</span><br></pre></td></tr></table></figure></li><li><h5 id="6、输入任意三个不同数字的最大值"><a href="#6、输入任意三个不同数字的最大值" class="headerlink" title="6、输入任意三个不同数字的最大值"></a>6、输入任意三个不同数字的最大值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入任意三个不同数字的最大值，并能弹出运算后的结果。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入第一个值：&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入第二个值：&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入第三个值：&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> arrMax = [x, y, z];</span><br><span class="line">  <span class="keyword">var</span> max = arrMax[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arrMax.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arrMax[i] &gt; max) &#123;</span><br><span class="line">      max = arrMax[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">&quot;最大值是：&quot;</span> + getSum());</span><br></pre></td></tr></table></figure></li><li><h5 id="7、输入一个数判断是否是素数"><a href="#7、输入一个数判断是否是素数" class="headerlink" title="7、输入一个数判断是否是素数"></a>7、输入一个数判断是否是素数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户输入一个数判断是否是素数(又叫质数，只能被1和自身整除的数)，并弹出返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(prompt(<span class="string">&quot;请输入一个数&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (num &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; num; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">alert(getSum());</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-5-函数的两种声明方式"><a href="#9-5-函数的两种声明方式" class="headerlink" title="9.5 函数的两种声明方式"></a>9.5 函数的两种声明方式</h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用<strong>函数关键字 function</strong> 自定义函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul></li><li><p>函数表达式方式(匿名函数）</p><p>利用<strong>函数表达式方式</strong>的写法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>函数调用的代码必须写到函数体后面</li></ul></li></ul><h2 id="10-作用域"><a href="#10-作用域" class="headerlink" title="10. 作用域"></a>10. 作用域</h2><h3 id="10-1-作用域概述"><a href="#10-1-作用域概述" class="headerlink" title="10.1 作用域概述"></a>10.1 作用域概述</h3><ul><li>概念：代码名字（变量和函数）在谋个范围内起作用和效果</li><li>作用：为了提高程序的可靠性，减少名字冲突</li><li>分类：<ul><li>全局作用域：作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</li><li>局部作用域：作用于函数内的代码环境</li></ul></li></ul><h3 id="10-2-JS-没有块级作用域"><a href="#10-2-JS-没有块级作用域" class="headerlink" title="10.2 JS 没有块级作用域"></a>10.2 JS 没有块级作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>); <span class="comment">//123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//123</span></span><br></pre></td></tr></table></figure><h3 id="10-3-变量的作用域"><a href="#10-3-变量的作用域" class="headerlink" title="10.3 变量的作用域"></a>10.3 变量的作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在JavaScript中，根据作用域的不同，变量可以分为两种：</span><br></pre></td></tr></table></figure><ul><li><p><strong>全局变量</strong> ：在全局作用域下声明的变量；在函数内部没有声明直接赋值的变量也属于全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">//num就是一个全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>**局部变量 **：在局部作用域下声明的变量；函数的形参也可以看做是局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// num就是局部变量，只能在函数内部使用</span></span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li><li><p>全局变量和局部变量的区别</p><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul></li></ul><h3 id="10-4-作用域链"><a href="#10-4-作用域链" class="headerlink" title="10.4 作用域链"></a>10.4 作用域链</h3><p>根据在<strong>内部函数可以访问外部函数变量</strong>的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作用域链：采取就近原则的方式来查找变量最终的值。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">&quot;22&quot;</span>;</span><br><span class="line">  fn2();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    fn3();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(a); <span class="comment">//a的值 4</span></span><br><span class="line">      <span class="built_in">console</span>.log(b); <span class="comment">//b的值 22</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><h3 id="10-5-预解析"><a href="#10-5-预解析" class="headerlink" title="10.5 预解析"></a>10.5 预解析</h3><p>js 引擎在执行 js 代码时：</p><p>​ 第 1 步：预解析 （重新摆放代码的顺序）</p><p>​ 变量提升：把变量声明的语句提升到当前作用域的最前面</p><p>​ 函数提升：把函数声明的语句提升到当前作用域的最前面</p><p>​ 第 2 步：执行代码</p><ul><li><p>案例 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析之后：</span></span><br><span class="line"><span class="comment">//          var num;</span></span><br><span class="line"><span class="comment">//          console.log(num);</span></span><br><span class="line"><span class="comment">//          num = 10;</span></span><br></pre></td></tr></table></figure></li><li><p>案例 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn(); <span class="comment">//不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析之后：</span></span><br><span class="line"><span class="comment">//      function fn() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//      fn();</span></span><br></pre></td></tr></table></figure></li><li><p>案例 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun(); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">22</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析之后：</span></span><br><span class="line"><span class="comment">//     var fun;</span></span><br><span class="line"><span class="comment">//     fun();</span></span><br><span class="line"><span class="comment">//     fun = function() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>案例 4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fun();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fun&quot;</span>); <span class="comment">//fun</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用函数时，执行函数中的代码，他会经过2个阶段 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    预解析之后：</span></span><br><span class="line"><span class="comment">        function fun()&#123;&#125;</span></span><br><span class="line"><span class="comment">        fun();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>案例 5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fun();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fun&quot;</span>); <span class="comment">//报错</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用函数时，执行函数中的代码，他会经过2个阶段 */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    预解析之后：</span></span><br><span class="line"><span class="comment">        var fun;</span></span><br><span class="line"><span class="comment">        fun();</span></span><br><span class="line"><span class="comment">        fun = function fun1()&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>案例 6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    预解析：</span></span><br><span class="line"><span class="comment">        var num;</span></span><br><span class="line"><span class="comment">        function fun()&#123;</span></span><br><span class="line"><span class="comment">            var num;</span></span><br><span class="line"><span class="comment">            console.log(num); //undefined</span></span><br><span class="line"><span class="comment">            num = 20;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        num = 10;</span></span><br><span class="line"><span class="comment">        fun();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>案例 7</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    预解析：</span></span><br><span class="line"><span class="comment">        var num;</span></span><br><span class="line"><span class="comment">        function fn()&#123;</span></span><br><span class="line"><span class="comment">            var num;</span></span><br><span class="line"><span class="comment">            console.log(num);</span></span><br><span class="line"><span class="comment">            num = 20;</span></span><br><span class="line"><span class="comment">            console.log(num);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        num = 10;</span></span><br><span class="line"><span class="comment">        fn();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>案例 8</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//9</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    预解析：</span></span><br><span class="line"><span class="comment">        var a;</span></span><br><span class="line"><span class="comment">        function f1()&#123;</span></span><br><span class="line"><span class="comment">            var b;</span></span><br><span class="line"><span class="comment">            var a;</span></span><br><span class="line"><span class="comment">            b = 9;</span></span><br><span class="line"><span class="comment">            console.log(a);</span></span><br><span class="line"><span class="comment">            console.log(b);</span></span><br><span class="line"><span class="comment">            a = &#x27;123&#x27;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        a = 18;</span></span><br><span class="line"><span class="comment">        f1(); </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>案例 9</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = (b = c = <span class="number">9</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//9</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">//9</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    预解析：</span></span><br><span class="line"><span class="comment">        function f1()&#123;</span></span><br><span class="line"><span class="comment">            var a;</span></span><br><span class="line"><span class="comment">            a = 9;</span></span><br><span class="line"><span class="comment">            b = 9;</span></span><br><span class="line"><span class="comment">            c = 9;</span></span><br><span class="line"><span class="comment">            console.log(a);</span></span><br><span class="line"><span class="comment">            console.log(b);</span></span><br><span class="line"><span class="comment">            console.log(c);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        f1();</span></span><br><span class="line"><span class="comment">        console.log(c);</span></span><br><span class="line"><span class="comment">        console.log(b);</span></span><br><span class="line"><span class="comment">        console.log(a);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="11-对象"><a href="#11-对象" class="headerlink" title="11. 对象"></a>11. 对象</h2><h3 id="11-1-概念"><a href="#11-1-概念" class="headerlink" title="11.1 概念"></a>11.1 概念</h3><ul><li>对象是一组无序的相关属性和方法的集合</li><li>对象是由属性和方法组成的<ul><li>属性：事物的<strong>特征</strong>，在对象中用属性来表示（常用<strong>名词</strong>）</li><li>方法：事物的<strong>行为</strong>，在对象中用方法来表示（常用<strong>动词</strong>）</li></ul></li><li>对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用</li></ul><h3 id="11-2-创建对象的三种方式"><a href="#11-2-创建对象的三种方式" class="headerlink" title="11.2 创建对象的三种方式"></a>11.2 创建对象的三种方式</h3><h4 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是花括号 &#123; &#125; 里面包含了表达这个具体事物（对象）的属性和方法；&#123; &#125; 里面采取键值对的形式表示</span><br></pre></td></tr></table></figure><ul><li><p>键：相当于属性名</p></li><li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog = &#123;</span><br><span class="line">  name: <span class="string">&quot;可可&quot;</span>,</span><br><span class="line">  type: <span class="string">&quot;阿拉斯加犬&quot;</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">  color: <span class="string">&quot;棕红色&quot;</span>,</span><br><span class="line">  bark: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  showFilm: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;演电影&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">dog.bark(); <span class="comment">//汪汪汪</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.color); <span class="comment">// 棕红色</span></span><br><span class="line"><span class="built_in">console</span>.log(dog[<span class="string">&quot;color&quot;</span>]); <span class="comment">//棕红色</span></span><br></pre></td></tr></table></figure><p>上述代码中 dog 即是创建的对象。</p></li><li><p>对象的使用</p><ul><li><p>访问对象的属性</p><ul><li><p>对象里面的属性调用 : <strong>对象.属性名</strong> ，这个小点 . 就理解为“ 的 ”</p></li><li><p>对象里面属性的另一种调用方式 : **对象[‘属性名’]**，注意方括号里面的属性必须加引号</p><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(dog[<span class="string">&quot;name&quot;</span>]); <span class="comment">// 调用名字属性</span></span><br></pre></td></tr></table></figure></li><li><p>调用对象的方法</p></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 对象里面的方法调用：**对象.方法名()** ，注意这个方法名字后面一定加括号</span><br></pre></td></tr></table></figure><pre><code>  示例代码如下：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog.sayHi();  <span class="comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>变量、属性、函数、方法总结</p><ul><li>变量：单独声明赋值，单独存在</li><li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li><li>函数：单独存在的，通过“函数名()”的方式就可以调用</li><li>方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。</li></ul></li></ul><h4 id="利用-new-Object-创建对象"><a href="#利用-new-Object-创建对象" class="headerlink" title="利用 new Object 创建对象"></a>利用 new Object 创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> Obect(); <span class="comment">//创建空对象</span></span><br></pre></td></tr></table></figure><p>通过内置构造函数 Object 创建对象，此时 andy 变量已经保存了创建出来的空对象</p><p>注意：</p><ul><li>Object() ：第一个字母大写</li><li>new Object() ：需要 new 关键字</li><li>使用的格式：对象.属性 = 值;</li></ul><h4 id="利用构造函数创建对象"><a href="#利用构造函数创建对象" class="headerlink" title="利用构造函数创建对象"></a>利用构造函数创建对象</h4><ul><li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p></li><li><p>构造函数的语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">     <span class="built_in">this</span>.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> 构造函数名(实参<span class="number">1</span>，实参<span class="number">2</span>，实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>以上代码中，obj 即接收到构造函数创建出来的对象。</p></li><li><p>案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = x;</span><br><span class="line">  <span class="built_in">this</span>.type = y;</span><br><span class="line">  <span class="built_in">this</span>.blood = z;</span><br><span class="line">  <span class="built_in">this</span>.attack = <span class="function"><span class="keyword">function</span> (<span class="params">skill</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(skill);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> houyi = <span class="keyword">new</span> getSum(<span class="string">&quot;后羿&quot;</span>, <span class="string">&quot;射手型&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(houyi);</span><br><span class="line">houyi.attack(<span class="string">&quot;远程&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lianpo = <span class="keyword">new</span> getSum(<span class="string">&quot;廉颇&quot;</span>, <span class="string">&quot;力量型&quot;</span>, <span class="string">&quot;500&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lianpo);</span><br><span class="line">lianpo.attack(<span class="string">&quot;近战&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>构造函数约定<strong>首字母大写</strong>。</li><li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>构造函数中<strong>不需要 return 返回结果</strong>。</li><li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ol></li><li><p>new 关键字的作用</p><ol><li><p>在构造函数代码开始执行之前，创建一个空对象；</p></li><li><p>修改 this 的指向，把 this 指向创建出来的空对象；</p></li><li><p>执行函数的代码</p></li><li><p>在函数完成之后，返回 this—即创建出来的对象</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9B%BE1.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9B%BE2.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9B%BE3.png"></p></li></ol></li><li><p>每日测评的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">28</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.age); <span class="comment">// 28</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用构造函数配合 &#x27;new&#x27; 关键字一起使用，默认返回 &#x27;this&#x27; ，如果在构造函数内部返回复杂类型（包括基础类型包装类），那么则返回这个复杂数据，此题返回的是数字型，属于基础类型（因为没有使用 &#x27;new&#x27; 关键字），所以还是返回 this。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">gender</span>: <span class="string">&quot;未知&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.gender); <span class="comment">//未知</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用构造函数配合&#x27;new&#x27;关键字一起使用，默认是返回&#x27;this&#x27;，如果在构造函数内部返回复杂类型（包括基础类型包装类），那么则返回这个复杂数据，此题返回的是对象，属于复杂类型</span></span><br></pre></td></tr></table></figure><p>总结：简单数据类型：Number, String, Boolean, undefined, null</p><p>​ 复杂数据类型：数组，函数，对象</p></li><li><p>构造函数和对象的关系</p><ul><li>构造函数，泛指某一大类</li><li>对象，具体的某一个事物</li><li>new 构造函数的过程，创建对象的过程，实例化对象的过程</li></ul></li></ul><h3 id="11-3-给对象添加属性和方法"><a href="#11-3-给对象添加属性和方法" class="headerlink" title="11.3 给对象添加属性和方法"></a>11.3 给对象添加属性和方法</h3><ul><li><p>添加属性和方法的语法</p><p>​ <strong>对象.属性名 = 值</strong>； 或者 <strong>对象[‘属性名’] = 值</strong>；</p><p>​ <strong>对象.方法名 = function() {}</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> girlFriend = &#123;&#125;; <span class="comment">//空对象（没有属性名和方法）</span></span><br><span class="line">girlFriend.name = <span class="string">&quot;吴宣仪&quot;</span>;</span><br><span class="line">girlFriend.age = <span class="number">26</span>;</span><br><span class="line">girlFriend[<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">girlFriend.skills = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;歌手&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(girlFriend);</span><br></pre></td></tr></table></figure></li><li><p>使用属性和方法的语法</p><p>​ <strong>对象.属性名</strong> 或者 <strong>对象[‘属性名’]</strong></p><p>​ <strong>对象.方法名()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意：对象属性的使用 */</span></span><br><span class="line"><span class="built_in">console</span>.log(girlFriend.name); <span class="comment">//吴宣仪</span></span><br><span class="line"><span class="built_in">console</span>.log(girlFriend[<span class="string">&quot;sex&quot;</span>]); <span class="comment">// 女</span></span><br><span class="line">girlFriend.skills(); <span class="comment">//歌手</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 属性名保存在变量中，只能通过[]方法来访问 */</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(girlFriend.i); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(girlFriend[i]); <span class="comment">//吴宣仪</span></span><br><span class="line"><span class="built_in">console</span>.log(girlFriend[<span class="string">&quot;i&quot;</span>]); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="11-4-遍历对象"><a href="#11-4-遍历对象" class="headerlink" title="11.4 遍历对象"></a>11.4 遍历对象</h3><ul><li><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">  <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k); <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="11-5-利用对象求最大值"><a href="#11-5-利用对象求最大值" class="headerlink" title="11.5 利用对象求最大值"></a>11.5 利用对象求最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = &#123;</span><br><span class="line">  max: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>[i]; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">        max = <span class="built_in">arguments</span>[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> re = num.max(<span class="number">11</span>, <span class="number">35</span>, <span class="number">60</span>, <span class="number">75</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br></pre></td></tr></table></figure><h2 id="12-内置对象"><a href="#12-内置对象" class="headerlink" title="12. 内置对象"></a>12. 内置对象</h2><h3 id="12-1-Math-对象"><a href="#12-1-Math-对象" class="headerlink" title="12.1 Math 对象"></a>12.1 Math 对象</h3><p>Math 对象不是构造函数，不用 new，直接使用</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整 注意 -3.5 结果是 -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​ 注意：上面的方法使用时必须带括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 圆周率 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">//3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取最大值 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(-<span class="number">1</span>, -<span class="number">3</span>, -<span class="number">2</span>)); <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取最小值 */</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>,</span><br><span class="line">  y = -<span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(x, y)); <span class="comment">//-20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取绝对值 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&quot;-1&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(-<span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="literal">null</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">&quot;string&quot;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs()); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向下取整 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.9</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 向上取整 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 四舍五入   注意：.5往大的取 */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.9</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.1</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.5</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">1.9</span>)); <span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取指定范围内的随机整数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机点名案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;吴宣仪&quot;</span>, <span class="string">&quot;五选一&quot;</span>, <span class="string">&quot;小昂&quot;</span>, <span class="string">&quot;小选&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[getRandom(<span class="number">0</span>, arr.length - <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><p><strong>猜数字案例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random = getRandom(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num = prompt(<span class="string">&quot;请输入1-50之间的一个数字&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (num &gt; random) &#123;</span><br><span class="line">    alert(<span class="string">&quot;猜大了&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; random) &#123;</span><br><span class="line">    alert(<span class="string">&quot;猜小了&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;猜对了&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-日期对象"><a href="#12-2-日期对象" class="headerlink" title="12.2 日期对象"></a>12.2 日期对象</h3><p>Date 对象和 Math 对象不一样，Date 是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td></tr><tr><td>getMonth()</td><td>获取当月</td></tr><tr><td>getDate()</td><td>获取当天日期</td></tr><tr><td>getDay()</td><td>获取星期几</td></tr><tr><td>getHours()</td><td>获取当前小时</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td></tr></tbody></table><ul><li><p>使用 Date 实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2021-02-05 08:08:08&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>格式化日期时间（拼接出想要的日期时间格式）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第1步 创建日期对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear());</span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth() + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date.getDate());</span><br><span class="line"><span class="built_in">console</span>.log(date.getDay());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第2步，单独获得年月日对应的值</span></span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.getDate();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="string">&quot;星期日&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期一&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期二&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期四&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期五&quot;</span>,</span><br><span class="line">  <span class="string">&quot;星期六&quot;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> day = date.getDay();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第3步，拼接想要格式化的字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">&quot;今天是：&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + dates + <span class="string">&quot;日&quot;</span> + arr[day]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>利用函数，格式化日期时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">dtStr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第1步，创建日期对象</span></span><br><span class="line">  <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dtStr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第2步，获取年月日，时分秒对应的值</span></span><br><span class="line">  <span class="keyword">var</span> year = dt.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month = dt.getMonth() + <span class="number">1</span>;</span><br><span class="line">  month = month &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + month : month;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dates = dt.getDate();</span><br><span class="line">  dates = dates &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + dates : dates;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hour = dt.getHours();</span><br><span class="line">  hour = hour &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + hour : hour;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> minute = dt.getMinutes();</span><br><span class="line">  minute = minute &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + minute : minute;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> miao = dt.getSeconds();</span><br><span class="line">  miao = miao &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + miao : miao;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第3步，拼接字符串（格式化）</span></span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    year +</span><br><span class="line">      <span class="string">&quot;年&quot;</span> +</span><br><span class="line">      month +</span><br><span class="line">      <span class="string">&quot;月&quot;</span> +</span><br><span class="line">      dates +</span><br><span class="line">      <span class="string">&quot;日&quot;</span> +</span><br><span class="line">      hour +</span><br><span class="line">      <span class="string">&quot;：&quot;</span> +</span><br><span class="line">      minute +</span><br><span class="line">      <span class="string">&quot;:&quot;</span> +</span><br><span class="line">      miao</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">dateFormat(<span class="string">&quot;2021-01-26 20:00:10&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>倒计时案例：2021-01-27 21:30:00 目标时间，还有 xx 天 xx 小时 xx 分钟 xx 秒</p><p>第 1 步，计算出距离目标时间，还有多少毫秒</p><p>​ 目标时间的时间戳 - 当前时间的时间戳</p><p>第 2 步 ，毫秒换算成天时分秒</p><p>​ 转换公式：</p><p>​ d = parseInt(总秒数 / 60 / 60 / 24);</p><p>​ h = parseInt(总秒数 / 60 / 60 % 24);</p><p>​ m = parseInt(总秒数 / 60 % 60);</p><p>​ s = parseInt(总秒数 % 60);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">dtStr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前时间的时间戳</span></span><br><span class="line">  <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">// 目标时间的时间戳</span></span><br><span class="line">  <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(dtStr);</span><br><span class="line">  <span class="comment">// times 相差的总秒数，并转换为毫秒</span></span><br><span class="line">  <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>;</span><br><span class="line">  <span class="comment">// console.log(times);</span></span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">  d = d &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + d : d;</span><br><span class="line">  <span class="keyword">var</span> h = <span class="built_in">parseInt</span>((times / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>);</span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="built_in">parseInt</span>((times / <span class="number">60</span>) % <span class="number">60</span>);</span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>);</span><br><span class="line">  s = s &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + s : s;</span><br><span class="line">  <span class="keyword">return</span> d + <span class="string">&quot;天&quot;</span> + h + <span class="string">&quot;时&quot;</span> + m + <span class="string">&quot;分&quot;</span> + s + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re = countDown(<span class="string">&quot;2021-01-27 21:30:00&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re);</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br></pre></td></tr></table></figure></li></ul><h3 id="12-3-数组对象"><a href="#12-3-数组对象" class="headerlink" title="12.3 数组对象"></a>12.3 数组对象</h3><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul><li><p><strong>字面量方式</strong></p><ul><li><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">&quot;test&quot;</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>new Array()</strong></p><ul><li><p>示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; new Array();</span><br></pre></td></tr></table></figure><p>​ 注意：上面代码中 arr 创建出的是一个<strong>空数组</strong>，如果需要使用构造函数 Array 创建非空数组，可以在创建数组时传入参数</p><p>​ 参数传递规则如下：</p><ul><li>如果只传入<strong>一个</strong>参数，则参数规定了数组的<strong>长度</strong></li><li>如果传入了<strong>多个</strong>参数，则参数称为数组的<strong>元素</strong></li></ul></li></ul></li></ul><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p><strong>instanceof 运算符</strong></p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Array.isArray()</strong></p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(obj)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4><ul><li><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>push()</td><td>尾部添加元素</td></tr><tr><td>unshift()</td><td>开头添加元素</td></tr><tr><td>pop()</td><td>删除最后一个元素</td></tr><tr><td>shift()</td><td>删除第一个元素</td></tr></tbody></table><p><strong>push()</strong></p><ul><li><p>push 是可以给数组后面追加新的元素</p></li><li><p>push() 参数直接写数组元素</p></li><li><p>push 完毕之后，返回的结果是 新数组的长度</p></li><li><p>原数组会发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// arr.push(4, &#x27;pink&#x27;);</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>, <span class="string">&quot;pink&quot;</span>)); <span class="comment">//5，数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2,3,4,&#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>案例</strong>：把小于 2000 的元素添加到新数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 把小于2000的元素添加到新数组中 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">5310</span>, <span class="number">9999</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">    newArr.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure></li><li><p><strong>unshift()</strong></p><ul><li><p>unshift 是可以给数组前面追加新的元素</p></li><li><p>unshift() 参数直接写数组元素</p></li><li><p>unshift 完毕之后，返回的结果是 新数组的长度</p></li><li><p>原数组会发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// arr.unshift(&#x27;pink&#x27;, &#x27;blue&#x27;);</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;blue&quot;</span>)); <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&#x27;pink&#x27;,&#x27;blue&#x27;,1,2,3]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>pop()</strong></p><ul><li><p>pop 是可以删除数组的最后一个元素，一次只能删除一个</p></li><li><p>pop() 没有参数</p></li><li><p>pop 完毕之后，返回的结果是 删除的那个元素</p></li><li><p>原数组会发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>shift()</strong></p><ul><li><p>shift 是可以删除数组的第一个元素，一次只能删除一个</p></li><li><p>shift() 没有参数</p></li><li><p>shift 完毕之后，返回的结果是 删除的那个元素</p></li><li><p>原数组会发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr3.shift()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">//[2,3]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td>reverse()</td><td>颠倒数组中元素的顺序，无参数</td><td>会改变原数组，返回新数组</td></tr><tr><td>sort()</td><td>对数组进行排序</td><td>会改变原数组，返回新数组</td></tr></tbody></table><p><strong>reverse()</strong> 翻转数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;red&quot;</span>];</span><br><span class="line">arr4.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr4); <span class="comment">// [&#x27;red&#x27;,&#x27;blue&#x27;,&#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>sort()</strong> 数组冒泡排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr5 = [<span class="number">1</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">35</span>, <span class="number">60</span>];</span><br><span class="line">arr5.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return a - b; //升序</span></span><br><span class="line">  <span class="keyword">return</span> b - a; <span class="comment">//降序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr5); <span class="comment">//[60, 35, 13, 3, 1]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul><li><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>数组中查找给定元素的第一个索引</td><td>如果存在返回索引号，如果不存在，则返回 -1</td></tr><tr><td>lastIndexOf()</td><td>在数组中的最后一个的索引</td><td>如果存在返回索引号，如果不存在，则返回 -1</td></tr></tbody></table><p><strong>indexOf()</strong> 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> re = arr.indexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re1 = arr.indexOf(<span class="string">&quot;a&quot;</span>, <span class="number">3</span>); <span class="comment">// 从索引3开始查找</span></span><br><span class="line"><span class="built_in">console</span>.log(re1); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re2 = arr.indexOf(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re2); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>lastIndexOf()</strong> 从后往前查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re3 = arr.lastIndexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re3); <span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>案例</strong>：去除数组中重复的元素，添加到新数组中</p><p>​ 思路：</p><p>​ 遍历旧数组</p><p>​ 把旧数组的元素添加到新数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;z&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="comment">// 遍历旧数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 查看新数组中是否有当前元素</span></span><br><span class="line">  <span class="keyword">if</span> (newArr.indexOf(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 将当前元素添加到新数组中</span></span><br><span class="line">    newArr.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul><li><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>把数组转换成字符串，逗号分隔每一项</td><td>返回一个字符串</td></tr><tr><td>join(‘分隔符’)</td><td>方法用于把数组中的所有元素转换为一个字符串</td><td>返回一个字符串</td></tr><tr><td>concat()</td><td>连接两个或多个数组，不影响原数组</td><td>返回一个新数组</td></tr><tr><td>slice()</td><td>数组截取 slice(begin,end)</td><td>返回被截取项目的新数组</td></tr><tr><td>splice()</td><td>数组删除 splice(第几个开始，要删除个数)</td><td>返回被删除项目的数组，会影响原数组</td></tr></tbody></table><p><strong>toString()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> arrr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;1a&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arrr.toString()); <span class="comment">//1,2,a,1a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、分隔符转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">//w,x,c</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&quot;&amp;&quot;</span>)); <span class="comment">// w&amp;x&amp;c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、合并数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)); <span class="comment">//[&quot;w&quot;, &quot;x&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [&quot;w&quot;, &quot;x&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、提取数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;z&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="comment">// 提取索引从1到最后的所有元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.slice(<span class="number">1</span>)); <span class="comment">// [&quot;x&quot;, &quot;c&quot;, &quot;v&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// 提取索引从2到4的所有元素（包括2，不包括4）</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.slice(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// [&quot;c&quot;, &quot;v&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、删除数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引为2的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr4.splice(<span class="number">2</span>, <span class="number">1</span>)); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>join()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、分隔符转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">//w,x,c</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&quot;&amp;&quot;</span>)); <span class="comment">// w&amp;x&amp;c</span></span><br></pre></td></tr></table></figure></li><li><p><strong>concat()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、合并数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)); <span class="comment">//[&quot;w&quot;, &quot;x&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [&quot;w&quot;, &quot;x&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>slice()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、数组转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> arrr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;1a&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arrr.toString()); <span class="comment">//1,2,a,1a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、分隔符转换为字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.join()); <span class="comment">//w,x,c</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&quot;&amp;&quot;</span>)); <span class="comment">// w&amp;x&amp;c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、合并数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)); <span class="comment">//[&quot;w&quot;, &quot;x&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [&quot;w&quot;, &quot;x&quot;, &quot;c&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、提取数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;z&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="comment">// 提取索引从1到最后的所有元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.slice(<span class="number">1</span>)); <span class="comment">// [&quot;x&quot;, &quot;c&quot;, &quot;v&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// 提取索引从2到4的所有元素（包括2，不包括4）</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.slice(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// [&quot;c&quot;, &quot;v&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、删除数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引为2的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr4.splice(<span class="number">2</span>, <span class="number">1</span>)); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>splice()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5、删除数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引为2的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr4.splice(<span class="number">2</span>, <span class="number">1</span>)); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="12-4-字符串对象"><a href="#12-4-字符串对象" class="headerlink" title="12.4 字符串对象"></a>12.4 字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>​ 为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number 和 Boolean。</p><p>基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</span><br></pre></td></tr></table></figure><p>js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;andy&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>​ 指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</span><br><span class="line">由于字符串的不可变，在**大量拼接字符串**的时候会有效率问题</span><br></pre></td></tr></table></figure><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><ul><li><p>每个字符也有位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;改革春风吹满地&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">//7</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">0</span>]); <span class="comment">// 改</span></span><br></pre></td></tr></table></figure></li><li><p>字符串.indexOf(要查找的字符，开始查找的位置)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;改革春风吹满地&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> re = str.indexOf(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re); <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re1 = str.indexOf(<span class="string">&quot;春&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re1); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p>案例 1：查找字符串”abcoefoxyozzopp”中所有 o 出现的位置以及次数</p><ul><li>先查找第一个 o 出现的位置</li><li>然后 只要 indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为 indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加 1，从而继续查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.indexOf(<span class="string">&quot;o&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">  count++;</span><br><span class="line">  index = str.indexOf(<span class="string">&quot;o&quot;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;o出现的次数是&quot;</span> + count);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for (var i = index; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//     if(index == -1) &#123;</span></span><br><span class="line"><span class="comment">//         break</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     console.log(index);</span></span><br><span class="line"><span class="comment">//     count++;</span></span><br><span class="line"><span class="comment">//     index = str.indexOf(&#x27;o&#x27; ,index + 1)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>案例 2：查找数组 [‘red’,’blue’,’red’,’green’,’pink’,’red’],求 red 出现的位置和次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;red&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index1);</span><br><span class="line">  count++;</span><br><span class="line">  index = arr.indexOf(<span class="string">&quot;red&quot;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;red出现的次数是&quot;</span> + count);</span><br></pre></td></tr></table></figure></li></ul><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><ul><li><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符（index 字符串的索引号）</td></tr><tr><td>charCodeAt(index)</td><td>返回指定位置出字符串的 ASCII 码（index 索引号）</td></tr><tr><td>str[index]</td><td>获取指定位置出字符</td></tr></tbody></table><p>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = &#123;</span><br><span class="line">  name: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(andy[<span class="string">&quot;name&quot;</span>]); <span class="comment">//lisi</span></span><br><span class="line"><span class="built_in">console</span>.log(andy[<span class="string">&quot;age&quot;</span>]); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    通过一个对象记录每个字符出现的次数（字符作属性名，出现次数作值）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = &#123;&#125;;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 获取每一个字符</span></span><br><span class="line">  <span class="keyword">var</span> chars = str.charAt(i);</span><br><span class="line">  <span class="comment">// 判断对象中是否有这个属性</span></span><br><span class="line">  <span class="keyword">if</span> (n[chars]) &#123;</span><br><span class="line">    n[chars]++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    n[chars] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ch = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n[k] &gt; max) &#123;</span><br><span class="line">    max = n[k];</span><br><span class="line">    ch = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;出现次数最多的字符是&quot;</span> + ch + <span class="string">&quot;, 出现了&quot;</span> + max + <span class="string">&quot;次&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>​ 字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9B%BE%E7%89%8710.png"></p><ul><li><p><strong>concat</strong>(‘字符串 1’,’字符串 2’,…)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">&quot;red&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>substr</strong>(‘截取的起始位置’,’截取几个字符’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;那是看出三分&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1.substr(<span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure></li></ul><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>​ <strong>replace(‘被替换的字符’,’替换为的字符串’)</strong> 他只会替换第一个字符，其使用格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;andyandy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li><p>案例：有个字符串 ‘abcoefoxyozzopp’ 把里面所有的 0 替换为 &amp;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcoefoxyozzopp&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (str.indexOf(<span class="string">&quot;o&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">  str = str.replace(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></li></ul><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split() 方法"></a>split() 方法</h4><p>​ 字符转换为数组 **split(‘分隔符’)**，其使用格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;red,blue,pink&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;red,blue,pink&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&quot;&amp;&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h4><ul><li><p>toUpperCase()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str4.toUpperCase());</span><br></pre></td></tr></table></figure></li><li><p>toLowerCase()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str5.toLowerCase());</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-简单数据类型和复杂数据类型"><a href="#13-简单数据类型和复杂数据类型" class="headerlink" title="13. 简单数据类型和复杂数据类型"></a>13. 简单数据类型和复杂数据类型</h2><h3 id="13-1-简单数据类型"><a href="#13-1-简单数据类型" class="headerlink" title="13.1 简单数据类型"></a>13.1 简单数据类型</h3><p>​ <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括 string ，number，boolean，undefined，null</p><h3 id="13-2-复杂数据类型"><a href="#13-2-复杂数据类型" class="headerlink" title="13.2 复杂数据类型"></a>13.2 复杂数据类型</h3><p>​ 复杂数据类型（引用类型）：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date 等；</p><h3 id="13-3-堆栈"><a href="#13-3-堆栈" class="headerlink" title="13.3 堆栈"></a>13.3 堆栈</h3><ul><li><p>简单数据类型的存储方式</p><p>值类型变量的数据直接存放在变量（栈空间）中</p></li><li><p>复杂数据类型的存储方式</p><p>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p></li></ul><h3 id="13-4-简单类型传参"><a href="#13-4-简单类型传参" class="headerlink" title="13.4 简单类型传参"></a>13.4 简单类型传参</h3><p>​ 函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 值传递</span></span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">fn(x);</span><br><span class="line"><span class="built_in">console</span>.log(x)；</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9B%BE%E7%89%8714.png"></p><h3 id="13-5-复杂数据类型传参"><a href="#13-5-复杂数据类型传参" class="headerlink" title="13.5 复杂数据类型传参"></a>13.5 复杂数据类型传参</h3><p>​ 函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// x = p</span></span><br><span class="line">  <span class="built_in">console</span>.log(x.name); <span class="comment">// 2. 这个输出什么 ?</span></span><br><span class="line">  x.name = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x.name); <span class="comment">// 3. 这个输出什么 ?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// 1. 这个输出什么 ?</span></span><br><span class="line">f1(p);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// 4. 这个输出什么 ?</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="/images/%E5%9B%BE%E7%89%8715.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 总结</title>
      <link href="2020/02/18/jQuery/"/>
      <url>2020/02/18/jQuery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="1-jQuery-的基本使用"><a href="#1-jQuery-的基本使用" class="headerlink" title="1. jQuery 的基本使用"></a>1. jQuery 的基本使用</h2><h3 id="1-1-jQuery-的入口函数"><a href="#1-1-jQuery-的入口函数" class="headerlink" title="1.1 jQuery 的入口函数"></a>1.1 jQuery 的入口函数</h3><p>​ jQuery 中常见的两种入口函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...  <span class="comment">// 此处是页面 DOM 加载完成的入口</span></span><br><span class="line">&#125;) ;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   ...  <span class="comment">//  此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li><li>相当于原生 js 中的 DOMContentLoaded。</li><li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css 文件、图片加载完毕才执行内部代码。</li><li>更推荐使用第一种方式。</li></ol><h3 id="1-2-jQuery-中的顶级对象"><a href="#1-2-jQuery-中的顶级对象" class="headerlink" title="1.2 jQuery 中的顶级对象$"></a>1.2 jQuery 中的顶级对象$</h3><ul><li><p>$是 jQuery 的别称，在代码中可以使用 jQuery 代替，但一般为了方便，通常都直接使用 $ 。</p></li><li><p>$是 jQuery 的顶级对象，相当于原生 JavaScript 中的 window。把元素利用$包装成 jQuery 对象，就可以调用 jQuery 的方法。</p></li></ul><h3 id="1-3-jQuery-对象和-DOM-对象"><a href="#1-3-jQuery-对象和-DOM-对象" class="headerlink" title="1.3 jQuery 对象和 DOM 对象"></a>1.3 jQuery 对象和 DOM 对象</h3><p>​ 使用 jQuery 方法和原生 JS 获取的元素是不一样的，总结如下 :</p><ol><li>用原生 JS 获取来的对象就是 DOM 对象</li><li>jQuery 方法获取的元素就是 jQuery 对象。</li><li>jQuery 对象本质是： 利用$对 DOM 对象包装后产生的对象（伪数组形式存储）。</li></ol><blockquote><p>注意：</p><p>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p></blockquote><h3 id="1-4-jQuery-对象和-DOM-对象转换"><a href="#1-4-jQuery-对象和-DOM-对象转换" class="headerlink" title="1.4 jQuery 对象和 DOM 对象转换"></a>1.4 jQuery 对象和 DOM 对象转换</h3><ul><li><p>DOM 对象转换为 jQuery 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;DOM对象&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>jQuery 对象转换为 DOM 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;DOM对象&quot;</span>)[索引号];</span><br><span class="line">或;</span><br><span class="line">$(<span class="string">&quot;DOM对象&quot;</span>).get(索引号);</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=<span class="string">&quot;./mov.mp4&quot;</span> muted&gt;&lt;/video&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/* 1.DOM 对象转换为 jQuery 对象 */</span></span><br><span class="line">    <span class="comment">// (1) 我们直接获取视频，得到的就是 jQuery 对象</span></span><br><span class="line">    $(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">    <span class="comment">// (2) 我们使用原生 js 获取过来 DOM 对象</span></span><br><span class="line">    <span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    $(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2. jQuery 对象转换为 DOM 对象 */</span></span><br><span class="line">    $(<span class="string">&quot;video&quot;</span>)[<span class="number">0</span>].play();</span><br><span class="line">    $(<span class="string">&quot;video&quot;</span>).get(<span class="number">0</span>).play();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-jQuery-选择器"><a href="#2-jQuery-选择器" class="headerlink" title="2. jQuery 选择器"></a>2. jQuery 选择器</h2><h3 id="2-1-知识铺垫"><a href="#2-1-知识铺垫" class="headerlink" title="2.1 知识铺垫"></a>2.1 知识铺垫</h3><ul><li>jQuery 设置样式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;属性&quot;</span>, <span class="string">&quot;值&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>jQuery 里面的排他思想</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</span></span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">$(<span class="built_in">this</span>).siblings().css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>隐式迭代</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</span></span><br><span class="line"><span class="comment">// 简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).hide(); <span class="comment">// 页面中所有的div全部隐藏，不用循环操作</span></span><br></pre></td></tr></table></figure><ul><li>链式编程</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式编程是为了节省代码量，看起来更优雅。</span></span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>).sibling().css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-基础选择器"><a href="#2-2-基础选择器" class="headerlink" title="2.2 基础选择器"></a>2.2 基础选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;选择器&quot;</span>); <span class="comment">//  里面选择器直接写 CSS 选择器即可，但是要加引号</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID 选择器</td><td>$(“#id”)</td><td>获取指定 ID 的元素</td></tr><tr><td>全选择器</td><td>$(“*“)</td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td>$(“.class”)</td><td>获取同一类 class 的元素</td></tr><tr><td>标签选择器</td><td>$(“div”)</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”)</td><td>选取多个元素</td></tr><tr><td>交集选择器</td><td>$(“li.current”)</td><td>交集元素</td></tr></tbody></table><h3 id="2-3-层级选择器"><a href="#2-3-层级选择器" class="headerlink" title="2.3 层级选择器"></a>2.3 层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”)</td><td>使用&gt;号，获取亲儿子层级的元素，并不会获取孙子的层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”)</td><td>使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子</td></tr></tbody></table><p>基础选择器和层级选择器案例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;惊喜不，意外不&lt;/div&gt;</span><br><span class="line">&lt;div&gt;惊喜不，意外不&lt;/div&gt;</span><br><span class="line">&lt;div&gt;惊喜不，意外不&lt;/div&gt;</span><br><span class="line">&lt;div&gt;惊喜不，意外不&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;相同的操作&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;相同的操作&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;相同的操作&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 获取四个div元素</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 给四个div设置背景颜色为粉色 jquery对象不能使用style</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 隐式迭代就是把匹配的所有元素内部进行遍历循环，给每一个元素添加css这个方法</span></span><br><span class="line">    $(<span class="string">&quot;ul li&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-筛选选择器"><a href="#2-4-筛选选择器" class="headerlink" title="2.4 筛选选择器"></a>2.4 筛选选择器</h3><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(“li:first”)</td><td>获取第一个 li 元素</td></tr><tr><td>:last</td><td>$(“li:last”)</td><td>获取最后一个 li 元素</td></tr><tr><td>:eq(index)</td><td>$(“li:eq(2)”)</td><td>获取到的 li 元素中，选择索引号为 2 的元素，索引号 index 从 0 开始</td></tr><tr><td>:odd</td><td>$(“li:odd”)</td><td>获取到的 li 元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”)</td><td>获取到的 li 元素中，选择索引号为偶数的元素</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;多个里面筛选几个&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;ul li:first&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;ul li:eq(2)&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;ol li:odd&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;ol li:even&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>重点</strong></p><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>parent()</td><td>$(“li”).parent()</td><td>查找父级</td></tr><tr><td>parents()</td><td>$(“li”).parents()</td><td>查找祖先</td></tr><tr><td>children(selector)</td><td>$(“ul”).children(‘li’)</td><td>相当于$(‘ul&gt;li’),最近一级(亲儿子)</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(‘li’)</td><td>相当于$(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“.first”).siblings(‘li’)</td><td>查找兄弟节点，不包括自己本身</td></tr><tr><td>nextAll([expr])</td><td>$(“.first”).nextAll()</td><td>查找当前元素之后所有的同辈元素</td></tr><tr><td>prevtAll([expr])</td><td>$(“.last”).prevtAll()</td><td>查找当前元素之前所有的同辈元素</td></tr><tr><td>hasClass(class)</td><td>$(“div”).hasClass(‘protected’)</td><td>检查当前元素是否有某个特定的类，如果有，则返回 ture</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2)</td><td>相当于$(‘li:eq(2)’),index 从 0 开始</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;我是大写P&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;我是小写p&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// (1) 亲儿子 children()  类似子代选择器  ul&gt;li</span></span><br><span class="line">        $(<span class="string">&quot;.nav&quot;</span>).children(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">// (2) 可以选里面所有的孩子 包括儿子和孙子  find() 类似于后代选择器</span></span><br><span class="line">        $(<span class="string">&quot;.nav&quot;</span>).find(<span class="string">&quot;p&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span>&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;我是ol 的li&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;current&quot;</span>&gt;俺有current&lt;/div&gt;</span><br><span class="line">&lt;div&gt;俺木有current&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 注意一下都是方法 带括号</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 兄弟元素siblings 除了自身元素之外的所有亲兄弟</span></span><br><span class="line">        $(<span class="string">&quot;ol .item&quot;</span>).siblings(<span class="string">&quot;li&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 第n个元素</span></span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// (1) 我们可以利用选择器的方式选择</span></span><br><span class="line">        $(<span class="string">&quot;ul li:eq(2)&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;ul li:eq(&quot;</span>+index+<span class="string">&quot;)&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">// (2) 我们可以利用选择方法的方式选择 更推荐这种写法</span></span><br><span class="line">        $(<span class="string">&quot;ul li&quot;</span>).eq(<span class="number">2</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;ul li&quot;</span>).eq(index).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 判断是否有某个类名</span></span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="string">&quot;div:first&quot;</span>).hasClass(<span class="string">&quot;current&quot;</span>));</span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="string">&quot;div:last&quot;</span>).hasClass(<span class="string">&quot;current&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-属性选择器"><a href="#2-5-属性选择器" class="headerlink" title="2.5 属性选择器"></a>2.5 属性选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;[href]&quot;</span>); <span class="comment">//查询含有href属性的标签</span></span><br><span class="line">$(<span class="string">&quot;[href=&#x27;#&#x27;]&quot;</span>); <span class="comment">//查询href=#的标签</span></span><br><span class="line">$(<span class="string">&quot;a[href=&#x27;#&#x27;]&quot;</span>); <span class="comment">//查询href属性的值是#的a标签</span></span><br></pre></td></tr></table></figure><h3 id="2-6-表单选择器"><a href="#2-6-表单选择器" class="headerlink" title="2.6 表单选择器"></a>2.6 表单选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：$(<span class="string">&quot;:input标签的type属性的值&quot;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;:text&quot;</span>) <span class="comment">//表示获取type=&#x27;text&#x27;的input标签</span></span><br><span class="line">$(<span class="string">&quot;:password&quot;</span>) <span class="comment">//表示获取type=&#x27;password&#x27;的input标签</span></span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>) <span class="comment">//表示获取type=&#x27;checkbox&#x27;的input标签</span></span><br></pre></td></tr></table></figure><h3 id="2-7-值选择器"><a href="#2-7-值选择器" class="headerlink" title="2.7 值选择器"></a>2.7 值选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:checked  用于获取选中的单选框或者复选框</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;:radio:checked&quot;</span>)  <span class="comment">//获取被选中的单选框</span></span><br><span class="line">$(<span class="string">&quot;:checkbox:checked&quot;</span>)  <span class="comment">//获取被选中的复选框</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:selected   获取被选中的下拉框</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;select&gt;option:selected&quot;</span>)   <span class="comment">//获取被选中的下拉框option标签</span></span><br></pre></td></tr></table></figure><h3 id="2-5-案例：淘宝服饰精品案例"><a href="#2-5-案例：淘宝服饰精品案例" class="headerlink" title="2.5 案例：淘宝服饰精品案例"></a>2.5 案例：淘宝服饰精品案例</h3><p>思路分析: 1.核心原理：鼠标经过左侧盒子某个小 li，就让内容区盒子相对应图片显示，其余的图片隐藏。 2.需要得到当前小 li 的索引号，就可以显示对应索引号的图片<br>3.jQuery 得到当前元素索引号 $(this).index() 4.中间对应的图片，可以通过 eq(index) 方法去选择 5.显示元素 show() 隐藏元素 hide()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 1. 鼠标经过左侧的小li</span></span><br><span class="line">    $(<span class="string">&quot;#left li&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 2. 得到当前小li 的索引号</span></span><br><span class="line">      <span class="keyword">var</span> index = $(<span class="built_in">this</span>).index();</span><br><span class="line">      <span class="comment">// 3. 让我们右侧的盒子相应索引号的图片显示出来就好了</span></span><br><span class="line">      <span class="comment">// $(&quot;#content div&quot;).eq(index).show();</span></span><br><span class="line">      <span class="comment">// 4. 让其余的图片（就是其他的兄弟）隐藏起来</span></span><br><span class="line">      <span class="comment">// $(&quot;#content div&quot;).eq(index).siblings().hide();</span></span><br><span class="line">      <span class="comment">// 链式编程</span></span><br><span class="line">      $(<span class="string">&quot;#content div&quot;</span>).eq(index).show().siblings().hide();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-jQuery-样式操作"><a href="#3-jQuery-样式操作" class="headerlink" title="3 jQuery 样式操作"></a>3 jQuery 样式操作</h2><p>jQuery 中常用的样式操作有两种：css() 和 设置类样式方法</p><h3 id="3-1-方法-1-操作-css-方法"><a href="#3-1-方法-1-操作-css-方法" class="headerlink" title="3.1 方法 1: 操作 css 方法"></a>3.1 方法 1: 操作 css 方法</h3><p>​ jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。</p><p>​ 常用以下三种形式 :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.参数只写属性名，则是返回属性值</span></span><br><span class="line"><span class="keyword">var</span> strColor = $(<span class="built_in">this</span>).css(<span class="string">&#x27;color&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.  参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</span></span><br><span class="line">$(<span class="built_in">this</span>).css(<span class="string">&#x27;&#x27;</span>color<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>red<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.  参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号</span></span><br><span class="line">$(<span class="built_in">this</span>).css(&#123; <span class="string">&quot;color&quot;</span>:<span class="string">&quot;white&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;20px&quot;</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​ 注意：css() 多用于样式少时操作，多了则不太方便。</p><h3 id="3-2-方法-2-设置类样式方法"><a href="#3-2-方法-2-设置类样式方法" class="headerlink" title="3.2 方法 2: 设置类样式方法"></a>3.2 方法 2: 设置类样式方法</h3><p>​ 作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><p>​ 常用的三种设置类样式方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.添加类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).addClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.删除类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).removeClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.切换类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).toggleClass(<span class="string">&quot;current&quot;</span>);</span><br></pre></td></tr></table></figure><p>​ 注意：</p><ol><li>设置类样式方法比较适合样式多时操作，可以弥补 css()的不足。</li><li>原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</li></ol><h3 id="3-3-案例：tab-栏切换"><a href="#3-3-案例：tab-栏切换" class="headerlink" title="3.3 案例：tab 栏切换"></a>3.3 案例：tab 栏切换</h3><p>思路分析: 1.点击上部的 li，当前 li 添加 current 类，其余兄弟移除类。 2.点击的同时，得到当前 li 的索引号 3.让下部里面相应索引号的 item 显示，其余的 item 隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tab&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tab_list&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;current&quot;</span>&gt;商品介绍&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;规格与包装&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;售后保障&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;商品评价（<span class="number">50000</span>）&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;手机社区&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;tab_con&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span> style=<span class="string">&quot;display: block;&quot;</span>&gt;</span><br><span class="line">            商品介绍模块内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">            规格与包装模块内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">            售后保障模块内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">            商品评价（<span class="number">50000</span>）模块内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span>&gt;</span><br><span class="line">            手机社区模块内容</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 1.点击上部的li，当前li 添加current类，其余兄弟移除类</span></span><br><span class="line">        $(<span class="string">&quot;.tab_list li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 链式编程操作</span></span><br><span class="line">            $(<span class="built_in">this</span>).addClass(<span class="string">&quot;current&quot;</span>).siblings().removeClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.点击的同时，得到当前li 的索引号</span></span><br><span class="line">            <span class="keyword">var</span> index = $(<span class="built_in">this</span>).index();</span><br><span class="line">            <span class="comment">// 3.让下部里面相应索引号的item显示，其余的item隐藏</span></span><br><span class="line">            $(<span class="string">&quot;.tab_con .item&quot;</span>).eq(index).show().siblings().hide();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-jQuery-效果"><a href="#4-jQuery-效果" class="headerlink" title="4 jQuery 效果"></a>4 jQuery 效果</h2><p>jQuery 给我们封装了很多动画效果，最为常见的如下：</p><ul><li>显示隐藏：show() / hide() / toggle() ;</li><li>划入画出：slideDown() / slideUp() / slideToggle() ;</li><li>淡入淡出：fadeIn() / fadeOut() / fadeToggle() / fadeTo() ;</li><li>自定义动画：animate() ;</li></ul><blockquote><p>注意：</p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>jQuery 为我们提供另一个方法，可以停止动画排队：stop() ;</p></blockquote><h3 id="4-1-显示隐藏"><a href="#4-1-显示隐藏" class="headerlink" title="4.1 显示隐藏"></a>4.1 显示隐藏</h3><ol><li><p>显示语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li><li><p>隐藏语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hide([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li><li><p>切换语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toggle([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li></ol><p>参数：</p><p>​ （1）参数都可以省略， 无动画直接显示。</p><p>​ （2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>​ （3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>​ （4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><p>建议：平时一般不带参数，直接显示隐藏即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;显示&lt;/button&gt;</span><br><span class="line">&lt;button&gt;隐藏&lt;/button&gt;</span><br><span class="line">&lt;button&gt;切换&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).show(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;显示&#x27;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).hide(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;隐藏&#x27;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).toggle(<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-滑入滑出"><a href="#4-2-滑入滑出" class="headerlink" title="4.2 滑入滑出"></a>4.2 滑入滑出</h3><ol><li><p>下滑语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slideDown([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li><li><p>上滑语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slideUp([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li><li><p>滑动切换语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slideToggle([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li></ol><p>参数</p><p>​ （1）参数都可以省略。</p><p>​ （2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>​ （3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>​ （4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;下拉滑动&lt;/button&gt;</span><br><span class="line">&lt;button&gt;上拉滑动&lt;/button&gt;</span><br><span class="line">&lt;button&gt;切换滑动&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).slideDown();</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).slideUp(<span class="number">500</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).slideToggle(<span class="number">500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-淡入淡出"><a href="#4-3-淡入淡出" class="headerlink" title="4.3 淡入淡出"></a>4.3 淡入淡出</h3><ol><li><p>淡入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeIn([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li><li><p>淡出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeOut([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li><li><p>淡入淡出切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeToggle([speed, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li></ol><p>参数：</p><p>​ （1）参数都可以省略。</p><p>​ （2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</p><p>​ （3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>​ （4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><ol><li><p>渐进方式调整到指定的不透明度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeTo([[speed], opacity, [easing], [fn]]);</span><br></pre></td></tr></table></figure></li></ol><p>参数：</p><p>​ （1）opacity 透明度必须写，取值 0~1 之间。</p><p>​ （2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。<strong>必须写</strong></p><p>​ （3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>​ （4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;淡入效果&lt;/button&gt;</span><br><span class="line">&lt;button&gt;淡出效果&lt;/button&gt;</span><br><span class="line">&lt;button&gt;淡入淡出切换&lt;/button&gt;</span><br><span class="line">&lt;button&gt;修改透明度&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 淡入 fadeIn()</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 淡出 fadeOut()</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 淡入淡出切换 fadeToggle()</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).fadeToggle(<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).fadeTo(<span class="number">1000</span>, <span class="number">0.5</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-4-自定义动画"><a href="#4-4-自定义动画" class="headerlink" title="4.4 自定义动画"></a>4.4 自定义动画</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animate(params, [speed], [easing], [fn]);</span><br></pre></td></tr></table></figure><p>参数：</p><p>​ （1）params: 想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。</p><p>​ （2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如:1000)。</p><p>​ （3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>​ （4）fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;自定义动画&lt;/button&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">                left: <span class="number">500</span>,</span><br><span class="line">                top: <span class="number">300</span>,</span><br><span class="line">                opacity: <span class="number">.4</span>,</span><br><span class="line">                width: <span class="number">500</span></span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-5-停止动画排队"><a href="#4-5-停止动画排队" class="headerlink" title="4.5 停止动画排队"></a>4.5 停止动画排队</h3><p>​ 动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>​ 停止动画排队的方法为：stop() ;</p><ul><li>stop() 方法用于停止动画或效果。</li><li>stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</li></ul><p>​ 总结: 每次使用动画之前，先调用 stop() ,在调用动画。</p><h3 id="4-6-事件切换"><a href="#4-6-事件切换" class="headerlink" title="4.6 事件切换"></a>4.6 事件切换</h3><p>jQuery 中为我们添加了一个新事件 hover() ; 功能类似 css 中的伪类 :hover 。介绍如下</p><p><strong>语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hover([over,]out)     <span class="comment">// 其中over和out为两个函数</span></span><br></pre></td></tr></table></figure><ul><li>over:鼠标移到元素上要触发的函数（相当于 mouseenter）</li><li>out:鼠标移出元素要触发的函数（相当于 mouseleave）</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><h4 id="新浪下拉菜单案例"><a href="#新浪下拉菜单案例" class="headerlink" title="新浪下拉菜单案例"></a><strong>新浪下拉菜单案例</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;微博&lt;/a&gt;</span><br><span class="line">            &lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;微博&lt;/a&gt;</span><br><span class="line">            &lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/* 方法一 */</span></span><br><span class="line">            <span class="comment">// 鼠标经过</span></span><br><span class="line">            $(<span class="string">&quot;.nav&gt;li&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// $(this) jQuery 当前元素  this不要加引号</span></span><br><span class="line">                <span class="comment">// show() 显示元素  hide() 隐藏元素</span></span><br><span class="line">                $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideDown(<span class="number">200</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 鼠标离开</span></span><br><span class="line">            $(<span class="string">&quot;.nav&gt;li&quot;</span>).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideUp(<span class="number">200</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">/* 方法二 */</span>  （推荐使用）</span><br><span class="line">            <span class="comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span></span><br><span class="line">            $(<span class="string">&quot;.nav&gt;li&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideDown(<span class="number">200</span>);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideUp(<span class="number">200</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">/* 方法三 */</span></span><br><span class="line">            <span class="comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span></span><br><span class="line">            $(<span class="string">&quot;.nav&gt;li&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).children(<span class="string">&quot;ul&quot;</span>).stop().slideToggle();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="4-7-案例：王者荣耀手风琴效果-★"><a href="#4-7-案例：王者荣耀手风琴效果-★" class="headerlink" title="4.7 **案例：王者荣耀手风琴效果 ** ★"></a>4.7 **案例：王者荣耀手风琴效果 ** ★</h3><blockquote><p>思路分析:</p><p>鼠标移动到当前 li 标签的时候</p><p>1.先将其他 li 标签的宽度还原成 69 像素，然后显示小图，隐藏大图</p><p>2.将当前 li 标签的宽度设置成 224 像素，然后显示大图，隐藏小图</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;king&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;current&quot;</span>&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;m1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/m.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/l1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/l.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/c1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/c.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/w1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/w.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/z1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/z.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/h1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/h.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;#&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/t1.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;small&quot;</span>&gt;</span><br><span class="line">                &lt;img src=<span class="string">&quot;images/t.png&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;big&quot;</span>&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.king li&quot;</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).siblings().stop().animate(&#123;</span><br><span class="line">                    width: <span class="number">69</span></span><br><span class="line">                &#125;).find(<span class="string">&#x27;.small&#x27;</span>).stop().fadeIn().siblings(<span class="string">&#x27;.big&#x27;</span>).stop().fadeOut();</span><br><span class="line">            $(<span class="built_in">this</span>).stop().animate(&#123;</span><br><span class="line">                    width: <span class="number">224</span></span><br><span class="line">            &#125;).find(<span class="string">&#x27;.small&#x27;</span>).stop().fadeOut().siblings(<span class="string">&#x27;.big&#x27;</span>).stop().fadeIn();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="5-jQuery-属性操作"><a href="#5-jQuery-属性操作" class="headerlink" title="5 jQuery 属性操作"></a>5 jQuery 属性操作</h2><p>jQuery 常用属性操作有三种：prop() / attr() / data() ;</p><h3 id="5-1-元素固有属性值-prop"><a href="#5-1-元素固有属性值-prop" class="headerlink" title="5.1 元素固有属性值 prop()"></a>5.1 元素固有属性值 prop()</h3><ol><li><p>获取属性语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prop(<span class="string">&#x27;&#x27;</span>属性<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>设置属性语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prop(<span class="string">&#x27;&#x27;</span>属性<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>属性值<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-设置或获取元素自定义属性值-attr"><a href="#5-2-设置或获取元素自定义属性值-attr" class="headerlink" title="5.2 设置或获取元素自定义属性值 attr()"></a>5.2 设置或获取元素自定义属性值 attr()</h3><ol><li><p>获取属性语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attr(<span class="string">&#x27;&#x27;</span>属性<span class="string">&#x27;&#x27;</span>)      <span class="comment">// 类似原生 getAttribute()</span></span><br></pre></td></tr></table></figure></li><li><p>设置属性语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attr(<span class="string">&#x27;&#x27;</span>属性<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>属性值<span class="string">&#x27;&#x27;</span>)   <span class="comment">// 类似原生 setAttribute()</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-数据缓存-data"><a href="#5-3-数据缓存-data" class="headerlink" title="5.3 数据缓存 data()"></a>5.3 数据缓存 data()</h3><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。</p><ol><li><p>附加数据语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data(<span class="string">&#x27;&#x27;</span>name<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>value<span class="string">&#x27;&#x27;</span>)   <span class="comment">// 向被选元素附加数据</span></span><br></pre></td></tr></table></figure></li><li><p>获取数据语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date(<span class="string">&#x27;&#x27;</span>name<span class="string">&#x27;&#x27;</span>)             <span class="comment">//   向被选元素获取数据</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-jQuery-文本属性值"><a href="#6-jQuery-文本属性值" class="headerlink" title="6 jQuery 文本属性值"></a>6 jQuery 文本属性值</h2><p>jQuery 的文本属性值常见操作有三种：html() / text() / val() ; 分别对应 JS 中的 innerHTML 、innerText 和 value 属性。</p><ol><li><p>普通元素内容 html()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html(); <span class="comment">//获取元素的内容</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html(<span class="string">&quot;内容&quot;</span>); <span class="comment">//设置元素的内容</span></span><br></pre></td></tr></table></figure></li><li><p>普通元素文本内容 text()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text(); <span class="comment">//获取元素的文本内容</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text(<span class="string">&quot;文本内容&quot;</span>); <span class="comment">//设置元素的内容</span></span><br></pre></td></tr></table></figure></li><li><p>表单的值 val()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val(); <span class="comment">//获取表单的值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val(<span class="string">&quot;内容&quot;</span>); <span class="comment">//设置表单的值</span></span><br></pre></td></tr></table></figure><p>注意：html() 可识别标签，text() 不识别标签。</p></li></ol><h2 id="7-jQuery-元素操作"><a href="#7-jQuery-元素操作" class="headerlink" title="7 jQuery 元素操作"></a>7 jQuery 元素操作</h2><h3 id="7-1-遍历元素"><a href="#7-1-遍历元素" class="headerlink" title="7.1 遍历元素"></a>7.1 遍历元素</h3><p>语法 1（这个更好用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, domEle</span>) </span>&#123; xxx; &#125;）</span><br></pre></td></tr></table></figure><ol><li>each() 方法遍历匹配的每一个元素。主要用 DOM 处理。 each 每一个</li><li>里面的回调函数有 2 个参数： index 是每个元素的索引号; <strong>demEle 是每个 DOM 元素对象，不是 jquery 对象</strong></li><li>所以要想使用 jquery 方法，需要给这个 dom 元素转换为 jquery 对象 $(domEle)</li></ol><p>语法 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.each(object，<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123; xxx; &#125;）</span><br></pre></td></tr></table></figure><h3 id="7-2-创建元素"><a href="#7-2-创建元素" class="headerlink" title="7.2 创建元素"></a>7.2 创建元素</h3><p>动态创建一个<li></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;&#x27;</span>&lt;li&gt;&lt;/li&gt;<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="7-3-添加元素"><a href="#7-3-添加元素" class="headerlink" title="7.3 添加元素"></a>7.3 添加元素</h3><ol><li><p>内部添加元素，生成之后，他们是父子关系</p><ul><li><p>把内容放入匹配元素内部最后面，类似原生 appendChild</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.append(<span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>把内容放入匹配元素内部最前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.prepend(<span class="string">&quot;内容&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>外部添加元素，生成之后，他们是兄弟关系</p><ul><li>```js<br>element.after(“内容”); //把内容放在目标元素后面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  element.before(&quot;内容&quot;); &#x2F;&#x2F;把内容放在目标元素前面</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="7-4-删除元素"><a href="#7-4-删除元素" class="headerlink" title="7.4 删除元素"></a>7.4 删除元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.remove(); <span class="comment">//  删除匹配的元素（本身）</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.empty(); <span class="comment">//  删除匹配的元素集合中所有的子节点</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.html(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;&#x27;</span>)   <span class="comment">//  清空匹配的元素内容</span></span><br></pre></td></tr></table></figure><p>①remove 删除元素本身。</p><p>②empt() 和 html(‘’’’) 作用等价，都可以删除元素里面的内容，只不过 html 还可以设置内容。</p><h2 id="8-jQuery-尺寸、位置操作"><a href="#8-jQuery-尺寸、位置操作" class="headerlink" title="8 jQuery 尺寸、位置操作"></a>8 jQuery 尺寸、位置操作</h2><h3 id="8-1-jQuery-尺寸操作"><a href="#8-1-jQuery-尺寸操作" class="headerlink" title="8.1 jQuery 尺寸操作"></a>8.1 jQuery 尺寸操作</h3><table><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width() / height()</td><td>取得匹配元素宽度和高度值，只算 width / height</td></tr><tr><td>innerWidth() / innerHeight()</td><td>取得匹配元素宽度和高度值，包含 padding</td></tr><tr><td>outerWidth() / outerHeight()</td><td>取得匹配元素宽度和高度值，包含 padding、border</td></tr><tr><td>outerWidth(true) / outerHeight(true)</td><td>取得匹配元素宽度和高度值，包含 padding、border、margin</td></tr></tbody></table><ul><li>以上参数为空，则是获取相应值，返回的是数字型</li><li>如果参数是数字，则是修改相应值</li><li>参数可以不必写单位</li></ul><h3 id="8-2-jQuery-位置操作"><a href="#8-2-jQuery-位置操作" class="headerlink" title="8.2 jQuery 位置操作"></a>8.2 jQuery 位置操作</h3><ol><li><strong>offset()</strong> 设置或获取元素偏移</li></ol><ul><li><p>offset() 方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。</p></li><li><p>该方法有 2 个属性 left、top 。<strong>offset().top 用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离</strong>。</p></li><li><p>可以设置元素的偏移：offset({top: 10, left: 30 });</p></li></ul><ol start="2"><li><strong>position()</strong> 获取元素偏移</li></ol><ul><li><p>position() 方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级都没有定位，则以文档为准。</p></li><li><p>该方法有 2 个属性 left、top。<strong>position().top 用于获取距离定位父级顶部的距离，position().left 用于获取距离定位父级左侧的距离。</strong></p></li><li><p>该方法只能获取。</p></li></ul><ol start="3"><li>**scrollTop()/scrollLeft()**设置或获取元素被卷去的头部和左侧</li></ol><ul><li><p>scrollTop() 方法设置或返回被选元素被卷去的头部。</p></li><li><p>不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。</p></li></ul><h4 id="案例：带有动画的返回顶部-★"><a href="#案例：带有动画的返回顶部-★" class="headerlink" title="案例：带有动画的返回顶部 ★"></a>案例：带有动画的返回顶部 ★</h4><blockquote><p>需求 1：蓝色 div 滚动到浏览器顶部时显示返回顶部按钮</p><p>需求 2：点击返回顶部按钮，滚轮滚动到浏览器顶部</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;back&quot;</span>&gt;返回顶部&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文档顶部的距离</span></span><br><span class="line">        <span class="keyword">var</span> top = $(<span class="string">&quot;.container&quot;</span>).offset().top;</span><br><span class="line">        <span class="comment">// 监听滚动条滚动</span></span><br><span class="line">        $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果超出了top值就让返回顶部的div显示</span></span><br><span class="line">            <span class="keyword">if</span> ($(<span class="built_in">document</span>).scrollTop() &gt;= top) &#123;</span><br><span class="line">                $(<span class="string">&quot;.back&quot;</span>).fadeIn();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;.back&quot;</span>).fadeOut();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;.back&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;body html&quot;</span>).stop().animate(&#123;</span><br><span class="line">                scrollTop: <span class="number">0</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="案例：电梯导航-★★"><a href="#案例：电梯导航-★★" class="headerlink" title="案例：电梯导航 ★★"></a>案例：电梯导航 ★★</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fixedtool&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;current&quot;</span>&gt;家用电器&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;手机通讯&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;电脑办公&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;精品家具&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//节流阀：如果falg的值是true，那么滚动条的滚动事件可以执行，如果false不能执行。</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">/*需求1：显示隐藏电梯按钮。滚动滚动条时，如果滚动条滚出去的距离&gt;楼层区距离文档顶部的距离，就显示电梯按钮*/</span></span><br><span class="line">        <span class="comment">// 获取今日推荐(.recommend)div距离文档顶部的距离658px</span></span><br><span class="line">        <span class="keyword">var</span> top = $(<span class="string">&quot;.recommend&quot;</span>).offset().top;</span><br><span class="line">        $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果滚动条滚出去的距离超过658px就显示电梯导航(.fixedtool)div</span></span><br><span class="line">            <span class="keyword">if</span> ($(<span class="built_in">document</span>).scrollTop() &gt;= top) &#123;</span><br><span class="line">                $(<span class="string">&quot;.fixedtool&quot;</span>).fadeIn();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;.fixedtool&quot;</span>).fadeOut();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*需求2:点击电梯按钮，定位到指定楼层,并且给当前电梯按钮设置背景色*/</span></span><br><span class="line">        $(<span class="string">&quot;.fixedtool li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 把flag的值设置成false，这样滚动事件中的代码就不能执行了</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 获取导航的索引</span></span><br><span class="line">            <span class="keyword">var</span> index = $(<span class="built_in">this</span>).index();</span><br><span class="line">            <span class="comment">// 根据索引获取指定的楼层div距离文档顶部的距离</span></span><br><span class="line">            <span class="keyword">var</span> target = $(<span class="string">&quot;.floor&gt;div&quot;</span>).eq(index).offset().top;</span><br><span class="line">            <span class="comment">// 滚动到指定位置</span></span><br><span class="line">            $(<span class="string">&quot;html,body&quot;</span>).animate(&#123;</span><br><span class="line">                scrollTop: target</span><br><span class="line">            &#125;, <span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 给当前li标签添加背景样式(current)，其他li标签去掉背景样式</span></span><br><span class="line">            $(<span class="built_in">this</span>).addClass(<span class="string">&quot;current&quot;</span>).siblings().removeClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*需求3：滚动条滚动到指定楼层时，修改对应的电梯按钮的背景色*/</span></span><br><span class="line">        $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                $(<span class="string">&quot;.floor&gt;div&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, ele</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ($(<span class="built_in">window</span>.scrollTop() &gt;= $(ele).offset().top)) &#123;</span><br><span class="line">                        $(<span class="string">&quot;.fixedtool li&quot;</span>).eq(index).addClass(<span class="string">&quot;current&quot;</span>).siblings().removeClass(</span><br><span class="line">                            <span class="string">&quot;current&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="9-购物车案例"><a href="#9-购物车案例" class="headerlink" title="9 购物车案例"></a>9 购物车案例</h2><p><img src= "/img/loading.gif" data-lazy-src="/images/shop1.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/shop2.png"></p><p><img src= "/img/loading.gif" data-lazy-src="/images/shop3.png"></p><h3 id="9-1-步骤-1：全选"><a href="#9-1-步骤-1：全选" class="headerlink" title="9.1 步骤 1：全选"></a>9.1 步骤 1：全选</h3><blockquote><p>点击全选复选框，剩下的复选框自动选中。【全选按钮的 class=”checkall”,其他复选框的 class=”j-checkbox”】</p><p>上面和下面有两个全选复选框，要保持同步操作，例如：上面的全选复选框选中，下面的也要选中。</p></blockquote><p>分析：复选框控制选中状态是通过 checked 属性，该属性是固有属性，所以 jquery 操作该属性应该使用 prop 方法。</p><p>​ 我们只需要给全选复选框绑定(click 或者 change)事件，</p><p>​ 触发该事件后将当前全选复选的的 checked 的值获取到，赋值给其他复选框的 checked 属性即可</p><p>步骤</p><p>​ 1.给全选复选框绑定 click 或者 change 事件</p><p>​ 2.将全选复选框的选中状态赋值给 其他复选框和另一个全选复选框</p><p>​ 3.同步两个全选复选框的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.checkall&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前复选框的选中状态，把复选框的选中状态赋值给其他复选框</span></span><br><span class="line">    $(<span class="string">&quot;.j-checkbox,.checkall&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, $(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-2-步骤-2：小复选框不选中"><a href="#9-2-步骤-2：小复选框不选中" class="headerlink" title="9.2 步骤 2：小复选框不选中"></a>9.2 步骤 2：小复选框不选中</h3><blockquote><p>当点击其他复选框时，只要有一个没有选中，全选复选框就不选中。</p><p>如果其他复选框全部选中，全选复选框才会变成选中状态。</p></blockquote><p>分析：当我们每次点击小的复选框按钮，就来判断：</p><p>​ 如果小复选框被选中的个数等于 3 就应该把全选按钮选上，否则全选按钮不选。</p><p>新知识点：1.获取被选中的复选框使用值选择器:checked 选择器 :checked 表示查找被选中的表单元素。</p><p>​ 比如$(“[type=’checkbox’]:checked”) 表示获取被选中的复选框</p><p>​ 2.通过 jquery 设置复选框的选中状态 prop(“checked”,true)表示选中复选框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.j-checkbox&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断小复选框被选中的个数等于3 就应该把全选按钮选上，否则全选按钮不选。</span></span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">&quot;.j-checkbox:checked&quot;</span>).length === <span class="number">3</span>) &#123;</span><br><span class="line">      $(<span class="string">&quot;.checkall&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">&quot;.checkall&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-3-步骤-3：增减商品数量"><a href="#9-3-步骤-3：增减商品数量" class="headerlink" title="9.3 步骤 3：增减商品数量"></a>9.3 步骤 3：增减商品数量</h3><blockquote><p>当点击+号的时候修改当前+号前面文本框中的数量,让其自增 1 【加号按钮的 class=”increment”】</p><p>当点击-号的时候修改当前-号后面文本框的数量,让其自减 1 【减号按钮的 class=”decrement”】</p></blockquote><p>分析</p><p>​ -号、文本输入框、+号 三个标签是兄弟关系</p><p>新知识点</p><p>​ 获取和设置文本框输入框的值用 val()方法，不传参表示获取值，传参表示设置值</p><p>加号步骤</p><p>​ 1.给+好按钮绑定单击事件</p><p>​ 2.获取+前面输入框的值</p><p>​ 3.对值自增 1</p><p>​ 4.将自增后的值重新设置到输入框中</p><p>减号步骤</p><p>​ 1.给-好按钮绑定单击事件</p><p>​ 2.获取-后面输入框的值</p><p>​ 3.对值自减 1(要求：输入框中的值最小是 1)</p><p>​ 4.将自减后的值重新设置到输入框中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 给加号注册单击事件</span></span><br><span class="line">  $(<span class="string">&quot;.increment&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取加号前面的input输入框的值</span></span><br><span class="line">    <span class="keyword">var</span> num = $(<span class="built_in">this</span>).siblings(<span class="string">&quot;input&quot;</span>).val();</span><br><span class="line">    <span class="comment">// 值自增</span></span><br><span class="line">    num++;</span><br><span class="line">    <span class="comment">// 将自增后的值设置到输入框中</span></span><br><span class="line">    $(<span class="built_in">this</span>).siblings(<span class="string">&quot;input&quot;</span>).val(num);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 给减号注册单击事件</span></span><br><span class="line">  $(<span class="string">&quot;.decrement&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取减号后面的input输入框的值</span></span><br><span class="line">    <span class="keyword">var</span> num = $(<span class="built_in">this</span>).siblings(<span class="string">&quot;input&quot;</span>).val();</span><br><span class="line">    <span class="comment">// num的值最小为1，大于1的情况下进行自减</span></span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将自减后的值重新设置到输入框中</span></span><br><span class="line">    $(<span class="built_in">this</span>).siblings(<span class="string">&quot;input&quot;</span>).val(num);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-4-步骤-4：加减商品时的小计"><a href="#9-4-步骤-4：加减商品时的小计" class="headerlink" title="9.4 步骤 4：加减商品时的小计"></a>9.4 步骤 4：加减商品时的小计</h3><blockquote><p>通过+号或者-号修改商品数量的时候，要求小计这一列的数据也要修改</p></blockquote><p>分析： 小计 = 当前商品数量 * 商品单价</p><p>步骤： 点击加号或者减号按钮时</p><p>​ 获取文本输入框中的值，将其存储到一个变量中，该变量存储商品数量</p><p>​ 获取当前按钮的祖先元素的父元素(cart-item) 的儿子元素(p-price,p-sum)</p><p>​ 通过 p-price 可以得到存放商品单价的 div,获取该 div 中的文本内容，获取的时候要去掉￥符号</p><p>​ 通过 p-sum 可以得到存放商品小计的 div，设置该 div 中的文本内容</p><p>新知识点：截取字符串 “abcd”.subStr(1) 从 1 位置开始截取，截取到末尾，得到新字符串”bcd”</p><p>​ 数字保留 2 位小数点 new Number(11).toFixed(2) 得到 11.00</p><p>​ 获取父元素的父元素的父元素的父.. 获取祖先元素可以直接使用 parents(“选择器”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.给加号、减号注册点击事件</span></span><br><span class="line">  $(<span class="string">&quot;.increment,.decrement&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2.获取商品数量</span></span><br><span class="line">    <span class="keyword">var</span> count = $(<span class="built_in">this</span>).siblings(<span class="string">&quot;input&quot;</span>).val();</span><br><span class="line">    <span class="comment">// 3.获取商品的价格</span></span><br><span class="line">    <span class="keyword">var</span> price = $(<span class="built_in">this</span>).parents(<span class="string">&quot;.cart-item&quot;</span>).find(<span class="string">&quot;.p-price&quot;</span>).html().substr(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 4.计算当前商品的总价</span></span><br><span class="line">    <span class="keyword">var</span> total = <span class="keyword">new</span> <span class="built_in">Number</span>(count * price).toFixed(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 5.将计算好的结果设置到小计这一列</span></span><br><span class="line">    $(<span class="built_in">this</span>)</span><br><span class="line">      .parents(<span class="string">&quot;.cart-item&quot;</span>)</span><br><span class="line">      .find(<span class="string">&quot;.p-sum&quot;</span>)</span><br><span class="line">      .html(<span class="string">&quot;￥&quot;</span> + total);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-5-步骤-5：输入数量时的小计"><a href="#9-5-步骤-5：输入数量时的小计" class="headerlink" title="9.5 步骤 5：输入数量时的小计"></a>9.5 步骤 5：输入数量时的小计</h3><blockquote><p>直接在商品数量文本框内 输入商品数量的时候，要求小计这一列的数据也要修改</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.给输入框注册事件</span></span><br><span class="line">  $(<span class="string">&quot;.itxt&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2.获取商品数量</span></span><br><span class="line">    <span class="keyword">var</span> count = $(<span class="built_in">this</span>).val();</span><br><span class="line">    <span class="comment">// 3.获取商品的价格</span></span><br><span class="line">    <span class="keyword">var</span> price = $(<span class="built_in">this</span>).parents(<span class="string">&quot;.cart-item&quot;</span>).find(<span class="string">&quot;.p-price&quot;</span>).html().substr(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 4.计算当前商品的总价</span></span><br><span class="line">    <span class="keyword">var</span> total = <span class="keyword">new</span> <span class="built_in">Number</span>(count * price).toFixed(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 5.将计算好的结果设置到小计这一列</span></span><br><span class="line">    $(<span class="built_in">this</span>)</span><br><span class="line">      .parents(<span class="string">&quot;.cart-item&quot;</span>)</span><br><span class="line">      .find(<span class="string">&quot;.p-sum&quot;</span>)</span><br><span class="line">      .html(<span class="string">&quot;￥&quot;</span> + total);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-6-步骤-6：计算总计和总额"><a href="#9-6-步骤-6：计算总计和总额" class="headerlink" title="9.6 步骤 6：计算总计和总额"></a>9.6 步骤 6：计算总计和总额</h3><p>分析</p><p>​ 已经勾选的商品数量 = 排除两个全选复选框后，实际被选中的复选框的个数。就是实际勾选了几个商品，那么数量就是几</p><p>​ 总额 = 实际被勾选的商品的小计之和。</p><p>​ 当勾选复选框，点击+号，-号，商品数量文本框中的数据发生改变后应该重新计算以上两个值。</p><p>步骤</p><p>​ 1.给复选框、+号、-号 同时绑定 click 事件</p><p>​ 2.给文本框绑定 change 事件</p><p>​ 3.触发事件后需要重新计算总件数(总件数就是商品的种类)和总价。因为多个事件要调用，所以封装到方法中，定义方法 calcItem</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.j-checkbox,.increment,.decrement&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    calcItem();</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;.itxt&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    calcItem();</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;.checkall&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    calcItem();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">calcItem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义变量存储总件数和总数</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.遍历所有的商品</span></span><br><span class="line">    $(<span class="string">&quot;.cart-item&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取复选框</span></span><br><span class="line">      <span class="keyword">var</span> checked = $(<span class="built_in">this</span>).find(<span class="string">&quot;.j-checkbox&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">      <span class="comment">// 3.判断复选框是否被选中</span></span><br><span class="line">      <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        total += <span class="built_in">parseFloat</span>($(<span class="built_in">this</span>).find(<span class="string">&quot;.p-sum&quot;</span>).html().substr(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 4.更新页面中总件数和总价</span></span><br><span class="line">    $(<span class="string">&quot;.amount-sum&gt;em&quot;</span>).html(count);</span><br><span class="line">    $(<span class="string">&quot;.price-sum&gt;em&quot;</span>).html(<span class="string">&quot;￥&quot;</span> + <span class="keyword">new</span> <span class="built_in">Number</span>(total).toFixed(<span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-7-步骤-7：删除商品"><a href="#9-7-步骤-7：删除商品" class="headerlink" title="9.7 步骤 7：删除商品"></a>9.7 步骤 7：删除商品</h3><blockquote><p>完成删除选中的商品，清理购物车，和每一个商品的删除按钮这三个功能</p></blockquote><p>分析：</p><p>​ 删除选中的商品功能：需要遍历所有的商品项，判断复选框是否被选中，如果被选中则删除当前商品项目</p><p>​ 清理购物车功能：直接将所有的商品项删除</p><p>​ 删除按钮功能：点击删除按钮找到当前按钮对应的商品项，然后删除</p><p>新知识点：删除 dom 元素自己 remove() 删除当前 dom 标签中的内容 empty() html(“”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">calcItem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义变量存储总件数和总数</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.遍历所有的商品</span></span><br><span class="line">    $(<span class="string">&quot;.cart-item&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取复选框</span></span><br><span class="line">      <span class="keyword">var</span> checked = $(<span class="built_in">this</span>).find(<span class="string">&quot;.j-checkbox&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">      <span class="comment">// 3.判断复选框是否被选中</span></span><br><span class="line">      <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        total += <span class="built_in">parseFloat</span>($(<span class="built_in">this</span>).find(<span class="string">&quot;.p-sum&quot;</span>).html().substr(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 4.更新页面中总件数和总价</span></span><br><span class="line">    $(<span class="string">&quot;.amount-sum&gt;em&quot;</span>).html(count);</span><br><span class="line">    $(<span class="string">&quot;.price-sum&gt;em&quot;</span>).html(<span class="string">&quot;￥&quot;</span> + <span class="keyword">new</span> <span class="built_in">Number</span>(total).toFixed(<span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给删除选中商品绑定单击事件</span></span><br><span class="line">  $(<span class="string">&quot;.remove-batch&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取购物车中所有的商品并遍历</span></span><br><span class="line">    $(<span class="string">&quot;.cart-item&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 判断每一个复选框是否被选中</span></span><br><span class="line">      <span class="keyword">if</span> ($(<span class="built_in">this</span>).find(<span class="string">&quot;.j-checkbox&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 如果被选中就删除这个商品</span></span><br><span class="line">        $(<span class="built_in">this</span>).remove();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 重新计算商品数量和总价</span></span><br><span class="line">    calcItem();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给清空购物车绑定单击事件</span></span><br><span class="line">  $(<span class="string">&quot;.clear-all&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 找到存放商品的容器，清空里面的商品</span></span><br><span class="line">    $(<span class="built_in">this</span>).parents(<span class="string">&quot;.cart-floatbar&quot;</span>).siblings(<span class="string">&quot;.cart-item-list&quot;</span>).empty();</span><br><span class="line">    <span class="comment">// 重新计算商品数量和总价</span></span><br><span class="line">    calcItem();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除按钮绑定单击事件</span></span><br><span class="line">  $(<span class="string">&quot;.p-action&gt;a&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 单击时获取当前按钮所在的这条记录，然后删除</span></span><br><span class="line">    $(<span class="built_in">this</span>).parents(<span class="string">&quot;.cart-item&quot;</span>).remove();</span><br><span class="line">    <span class="comment">//重新计算商品数量和总价</span></span><br><span class="line">    calcItem();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-8-步骤-8：选中商品添加背景"><a href="#9-8-步骤-8：选中商品添加背景" class="headerlink" title="9.8 步骤 8：选中商品添加背景"></a>9.8 步骤 8：选中商品添加背景</h3><blockquote><p>复选框选中的商品添加背景样式 check-cart-item</p></blockquote><p>分析 全选复选框如果被选中，则全部添加背景，否则全都不添加背景</p><p>​ 如果是小复选框被选中，则当前商品添加背景，否则移出当前商品背景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;.j-checkbox&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>)) &#123;</span><br><span class="line">      $(<span class="built_in">this</span>).parents(<span class="string">&quot;.cart-item&quot;</span>).addClass(<span class="string">&quot;check-cart-item&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="built_in">this</span>).parents(<span class="string">&quot;.cart-item&quot;</span>).removeClass(<span class="string">&quot;check-cart-item&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;.checkall&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>)) &#123;</span><br><span class="line">      $(<span class="string">&quot;.cart-item&quot;</span>).addClass(<span class="string">&quot;check-cart-item&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">&quot;.cart-item&quot;</span>).removeClass(<span class="string">&quot;check-cart-item&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-jQuery-事件处理"><a href="#10-jQuery-事件处理" class="headerlink" title="10 jQuery 事件处理"></a>10 jQuery 事件处理</h2><p>​ 因为普通注册事件方法的不足，jQuery 又开发了多个处理方法，重点讲解如下：</p><ul><li>on(): 用于事件绑定，目前最好用的事件绑定方法（推荐）</li><li>off(): 事件解绑</li><li>trigger() / triggerHandler(): 事件触发</li></ul><h3 id="10-1-事件处理-on-绑定事件"><a href="#10-1-事件处理-on-绑定事件" class="headerlink" title="10.1 事件处理 on() 绑定事件"></a>10.1 事件处理 on() 绑定事件</h3><ul><li><p>on 可以绑定 1 个或者多个事件处理程序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .current &#123;</span><br><span class="line">        background-color: purple;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).on(&#123;</span><br><span class="line">            mouseenter: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;purple&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            mouseleave: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  <span class="comment">// 事件处理程序相同</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;mouseenter mouseleave&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>on 可以实现事件委托（委派）。</p><p>把原来加给子元素身上的事件绑定在父元素身上，就是把事件委托给父元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">        <span class="comment">// $(&quot;ul li&quot;).click();</span></span><br><span class="line">        $(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">11</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>on 可以给未来动态创建的元素绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;ol&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">11</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;ol&quot;</span>).append(li);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-2-事件处理-off-解绑事件"><a href="#10-2-事件处理-off-解绑事件" class="headerlink" title="10.2 事件处理 off() 解绑事件"></a>10.2 事件处理 off() 解绑事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).off(); <span class="comment">// 解绑p元素所有事件处理函数</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;P&quot;</span>).off(<span class="string">&quot;click&quot;</span>); <span class="comment">// 解绑p元素上面的点击事件</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).off(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>); <span class="comment">// 解绑事件委托</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).one(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// 事件只执行一次</span></span><br></pre></td></tr></table></figure><h3 id="10-3-事件处理-trigger-自动触发事件"><a href="#10-3-事件处理-trigger-自动触发事件" class="headerlink" title="10.3 事件处理 trigger() 自动触发事件"></a>10.3 事件处理 trigger() 自动触发事件</h3><p>jQuery 为我们提供了两个自动触发事件 trigger() 和 triggerHandler()</p><p><strong>第一种：tigger()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.click(); <span class="comment">// 简写方式</span></span><br><span class="line">element.trigger(<span class="string">&quot;type&quot;</span>); <span class="comment">// 自动触发模式</span></span><br></pre></td></tr></table></figure><p><strong>第二种：triggerHandler()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.triggerHandler(type); <span class="comment">// 自动触发模式</span></span><br></pre></td></tr></table></figure><h2 id="11-jQuery-事件对象"><a href="#11-jQuery-事件对象" class="headerlink" title="11 jQuery 事件对象"></a>11 jQuery 事件对象</h2><p>语法例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault(); <span class="comment">// 阻止默认行为</span></span><br><span class="line">  e.stopPropagation(); <span class="comment">// 阻止冒泡</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="JSON-数据"><a href="#JSON-数据" class="headerlink" title="JSON 数据"></a>JSON 数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(); <span class="comment">//把对象转成json字符串</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(); <span class="comment">//把json字符串转回对象</span></span><br></pre></td></tr></table></figure><h2 id="12-综合案例-toDoList"><a href="#12-综合案例-toDoList" class="headerlink" title="12 综合案例: toDoList"></a>12 综合案例: toDoList</h2><h3 id="12-1-案例：toDoList-分析"><a href="#12-1-案例：toDoList-分析" class="headerlink" title="12.1 案例：toDoList 分析"></a>12.1 案例：toDoList 分析</h3><ol><li>刷新页面不会丢失数据，因此需要用到本地存储 localStorage</li><li><strong>核心思路：不管按下回车，还是点击复选框，都是把本地存储的数据加载到页面中，这样保证刷新关闭页面不会丢失数据</strong></li><li>存储的数据格式（数组对象）：<strong>var todoList = [{title:’xxx’,done:false}]</strong></li><li>注意点一：本地存储 localStorage 里面只能存储字符串格式，因此需要把对象转换为字符串 <strong>JSON.stringify(data)</strong></li><li>注意点二：获取本地存储数据，需要把里面的字符串转换为数组对象格式 <strong>JSON.parse()</strong> 我们才能使用里面的数据</li></ol><h3 id="12-2-步骤-1：前期准备工作"><a href="#12-2-步骤-1：前期准备工作" class="headerlink" title="12.2 步骤 1：前期准备工作"></a>12.2 步骤 1：前期准备工作</h3><p>因为案例需要频繁的读取和存储数据到本地，所以需要编写两个方法</p><p>1、读取本地存储数据：编写 getData()方法，读取本地存储的 JSON 格式的字符串，返回一个数组，如果本地没有数据，则返回空数组</p><p>2、保存到本地存储数据：编写 saveData()方法，用于接收数组对象数据，将数据转成 JSON 格式字符串，保存到本地</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 读取LocalStorage中的JSON格式字符串</span></span><br><span class="line">  <span class="keyword">var</span> jsonStr = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;todo&quot;</span>);</span><br><span class="line">  <span class="comment">// 判断是否读取到，如果读取到就转换成对象返回，否则返回一个空数组</span></span><br><span class="line">  <span class="keyword">if</span> (jsonStr) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">JSON</span>.parse(jsonStr);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把数组转换为JSON格式的字符串数据</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(arr);</span><br><span class="line">  <span class="comment">// 把字符串型数据保存到本地硬盘中</span></span><br><span class="line">  loaclStorage.setItem(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-步骤-2：按回车存入数据"><a href="#12-3-步骤-2：按回车存入数据" class="headerlink" title="12.3 步骤 2：按回车存入数据"></a>12.3 步骤 2：按回车存入数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给输入框注册键盘keydown监听事件</span></span><br><span class="line">$(<span class="string">&quot;#title&quot;</span>).on(<span class="string">&quot;keydown&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断按下的是不是回车键并且输入框内容不能为空</span></span><br><span class="line">  <span class="keyword">if</span> (e.keyCode === <span class="number">13</span> &amp;&amp; $(<span class="built_in">this</span>).val()) &#123;</span><br><span class="line">    <span class="comment">// 先读取本地存储原来的数据</span></span><br><span class="line">    <span class="keyword">var</span> arr = getData();</span><br><span class="line">    <span class="comment">// 把本地arr数组进行更新数据，把最新的数据追加给本地arr数组</span></span><br><span class="line">    arr.push(&#123;</span><br><span class="line">      title: $(<span class="built_in">this</span>).val(),</span><br><span class="line">      done: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 把更新后的本地arr数组保存到本地硬盘中</span></span><br><span class="line">    saveData(arr);</span><br><span class="line">    <span class="comment">// 清空输入框内容</span></span><br><span class="line">    $(<span class="built_in">this</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 本地数据渲染到页面</span></span><br><span class="line">    load();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="12-4-步骤-3：本地存储渲染加载到页面"><a href="#12-4-步骤-3：本地存储渲染加载到页面" class="headerlink" title="12.4 步骤 3：本地存储渲染加载到页面"></a>12.4 步骤 3：本地存储渲染加载到页面</h3><p>因为案例需要频繁的渲染本地数据，所以需要编写一个 load()方法</p><ol><li>先要读取本地存储数据。（调用之前的 getData()方法）</li><li>遍历数组数据，数组中有几个数据，就创建几个 li ，添加到 ul 和 ol 中</li><li>创建 li 之前先判断数组对象的 done 属性值，是 true 就存到 ul 中，是 false 就存到 ol 中</li><li>每次渲染之前，先把原先里面 ol 的内容清空，然后渲染加载最新的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">load(); <span class="comment">// 打开页面就把本地数据渲染到页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 读取本地数据</span></span><br><span class="line">  <span class="keyword">var</span> data = getData();</span><br><span class="line">  <span class="comment">// 遍历之前清空ol、ul里面的内容，避免重复数据</span></span><br><span class="line">  $(<span class="string">&quot;ol,ul&quot;</span>).empty();</span><br><span class="line">  <span class="comment">// 遍历数组数据</span></span><br><span class="line">  $(data).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, ele</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ele = &#123;title:&quot;a&quot;, done:false&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (ele.done) &#123;</span><br><span class="line">      <span class="comment">// 已经完成的任务</span></span><br><span class="line">      <span class="keyword">var</span> li = $(</span><br><span class="line">        <span class="string">&quot;&lt;li&gt; &lt;input type = &#x27;checkbox&#x27; checked&gt; &lt;p&gt; &quot;</span> +</span><br><span class="line">          ele.title +</span><br><span class="line">          <span class="string">&quot; &lt;/p&gt; &lt;a href = &#x27;javascript:;&#x27; id = &quot;</span> +</span><br><span class="line">          index +</span><br><span class="line">          <span class="string">&quot;&gt;&lt;/a&gt; &lt;/li&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">      $(<span class="string">&quot;ul&quot;</span>).prepend(li);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 正在进行的任务</span></span><br><span class="line">      <span class="keyword">var</span> li = $(</span><br><span class="line">        <span class="string">&quot;&lt;li&gt; &lt;input type= &#x27;checkbox&#x27;&gt; &lt;p&gt; &quot;</span> +</span><br><span class="line">          ele.title +</span><br><span class="line">          <span class="string">&quot; &lt;/p&gt; &lt;a href=&#x27;javascript:;&#x27; id=&quot;</span> +</span><br><span class="line">          index +</span><br><span class="line">          <span class="string">&quot;&gt;&lt;/a&gt; &lt;/li&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">      $(<span class="string">&quot;ol&quot;</span>).prepend(li);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-5-步骤-4：删除数据"><a href="#12-5-步骤-4：删除数据" class="headerlink" title="12.5 步骤 4：删除数据"></a>12.5 步骤 4：删除数据</h3><ol><li>点击里面的 a 链接，不是删除的 li，而是本地存储对应的数据</li><li>核心原理：先获取本地存储数据，删除对应的数据，保存给本地存储，重新渲染页面</li><li>我们可以给 a 链接添加 id 属性来获取索引号</li><li>根据这个索引号删除相关的数据—-数组的 splice(index, 1)方法</li><li>存储修改后的数据，然后存储给本地存储</li><li>重新渲染加载数据列表</li><li>因为 a 是动态创建的，我们使用 on 方法事件委托绑定事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ol&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取本地存储的数据</span></span><br><span class="line">  <span class="keyword">var</span> data = getData();</span><br><span class="line">  <span class="comment">// 获取要删除数据的索引号</span></span><br><span class="line">  <span class="keyword">var</span> index = $(<span class="built_in">this</span>).prop(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">  <span class="comment">// 根据索引号删除数据</span></span><br><span class="line">  data.splice(index, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 把删除之后的数据保存到本地硬盘中</span></span><br><span class="line">  saveData(data);</span><br><span class="line">  <span class="comment">// 重新渲染页面</span></span><br><span class="line">  load();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="12-6-步骤-5：正在进行和已完成选项切换"><a href="#12-6-步骤-5：正在进行和已完成选项切换" class="headerlink" title="12.6 步骤 5：正在进行和已完成选项切换"></a>12.6 步骤 5：正在进行和已完成选项切换</h3><ol><li>当我们点击了小的复选框，修改本地存储数据，再重新渲染数据列表。</li><li>点击之后，获取本地存储数据和索引号。</li><li>修改对应数据属性 done 为当前复选框的 checked 状态。</li><li>之后保存数据到本地存储</li><li>重新渲染加载数据列表</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul,ol&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;:checkbox&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 读取本地存储的数据</span></span><br><span class="line">  <span class="keyword">var</span> data = getData();</span><br><span class="line">  <span class="comment">// 获取当前点击记录的索引号</span></span><br><span class="line">  <span class="keyword">var</span> index = $(<span class="built_in">this</span>).siblings(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">  <span class="comment">// 根据索引号修改复选框的done属性值</span></span><br><span class="line">  data[index].done = $(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">  <span class="comment">// 将修改后的数据保存到本地硬盘</span></span><br><span class="line">  saveData(data);</span><br><span class="line">  <span class="comment">// 重新渲染页面</span></span><br><span class="line">  load();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="12-7-步骤-6：统计正在进行个数和已经完成个数"><a href="#12-7-步骤-6：统计正在进行个数和已经完成个数" class="headerlink" title="12.7 步骤 6：统计正在进行个数和已经完成个数"></a>12.7 步骤 6：统计正在进行个数和已经完成个数</h3><ol><li>在我们 load 函数里面操作</li><li>声明 2 个变量 ：todoCount 待办个数 doneCount 已完成个数</li><li>当进行遍历本地存储数据的时候， 如果 数据 done 为 false， 则 todoCount++, 否则 doneCount++</li><li>最后修改相应的元素 text()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> todoCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> doneCount = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 读取本地数据</span></span><br><span class="line">  <span class="keyword">var</span> data = getData();</span><br><span class="line">  <span class="comment">// 遍历之前清空ol、ul里面的内容，避免重复数据</span></span><br><span class="line">  $(<span class="string">&quot;ol,ul&quot;</span>).empty();</span><br><span class="line">  <span class="comment">// 遍历数组数据</span></span><br><span class="line">  $(data).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, ele</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ele = &#123;title:&quot;a&quot;, done:false&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (ele.done) &#123;</span><br><span class="line">      <span class="comment">// 已经完成的任务</span></span><br><span class="line">      <span class="keyword">var</span> li = $(</span><br><span class="line">        <span class="string">&quot;&lt;li&gt; &lt;input type = &#x27;checkbox&#x27; checked&gt; &lt;p&gt; &quot;</span> +</span><br><span class="line">          ele.title +</span><br><span class="line">          <span class="string">&quot; &lt;/p&gt; &lt;a href = &#x27;javascript:;&#x27; id = &quot;</span> +</span><br><span class="line">          index +</span><br><span class="line">          <span class="string">&quot;&gt;&lt;/a&gt; &lt;/li&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">      $(<span class="string">&quot;ul&quot;</span>).prepend(li);</span><br><span class="line">      doneCount++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 正在进行的任务</span></span><br><span class="line">      <span class="keyword">var</span> li = $(</span><br><span class="line">        <span class="string">&quot;&lt;li&gt; &lt;input type= &#x27;checkbox&#x27;&gt; &lt;p&gt; &quot;</span> +</span><br><span class="line">          ele.title +</span><br><span class="line">          <span class="string">&quot; &lt;/p&gt; &lt;a href=&#x27;javascript:;&#x27; id=&quot;</span> +</span><br><span class="line">          index +</span><br><span class="line">          <span class="string">&quot;&gt;&lt;/a&gt; &lt;/li&gt;&quot;</span></span><br><span class="line">      );</span><br><span class="line">      $(<span class="string">&quot;ol&quot;</span>).prepend(li);</span><br><span class="line">      todoCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">&quot;#todocount&quot;</span>).text(todocount);</span><br><span class="line">  $(<span class="string">&quot;#donecount&quot;</span>).text(donecount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫天飞舞的雪,是我对你的思念</title>
      <link href="2015/05/05/test/"/>
      <url>2015/05/05/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>sdasjdlk</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
