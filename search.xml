<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>漫天飞舞的雪,是我对你的思念</title>
      <link href="2021/05/05/test/"/>
      <url>2021/05/05/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>sd test</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gti命令 git语法</title>
      <link href="2021/05/05/git/"/>
      <url>2021/05/05/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li><p>了解版本控制软件的作用</p></li><li><p>了解版本控制系统的分类</p></li><li><p>Git的特性</p></li><li><p>初始化 Git 仓库的命令</p></li><li><p>查看文件状态的命令</p></li><li><p>一次性将文件加入暂存区的命令</p></li><li><p>将暂存区的文件提交到 Git 仓库的命令</p></li></ul><h1 id="一、版本管理"><a href="#一、版本管理" class="headerlink" title="一、版本管理"></a>一、版本管理</h1><h2 id="文件的版本"><a href="#文件的版本" class="headerlink" title="文件的版本"></a>文件的版本</h2><p><img src="img/git%E5%BC%95%E8%A8%80.png"></p><h2 id="版本控制软件"><a href="#版本控制软件" class="headerlink" title="版本控制软件"></a>版本控制软件</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>版本控制软件</strong>是一个用来记录文件变化，以便将来查阅特定</p><p>版本修订情况的系统，因此有时也叫做“<strong>版本控制系统</strong>”</p><h3 id="通俗的理解"><a href="#通俗的理解" class="headerlink" title="通俗的理解"></a>通俗的理解</h3><p>把<strong>手工管理</strong>文件版本的方式，改为由<strong>软件管理</strong>文件的版本；</p><p>这个<strong>负责管理文件版本的软件</strong>，叫做“版本控制软件”</p><h2 id="使用版本控制软件的好处"><a href="#使用版本控制软件的好处" class="headerlink" title="使用版本控制软件的好处"></a>使用版本控制软件的好处</h2><ul><li><strong>操作简便：</strong>只需<strong>识记几组简单的终端命令</strong>，即可快速上手常见的版本控制软件</li><li><strong>易于对比：</strong>基于版本控制软件提供的功能，能够方便地比较文件的变化细节，从而查找出导致问题的原因</li><li><strong>易于回溯：</strong>可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态</li><li><strong>不易丢失：</strong>在版本控制软件中，被用户误删除的文件，可以轻松的恢复回来</li><li><strong>协作方便：</strong>基于版本控制软件提供的分支功能，可以轻松实现多人协作开发时的代码合并操作</li></ul><h2 id="版本控制系统的分类"><a href="#版本控制系统的分类" class="headerlink" title="版本控制系统的分类"></a>版本控制系统的分类</h2><h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p><strong>单机运行</strong>，使维护文件版本的操作工具化</p><p><img src="img/%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>使用软件来记录文件的不同版本，提高了工作效率，降低了手动维护版本的出错率</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>① <strong>单机运行</strong>，不支持多人协作开发</p><p>② 版本数据库故障后，所有历史更新记录会丢失</p><h3 id="集中化的版本控制系统"><a href="#集中化的版本控制系统" class="headerlink" title="集中化的版本控制系统"></a>集中化的版本控制系统</h3><p>联网运行，支持多人协作开发；<strong>性能差、用户体验不好</strong></p><p><img src="img/%E9%9B%86%E4%B8%AD%E5%8C%96%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"></p><p><strong>典型代表  <code>SVN</code></strong></p><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><p>基于服务器、客户端的运行模式</p><p>① 服务器保存文件的所有更新记录</p><p>② 客户端<strong>只保留最新的文件版本</strong></p><p><strong>优点：</strong>联网运行，支持多人协作开发</p><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><p>① 不支持离线提交版本更新</p><p>② 中心服务器崩溃后，所有人无法正常工作</p><p>③ 版本数据库故障后，所有历史更新记录会丢失</p><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p><strong>联网运行，支持多人协作开发；性能优秀、用户体验好</strong></p><p><img src="img/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"></p><p><strong>典型代表：<code>Git</code></strong></p><h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><p>基于<strong>服务器、客户端</strong>的运行模式</p><p>① 服务器保存文件的所有更新版本</p><p>② <strong>客户端是服务器的完整备份</strong>，并不是只保留文件的最新版本</p><p><strong>优点：</strong></p><p>① 联网运行，支持多人协作开发</p><p>② 客户端<strong>断网</strong>后<strong>支持离线本地提交</strong>版本更新</p><p>③ 服务器故障或损坏后，可使用任何一个客户端的备份进行恢复</p><h1 id="二、Git基础概念"><a href="#二、Git基础概念" class="headerlink" title="二、Git基础概念"></a>二、Git基础概念</h1><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p><code>Git</code> 是一个<strong>开源的分布式版本控制系统</strong>，是目前世界上<strong>最先进</strong>、<strong>最流行</strong>的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。</p><p>特点：项目越大越复杂，协同开发者越多，越能体现出 Git 的<strong>高性能</strong>和<strong>高可用性</strong>！</p><h3 id="Git-的特性-⭐⭐⭐"><a href="#Git-的特性-⭐⭐⭐" class="headerlink" title="Git 的特性(⭐⭐⭐)"></a><strong>Git 的特性</strong>(⭐⭐⭐)</h3><p>Git 之所以快速和高效，主要依赖于它的如下两个特性：</p><p>① 直接记录快照（完整备份），而非差异比较</p><p>② 近乎所有操作都是本地执行</p><h4 id="SVN-的差异比较"><a href="#SVN-的差异比较" class="headerlink" title="SVN 的差异比较"></a><code>SVN</code> 的差异比较</h4><p>传统的版本控制系统（例如 <code>SVN</code>）是<strong>基于差异</strong>的版本控制，它们存储的是<strong>一组基本文件</strong>和<strong>每个文件随时间逐步累积的差异</strong></p><p><img src="img/SVN%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83.png"></p><p><strong>好处：</strong>节省磁盘空间</p><p><strong>缺点：</strong>耗时、效率低</p><p>​           在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件</p><h4 id="Git-的记录快照"><a href="#Git-的记录快照" class="headerlink" title="Git 的记录快照"></a><code>Git</code> 的记录快照</h4><p><strong>Git 快照</strong>是在原有文件版本的基础上重新生成一份新的文件，<strong>类似于备份</strong>。为了效率，如果文件没有修改，Git </p><p>不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</p><p><img src="img/Git%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83.png"></p><p><strong>缺点：</strong>占用磁盘空间较大</p><p><strong>优点：</strong> <strong>版本切换时非常快</strong>，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。</p><p>**特点： ** <strong>空间换时间</strong></p><h4 id="近乎所有操作都是本地执行"><a href="#近乎所有操作都是本地执行" class="headerlink" title="近乎所有操作都是本地执行"></a><strong>近乎所有操作都是本地执行</strong></h4><p>在 Git 中的绝大多数操作都<strong>只需要访问本地文件和资源</strong>，一般不需要来自网络上其它计算机的信息</p><p><strong>特性：</strong></p><p>① 断网后依旧可以在本地对项目进行版本管理</p><p>② 联网后，把本地修改的记录同步到云端服务器即可</p><img src="img/image-20200810214530085.png" alt="image-20200810214530085" style="zoom: 67%;" /><h3 id="Git-中的三个区域"><a href="#Git-中的三个区域" class="headerlink" title="Git 中的三个区域"></a><strong><code>Git</code> 中的三个区域</strong></h3><p>使用 <code>Git</code> 管理的项目，拥有三个区域，分别是<strong>工作区</strong>、<strong>暂存区</strong>、**<code>Git</code> 仓库（版本库）**</p><p><img src="img/git%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F%E4%BE%8B%E5%AD%90.png"></p><h3 id="Git-中的三种状态"><a href="#Git-中的三种状态" class="headerlink" title="Git 中的三种状态"></a><code>Git</code> 中的三种状态</h3><ul><li><p><strong>已修改 <code>modified</code></strong></p><ul><li>表示修改了文件，但还没将修改的结果放到<strong>暂存区</strong></li></ul></li><li><p><strong>已暂存 <code>staged</code></strong></p><ul><li>表示对已修改文件的当前版本做了标记，使之包含在<strong>下次提交的列表中</strong></li></ul></li><li><p><strong>已提交 <code>committed</code></strong></p><ul><li>表示文件已经安全地保存在本地的 <strong>Git 仓库中</strong></li></ul></li></ul><p><strong>注意：</strong></p><ul><li>工作区的文件被修改了，但还没有放到暂存区，就是<strong>已修改</strong>状态。</li><li>如果文件已修改并放入暂存区，就属于<strong>已暂存</strong>状态。</li><li>如果 Git 仓库中<strong>保存着特定版本</strong>的文件，就属于<strong>已提交</strong>状态。</li></ul><h3 id="基本的-Git-工作流程"><a href="#基本的-Git-工作流程" class="headerlink" title="基本的 Git 工作流程"></a>基本的 <code>Git</code> 工作流程</h3><p><img src="img/git%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><p>基本的 Git 工作流程如下：</p><p>① 在工作区中修改文件（新建、修改内容、删除都属于修改操作）</p><p>② 将你想要下次提交的更改进行暂存</p><p>③ 提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</p><h1 id="三、安装并配置-Git"><a href="#三、安装并配置-Git" class="headerlink" title="三、安装并配置 Git"></a>三、安装并配置 Git</h1><h3 id="在-Windows-中下载并安装-Git"><a href="#在-Windows-中下载并安装-Git" class="headerlink" title="在 Windows 中下载并安装 Git"></a>在 <code>Windows</code> 中下载并安装 <code>Git</code></h3><p>在开始使用 <code>Git</code> 管理项目的版本之前，需要将它安装到计算机上。可以使用浏览器访问如下的网址，根据自己</p><p>的操作系统，选择下载对应的 <code>Git</code> 安装包：</p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p><img src="img/git%E7%9A%84%E4%B8%8B%E8%BD%BD.png"></p><p>安装成功：</p><p>​    <img src="img/image-20201205194442207.png" alt="image-20201205194442207" style="zoom:67%;" /></p><p>打开：</p><img src="img/image-20201205194637593.png" alt="image-20201205194637593" style="zoom: 67%;" /><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>安装完 <code>Git</code> 之后，要做的第一件事就是设置自己的<strong>用户名</strong>和<strong>邮件地址</strong>。因为通过 <code>Git</code> 对项目进行版本管理的时</p><p>候，<code>Git</code> 需要使用这些基本信息，来记录是谁对项目进行了操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;itheima&quot;</span><br><span class="line">git config --global user.email &quot;itheima@itcast.cn&quot;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果使用了 –global 选项，那么该命令只需要运行一次，即可永久生效。</p><h3 id="Git-的全局配置文件"><a href="#Git-的全局配置文件" class="headerlink" title="Git 的全局配置文件"></a>Git 的全局配置文件</h3><p>通过 <code>git config --global user.name</code> 和 <code>git config --global user.email</code> 配置的用户名和邮箱地址，会被写</p><p>入到 <code>C:/Users/用户名文件夹/.gitconfig</code> 文件中。这个文件是 <code>Git</code> 的<strong>全局配置文件</strong>，<strong>配置一次即可永久生效</strong>。</p><p>可以使用记事本打开此文件，从而查看自己曾经对 Git 做了哪些全局性的配置。</p><p><img src="img/git%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p><h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><p>除了使用记事本查看全局的配置信息之外，还可以运行如下的终端命令，快速的查看 Git 的全局配置信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的全局配置项</span></span><br><span class="line">git config --list --global</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定的全局配置项</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h3 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h3><p>可以使用 <code>git help &lt;verb&gt;</code> 命令，无需联网即可在浏览器中打开帮助手册，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开 git config 命令的帮助手册</span></span><br><span class="line">git help config</span><br></pre></td></tr></table></figure><p>如果不想查看完整的手册，那么可以用 -h 选项获得更简明的“help”输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 想要获取 git config 命令的快速参考</span></span><br><span class="line">git config -h</span><br></pre></td></tr></table></figure><h1 id="四、Git-的基本操作"><a href="#四、Git-的基本操作" class="headerlink" title="四、Git 的基本操作"></a>四、<code>Git</code> 的基本操作</h1><h2 id="【1】初始化仓库"><a href="#【1】初始化仓库" class="headerlink" title="【1】初始化仓库"></a>【1】初始化仓库</h2><h3 id="获取-Git-仓库的两种方式"><a href="#获取-Git-仓库的两种方式" class="headerlink" title="获取 Git 仓库的两种方式"></a>获取 <code>Git</code> 仓库的两种方式</h3><p>① 将尚未进行版本控制的本地目录<strong>转换</strong>为 <code>Git</code> 仓库</p><p>② 从其它服务器<strong>克隆</strong>一个已存在的 <code>Git</code> 仓库</p><p>以上两种方式都能够在自己的电脑上得到一个可用的 Git 仓库</p><h3 id="在现有目录中初始化仓库-⭐⭐⭐"><a href="#在现有目录中初始化仓库-⭐⭐⭐" class="headerlink" title="在现有目录中初始化仓库(⭐⭐⭐)"></a>在现有目录中初始化仓库(⭐⭐⭐)</h3><p>如果自己有一个尚未进行版本控制的项目目录，想要用 <code>Git</code> 来控制它，需要执行如下两个步骤：</p><p>① 在项目目录中，通过鼠标右键打开“<code>Git Bash</code>” </p><p>② 执行 <code>git init</code> 命令将当前的目录转化为 <code>Git</code> 仓库</p><p><code>git init</code> 命令会创建一个名为 .git 的隐藏目录，<strong>这个 .git 目录就是当前项目的 Git 仓库</strong>，里面包含了<strong>初始的必要文件</strong>，这些文件是 Git 仓库的<strong>必要组成部分</strong></p><h2 id="【2】查看文件状态"><a href="#【2】查看文件状态" class="headerlink" title="【2】查看文件状态"></a>【2】查看文件状态</h2><h3 id="工作区中文件的-4-种状态"><a href="#工作区中文件的-4-种状态" class="headerlink" title="工作区中文件的 4 种状态"></a>工作区中文件的 4 种状态</h3><p>工作区中的每一个文件可能有 4 种状态，这四种状态共分为两大类，如图所示：</p><img src="img/image-20201205194007317.png" alt="image-20201205194007317" style="zoom:200%;" /><p><img src="img/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%96%87%E4%BB%B6%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p><p><strong>Git 操作的终极结果：</strong>让工作区中的文件都处于<strong>“未修改”</strong>的状态。</p><h3 id="检查文件的状态-⭐⭐⭐"><a href="#检查文件的状态-⭐⭐⭐" class="headerlink" title="检查文件的状态(⭐⭐⭐)"></a>检查文件的状态(⭐⭐⭐)</h3><p>可以使用 <code>git status</code> 命令查看文件处于什么状态，例如</p><p>![](img/git status.png)</p><p>在状态报告中可以看到新建的 <code>index.html</code> 文件出现在 <code>Untracked files</code>（未跟踪的文件） 下面。</p><p>未跟踪的文件意味着 <strong><code>Git</code> 在之前的快照（提交）中没有这些文件</strong>；<code>Git</code> 不会自动将之纳入跟踪范围，除非明确</p><p>地告诉它“我需要使用 Git 跟踪管理该文件”。</p><h3 id="以精简的方式显示文件状态"><a href="#以精简的方式显示文件状态" class="headerlink" title="以精简的方式显示文件状态"></a>以精简的方式显示文件状态</h3><p>使用 <code>git status</code> 输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下</p><p>两条完全等价的命令，其中 <strong>-s</strong> 是 <strong>–short</strong> 的简写形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以精简的方式显示文件状态</span></span><br><span class="line">git status -s</span><br><span class="line">git status --short</span><br></pre></td></tr></table></figure><p>未跟踪文件前面有红色的 <strong>??</strong> 标记，例如：</p><p><img src="img/%E7%B2%BE%E7%AE%80%E6%96%B9%E5%BC%8F%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81.png"></p><h2 id="【3】操作新文件-⭐⭐⭐"><a href="#【3】操作新文件-⭐⭐⭐" class="headerlink" title="【3】操作新文件(⭐⭐⭐)"></a>【3】操作新文件(⭐⭐⭐)</h2><p>使用命令 <code>git add</code> 开始跟踪一个文件。 所以，要跟踪 <code>index.html</code> 文件，运行如下的命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果文件过多，你项跟踪目录下所有文件</span></span><br><span class="line">git add *.*</span><br></pre></td></tr></table></figure><p>此时再运行 <code>git status</code> 命令，会看到 <code>index.html</code> 文件在 <code>Changes to be committed</code> 这行的下面，说明已被跟踪，并处于暂存状态：</p><p><img src="img/%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6.png"></p><h3 id="提交更新-⭐⭐⭐"><a href="#提交更新-⭐⭐⭐" class="headerlink" title="提交更新(⭐⭐⭐)"></a>提交更新(⭐⭐⭐)</h3><p>现在暂存区中有一个 <code>index.html</code> 文件等待被提交到 <code>Git</code> 仓库中进行保存。可以执行 <code>git commit</code> 命令进行提交,其中 <code>-m</code> 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;新建了index.html 文件&quot;</span><br></pre></td></tr></table></figure><p>提交成功之后，会显示如下的信息：</p><p>![](img/git commit.png)</p><p>提交成功之后，再次检查文件的状态，得到提示如下：</p><p><img src="img/%E6%8F%90%E4%BA%A4%E4%B9%8B%E5%90%8Estatus.png"></p><p><img src="img/commit%E6%B5%81%E7%A8%8B.png"></p><h2 id="【4】操作已提交的文件-⭐⭐⭐"><a href="#【4】操作已提交的文件-⭐⭐⭐" class="headerlink" title="【4】操作已提交的文件(⭐⭐⭐)"></a>【4】操作已提交的文件(⭐⭐⭐)</h2><h3 id="对已提交的文件进行修改"><a href="#对已提交的文件进行修改" class="headerlink" title="对已提交的文件进行修改"></a>对已提交的文件进行修改</h3><p>目前，<code>index.html</code> 文件已经被 <code>Git</code> 跟踪，并且工作区和 <code>Git</code> 仓库中的 <code>index.html</code> 文件内容保持一致。当我们修改了工作区中 <code>index.html</code> 的内容之后，再次运行 <code>git status</code> 和 <code>git status -s</code> 命令，会看到如下的内容：</p><p><img src="img/%E4%BF%AE%E6%94%B9.png"></p><p>文件 <code>index.html</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明<strong>已跟踪文件的内容发生了变化，但还没有放到暂存区</strong>。</p><p><strong>注意：</strong>修改过的、没有放入暂存区的文件前面有红色的 <strong>M</strong> 标记。</p><h3 id="暂存已修改的文件"><a href="#暂存已修改的文件" class="headerlink" title="暂存已修改的文件"></a>暂存已修改的文件</h3><p>目前，工作区中的 <code>index.html</code> 文件已被修改，如果要暂存这次修改，需要再次运行 <code>git add</code> 命令，这个命令是个多功能的命令，主要有如下 3 个功效：</p><p>① 可以用它<strong>开始跟踪新文件</strong></p><p>② 把<strong>已跟踪的</strong>、<strong>且已修改</strong>的文件放到暂存区</p><p>③ 把有冲突的文件标记为已解决状态</p><p><img src="img/%E5%B7%B2%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E6%9A%82%E5%AD%98%E5%8C%BA.png"></p><h3 id="提交已暂存的文件"><a href="#提交已暂存的文件" class="headerlink" title="提交已暂存的文件"></a>提交已暂存的文件</h3><p>再次运行 <code>git commit -m &quot;提交消息&quot;</code> 命令，即可将暂存区中记录的 <code>index.html</code> 的快照，提交到 <code>Git</code> 仓库中进行保存：</p><p><img src="img/%E6%8F%90%E4%BA%A4%E6%9A%82%E5%AD%98%E4%B8%AD%E6%96%87%E4%BB%B6.png"></p><h2 id="【5】撤销对文件的修改"><a href="#【5】撤销对文件的修改" class="headerlink" title="【5】撤销对文件的修改"></a>【5】撤销对文件的修改</h2><p><strong>撤销对文件的修改指的是：</strong>把对工作区中对应文件的修改，<strong>还原</strong>成 Git 仓库中所保存的版本。</p><p><strong>操作的结果：</strong>所有的修改会丢失，且无法恢复！<strong>危险性比较高，请慎重操作！</strong></p><p><img src="img/%E6%92%A4%E9%94%80.png"></p><p><strong>撤销操作的本质：</strong>用 Git 仓库中保存的文件，覆盖工作区中指定的文件。</p><h3 id="向暂存区中一次性添加多个文件"><a href="#向暂存区中一次性添加多个文件" class="headerlink" title="向暂存区中一次性添加多个文件"></a>向暂存区中一次性添加多个文件</h3><p>如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p><strong>今后在项目开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区</strong></p><h3 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h3><p>如果需要从暂存区中移除对应的文件，可以使用如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 要移出的文件名称 或者 git reset 文件名称</span><br></pre></td></tr></table></figure><h3 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h3><p><code>Git</code> 标准的工作流程是<code>工作区 → 暂存区 → Git 仓库</code>，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 <code>Git</code> 仓库，这时候 <code>Git</code> 工作的流程简化为了<code>工作区 → Git 仓库</code></p><p><code>Git</code> 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，<code>Git</code> 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;日志信息&quot;</span><br></pre></td></tr></table></figure><h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>从 Git 仓库中移除文件的方式有两种：</p><p>① 从 Git 仓库和工作区中<strong>同时移除</strong>对应的文件</p><p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从 Git仓库和工作区中同时移除 index.js 文件git rm -f index.js<span class="comment"># 只从 Git 仓库中移除 index.css，但保留工作区中的 index.css 文件git rm --cached index.css</span></span></span><br></pre></td></tr></table></figure><h2 id="【6】忽略文件"><a href="#【6】忽略文件" class="headerlink" title="【6】忽略文件"></a>【6】忽略文件</h2><p>一般我们总会有些文件无需纳入 <code>Git</code> 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的配置文件，列出要忽略的文件的匹配模式。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><p>① 以 <strong># 开头</strong>的是注释</p><p>② 以 <strong>/ 结尾</strong>的是目录</p><p>③ 以 <strong>/ 开头</strong>防止递归</p><p>④ 以 <strong>! 开头</strong>表示取反</p><p>⑤ 可以使用 <strong>glob 模式</strong>进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><ul><li><strong>星号 *</strong> 匹配<strong>零个或多个任意字符</strong></li><li><strong><code>[abc]</code></strong> 匹配<strong>任何一个列在方括号中的字符</strong> （此案例匹配一个 a 或匹配一个 b 或匹配一个 c） </li><li><strong>问号 ?</strong> 只匹配<strong>一个任意字符</strong></li><li><strong>两个星号 **</strong> 表示匹配<strong>任意中间目录</strong>（比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等）</li><li>在方括号中使用<strong>短划线</strong>分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</li></ul><h3 id="gitignore-文件的例子"><a href="#gitignore-文件的例子" class="headerlink" title=".gitignore 文件的例子"></a><code>.gitignore</code> <strong>文件的例子</strong></h3><p><img src="img/%E5%BF%BD%E7%95%A5%E6%B8%85%E5%8D%95.png"></p><h2 id="【7】回退版本"><a href="#【7】回退版本" class="headerlink" title="【7】回退版本"></a>【7】回退版本</h2><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>如果希望回顾项目的提交历史，可以使用 <code>git log</code> 这个简单且有效的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按时间先后顺序列出所有的提交历史，最近的提交在最上面git <span class="built_in">log</span><span class="comment"># 只展示最新的两条提交历史，数字可以按需进行填写git log -2# 在一行上展示最近两条提交历史的信息git log -2 --pretty=oneline# 在一行上展示最近两条提交历史信息，并自定义输出的格式# &amp;h 提交的简写哈希值  %an 作者名字  %ar 作者修订日志  %s 提交说明git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在一行上展示所有的提交历史git <span class="built_in">log</span> --pretty=oneline<span class="comment"># 使用 git reset --hard 命令，根据指定的提交 ID 回退到指定版本git reset --hard &lt;CommitID&gt;# 在旧版本中使用 git reflog --pretty=oneline 命令，查看命令操作的历史git reflog --pretty=onelone# 再次根据最新的提交 ID，跳转到最新的版本git reset --hard &lt;CommitID&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="五、了解开源相关的概念"><a href="#五、了解开源相关的概念" class="headerlink" title="五、了解开源相关的概念"></a>五、了解开源相关的概念</h1><h2 id="什么是开源"><a href="#什么是开源" class="headerlink" title="什么是开源"></a>什么是开源</h2><p><img src="img/%E5%BC%80%E6%BA%90%E5%92%8C%E9%97%AD%E6%BA%90.png"></p><p><strong>通俗的理解</strong></p><ul><li><strong>开源</strong>是指不仅提供程序还提供程序的源代码</li><li><strong>闭源</strong>是只提供程序，不提供源代码</li></ul><h2 id="什么是开源许可协议"><a href="#什么是开源许可协议" class="headerlink" title="什么是开源许可协议"></a>什么是开源许可协议</h2><p>开源并不意味着完全没有限制，为了<strong>限制使用者的使用范围</strong>和<strong>保护作者的权利</strong>，每个开源项目都应该遵守开源</p><p>许可协议（ <code>Open Source License</code> ）。</p><h3 id="常见的-5-种开源许可协议"><a href="#常见的-5-种开源许可协议" class="headerlink" title="常见的 5 种开源许可协议"></a>常见的 5 种开源许可协议</h3><ul><li><code>BSD</code>（Berkeley Software Distribution） </li><li><code>Apache Licence 2.0</code></li><li>**<code>GPL</code>**（GNU General Public License） (⭐⭐⭐)</li><li>具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售<ul><li>使用 <code>GPL</code> 的最著名的软件项目是：Linux</li></ul></li><li><code>LGPL</code>（GNU Lesser General Public License） </li><li>**<code>MIT</code>**（Massachusetts Institute of Technology, MIT）  (⭐⭐⭐)</li><li>是目前限制最少的协议，唯一的条件：在修改后的代码或者发行包中，必须包含原作者的许可信息</li><li>使用 MIT 的软件项目有：<code>jquery</code>、<code>Node.js</code></li></ul><h2 id="为什么要拥抱开源"><a href="#为什么要拥抱开源" class="headerlink" title="为什么要拥抱开源"></a>为什么要拥抱开源</h2><p>开源的核心思想是“<strong>我为人人，人人为我</strong>”，人们越来越喜欢开源大致是出于以下 3 个原因：</p><p>① 开源给使用者更多的控制权</p><p>② 开源让学习变得容易</p><p>③ 开源才有真正的安全</p><p>开源是软件开发领域的大趋势，<strong>拥抱开源就像站在了巨人的肩膀上</strong>，不用自己重复造轮子，让开发越来越容易</p><h2 id="开源项目托管平台"><a href="#开源项目托管平台" class="headerlink" title="开源项目托管平台"></a>开源项目托管平台</h2><p>专门用于免费存放开源项目源代码的网站，叫做<strong>开源项目托管平台</strong>。目前世界上比较出名的开源项目托管平台</p><p>主要有以下 3 个：</p><ul><li><code>Github</code>（全球最牛的开源项目托管平台，没有之一）</li><li><code>Gitlab</code>（对代码私有性支持较好，因此企业用户较多）</li><li><code>Gitee</code>（又叫做码云，是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好）</li></ul><p><strong>注意：</strong>以上 3 个开源项目托管平台，只能托管以 <code>Git</code> 管理的项目源代码，因此，它们的名字都以 <code>Git</code> 开头</p><h1 id="六、远程仓库之Github（★）"><a href="#六、远程仓库之Github（★）" class="headerlink" title="六、远程仓库之Github（★）"></a>六、远程仓库之<code>Github</code>（★）</h1><h2 id="【1】什么是-Github"><a href="#【1】什么是-Github" class="headerlink" title="【1】什么是 Github"></a>【1】什么是 <code>Github</code></h2><p><code>Github</code> 是全球最大的<strong>开源项目</strong>托管平台。因为只支持 <code>Git</code> 作为唯一的版本控制工具，故名 <code>GitHub</code>。 </p><p>在 <code>Github</code> 中，你可以：</p><p>① 关注自己喜欢的开源项目，为其点赞打 <code>call</code> </p><p>② 为自己喜欢的开源项目做贡献（<code>Pull Request</code>） </p><p>③ 和开源项目的作者讨论 Bug 和提需求 （<code>Issues</code>） </p><p>④ 把喜欢的项目复制一份作为自己的项目进行修改（<code>Fork</code>） </p><p>⑤ 创建属于自己的开源项目</p><p>⑥ etc…</p><p>So，**<code>Github ≠ Git</code>**</p><h2 id="【2】注册github账号"><a href="#【2】注册github账号" class="headerlink" title="【2】注册github账号"></a>【2】注册github账号</h2><h3 id="注册-Github-账号的流程"><a href="#注册-Github-账号的流程" class="headerlink" title="注册 Github 账号的流程"></a>注册 <code>Github</code> 账号的流程</h3><p>① 访问 <code>Github</code> 的官网首页 <a href="https://github.com/">https://github.com/</a></p><p>② 点击“<code>Sign up</code>”按钮跳转到注册页面</p><p>③ 填写可用的用户名、邮箱、密码</p><p>④ 通过点击箭头的形式，将验证图片摆正</p><p>⑤ 点击“<code>Create account</code>”按钮注册新用户</p><p>⑥ 登录到第三步填写的邮箱中，点击激活链接，完成注册</p><img src="img/github注册.png" style="zoom:60%;" /><h3 id="激活-Github-账号"><a href="#激活-Github-账号" class="headerlink" title="激活 Github 账号"></a>激活 <code>Github</code> 账号</h3><img src="img/激活邮件.png" style="zoom:60%;" /><h3 id="完成注册"><a href="#完成注册" class="headerlink" title="完成注册"></a>完成注册</h3><img src="img/注册成功.png" style="zoom:60%;" /><h2 id="【3】远程仓库的使用"><a href="#【3】远程仓库的使用" class="headerlink" title="【3】远程仓库的使用"></a>【3】远程仓库的使用</h2><h3 id="新建空白远程仓库"><a href="#新建空白远程仓库" class="headerlink" title="新建空白远程仓库"></a>新建空白远程仓库</h3><img src="img/创建仓库.png" style="zoom:60%;" /><h3 id="新建空白远程仓库成功"><a href="#新建空白远程仓库成功" class="headerlink" title="新建空白远程仓库成功"></a>新建空白远程仓库成功</h3><img src="img/创建成功.png" style="zoom:60%;" /><h2 id="【4】本地仓库与远程仓库建立连接"><a href="#【4】本地仓库与远程仓库建立连接" class="headerlink" title="【4】本地仓库与远程仓库建立连接"></a>【4】本地仓库与远程仓库建立连接</h2><h3 id="4-1-远程仓库的两种访问方式"><a href="#4-1-远程仓库的两种访问方式" class="headerlink" title="4.1 远程仓库的两种访问方式"></a>4.1 远程仓库的两种访问方式</h3><p><code>Github</code> 上的远程仓库，有两种访问方式，分别是 <code>HTTPS</code> 和 <code>SSH</code>。它们的区别是：</p><p>① <code>HTTPS</code>：<strong>零配置</strong>；但是每次访问仓库时，需要重复输入 <code>Github</code> 的账号和密码才能访问成功</p><p>② <code>SSH</code>：<strong>需要进行额外的配置</strong>；但是配置成功后，每次访问仓库时，不需重复输入 <code>Github</code> 的账号和密码</p><p><strong>注意：</strong>在实际开发中，<strong>推荐使用 SSH 的方式访问远程仓库。</strong></p><h3 id="4-2-基于-HTTPS"><a href="#4-2-基于-HTTPS" class="headerlink" title="4.2 基于 HTTPS"></a>4.2 基于 <code>HTTPS</code></h3><img src="img/https提交.png" style="zoom:60%;" /><h3 id="4-3-基于-SSH-key-⭐⭐⭐"><a href="#4-3-基于-SSH-key-⭐⭐⭐" class="headerlink" title="4.3 基于 SSH key(⭐⭐⭐)"></a>4.3 基于 SSH key(⭐⭐⭐)</h3><h4 id="SSH-key"><a href="#SSH-key" class="headerlink" title="SSH key"></a><code>SSH key</code></h4><p><code>SSH key</code> 的<strong>作用</strong>：实现本地仓库和 <code>Github</code> 之间免登录的加密数据传输。</p><p><code>SSH key</code> 的<strong>好处</strong>：免登录身份认证、数据加密传输。</p><p><code>SSH key</code> 由<strong>两部分组成</strong>，分别是：</p><p>① <code>id_rsa</code>（私钥文件，存放于客户端的电脑中即可）</p><p>② <code>id_rsa.pub</code>（公钥文件，需要配置到 <code>Github</code> 中）</p><h4 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h4><p>① 打开 Git Bash</p><p>② 粘贴如下的命令，并将 <code>your_email@example.com</code> 替换为注册 <code>Github</code> 账号时填写的邮箱：</p><ul><li><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code> </li></ul><p>③ 连续敲击 3 次回车，即可在 <code>C:\Users\用户名文件夹\.ssh</code> 目录中生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件</p><h4 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h4><p>① 使用记事本打开 <code>id_rsa.pub</code> 文件，复制里面的文本内容</p><p>② 在浏览器中登录 <code>Github</code>，点击头像 -&gt; <code>Settings -&gt; SSH and GPG Keys -&gt; New SSH key</code></p><p>③ 将 <code>id_rsa.pub</code> 文件中的内容，粘贴到 <code>Key</code> 对应的文本框中</p><p>④ 在 <code>Title</code> 文本框中任意填写一个名称，来标识这个 <code>Key</code> 从何而来</p><h4 id="检测-Github-的-SSH-key-是否配置成功"><a href="#检测-Github-的-SSH-key-是否配置成功" class="headerlink" title="检测 Github 的 SSH key 是否配置成功"></a>检测 <code>Github</code> 的 <code>SSH key</code> 是否配置成功</h4><ul><li><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com或者ssh -T git@gitee.com</span><br></pre></td></tr></table></figure></li><li><p>上述的命令执行成功后，可能会看到如下的提示消息：</p><p>  <img src="img/ssh%E9%85%8D%E7%BD%AE%E6%A3%80%E6%9F%A5.png"></p></li><li><p>输入 <code>yes</code> 之后，如果能看到类似于下面的提示消息，证明 <code>SSH key</code> 已经配置成功了：</p><p>  <img src="img/ssh%E9%85%8D%E7%BD%AE%E6%A3%80%E6%9F%A501.png"></p></li></ul><h4 id="基于-SSH-将本地仓库上传到-Github"><a href="#基于-SSH-将本地仓库上传到-Github" class="headerlink" title="基于 SSH 将本地仓库上传到 Github"></a>基于 SSH 将本地仓库上传到 <code>Github</code></h4><p><img src="img/%E5%9F%BA%E4%BA%8ESSH%E4%B8%8A%E4%BC%A0%E5%88%B0github.png"></p><p><strong>注意：</strong> <code>git push origin master</code> 也能进行提交，<code>git push origin -u</code> 的话可以提交代码，并且把<code>origin</code> 当作默认的主机，后续直接 <code>git push</code> 就可以提交到<code>origin</code>对应的主机</p><h3 id="4-4-查看连接和删除连接"><a href="#4-4-查看连接和删除连接" class="headerlink" title="4.4 查看连接和删除连接"></a>4.4 查看连接和删除连接</h3><blockquote><p>git  remote -v  【查看有没有跟远程仓库建立联系】</p><p>git remote remove origin 【删除已经建立的联系】</p></blockquote><h2 id="【5】将远程仓库克隆到本地"><a href="#【5】将远程仓库克隆到本地" class="headerlink" title="【5】将远程仓库克隆到本地"></a>【5】将远程仓库克隆到本地</h2><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 远程仓库的地址</span><br></pre></td></tr></table></figure><h1 id="七、Git本地分支（★）"><a href="#七、Git本地分支（★）" class="headerlink" title="七、Git本地分支（★）"></a>七、<code>Git</code>本地分支（★）</h1><h2 id="【1】分支基础"><a href="#【1】分支基础" class="headerlink" title="【1】分支基础"></a>【1】分支基础</h2><h3 id="1-1-分支的概念"><a href="#1-1-分支的概念" class="headerlink" title="1.1 分支的概念"></a>1.1 分支的概念</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习<code>SVN</code>。如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了<code>Git</code>又学会了<code>SVN</code>！</p><p><img src="img/%E5%88%86%E6%94%AF%E7%9A%84%E6%A6%82%E5%BF%B5.png"></p><h3 id="1-2-分支在实际开发中的作用"><a href="#1-2-分支在实际开发中的作用" class="headerlink" title="1.2 分支在实际开发中的作用"></a>1.2 分支在实际开发中的作用</h3><p>在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目</p><p>功能的开发，例如：</p><p><img src="img/%E5%88%86%E6%94%AF%E7%9A%84%E4%BD%9C%E7%94%A8.png"></p><h3 id="1-3-master-主分支"><a href="#1-3-master-主分支" class="headerlink" title="1.3 master 主分支"></a>1.3 master 主分支</h3><p>在初始化本地 <code>Git</code> 仓库的时候，<code>Git</code> 默认已经帮我们创建了一个名字叫做 <code>master</code> 的分支。通常我们把这个</p><p><code>master</code> 分支叫做主分支。</p><p><img src="img/%E4%B8%BB%E5%88%86%E6%94%AF.png"></p><p>在实际工作中，<code>master</code> 主分支的作用是：<strong>用来保存和记录整个项目已完成的功能代码</strong>。</p><p>因此，<strong>不允许程序员直接在 <code>master</code> 分支上修改代码</strong>，因为这样做的风险太高，容易导致整个项目崩溃。</p><h3 id="1-4-功能分支"><a href="#1-4-功能分支" class="headerlink" title="1.4 功能分支"></a>1.4 功能分支</h3><p>由于程序员不能直接在 <code>master</code> 分支上进行功能的开发，所以就有了功能分支的概念。</p><p><strong>功能分支</strong>指的是专门用来开发新功能的分支，它是临时从 <code>master</code> 主分支上分叉出来的，当新功能开发且测试</p><p>完毕后，最终需要合并到 <code>master</code> 主分支上，如图所示：</p><p><img src="img/%E5%8A%9F%E8%83%BD%E5%88%86%E6%94%AF.png"></p><h2 id="【2】查看分支列表-⭐"><a href="#【2】查看分支列表-⭐" class="headerlink" title="【2】查看分支列表(⭐)"></a>【2】查看分支列表(⭐)</h2><p>使用如下的命令，可以查看当前 Git 仓库中所有的分支列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>运行的结果如下所示：</p><p><img src="img/%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.png"></p><p><strong>注意：</strong>分支名字前面的 ***** 号表示当前所处的分支。</p><h2 id="【3】创建新分支"><a href="#【3】创建新分支" class="headerlink" title="【3】创建新分支"></a>【3】创建新分支</h2><p>使用如下的命令，可以<strong>基于当前分支</strong>，<strong>创建一个新的分支</strong>，此时，新分支中的代码和当前分支完全一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src="img/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF.png"></p><h2 id="【4】切换分支"><a href="#【4】切换分支" class="headerlink" title="【4】切换分支"></a>【4】切换分支</h2><p>使用如下的命令，可以<strong>切换到指定的分支上</strong>进行开发：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout login</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src="img/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png"></p><h2 id="【5】创建并切换分支-⭐"><a href="#【5】创建并切换分支-⭐" class="headerlink" title="【5】创建并切换分支(⭐)"></a>【5】创建并切换分支(⭐)</h2><p>使用如下的命令，可以<strong>创建指定名称的新分支</strong>，并<strong>立即切换到新分支上</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -b 表示创建一个新分支<span class="comment"># checkout 表示切换到刚才新建的分支上git checkout -b 分支名称</span></span></span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src="img/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E5%B9%B6%E4%B8%94%E5%88%87%E6%8D%A2.png"></p><p><strong>注意：</strong></p><p>“<code>git checkout -b 分支名称</code>“ 是下面</p><p>两条命令的简写形式：</p><p>① <code>git branch</code> 分支名称</p><p>② <code>git checkout</code> 分支名称</p><h2 id="【6】合并分支（⭐⭐⭐）"><a href="#【6】合并分支（⭐⭐⭐）" class="headerlink" title="【6】合并分支（⭐⭐⭐）"></a>【6】合并分支（⭐⭐⭐）</h2><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 <code>master</code> 主分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 切换到 master 分支git checkout master<span class="comment"># 2. 在master 分支上运行 git merge 命令，将 login 分支的代码合班到 master 分支git merge login</span></span></span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src="img/%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png"></p><p><strong>合并分支时的注意点</strong>：</p><p>假设要把 C 分支的代码合并到 A 分支，</p><p>则必须<strong>先切换到 A 分支</strong>上，<strong>再运行 git merge 命令</strong>，来合并 C 分支！</p><h2 id="【7】删除分支"><a href="#【7】删除分支" class="headerlink" title="【7】删除分支"></a>【7】删除分支</h2><p>当把功能分支的代码合并到 <code>master</code> 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure><p>图示如下：</p><p><img src="img/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png"></p><h2 id="【8】解决分支合并时的冲突问题（⭐⭐⭐）"><a href="#【8】解决分支合并时的冲突问题（⭐⭐⭐）" class="headerlink" title="【8】解决分支合并时的冲突问题（⭐⭐⭐）"></a>【8】解决分支合并时的冲突问题（⭐⭐⭐）</h2><p>如果<strong>在两个不同的分支中</strong>，对<strong>同一个文件</strong>进行了<strong>不同的修改</strong>，Git 就没法干净的合并它们。 此时，我们需要打开</p><p>这些包含冲突的文件然后<strong>手动解决冲突</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 假设：在把 reg 分支合并到 master 分支期间git checkout mastergit merge reg<span class="comment"># 打开包含冲突的文件，手动解决冲突之后，再执行如下命令git add .git commit -m &quot;解决了分支合并冲突的问题&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="八、远程仓库分支操作"><a href="#八、远程仓库分支操作" class="headerlink" title="八、远程仓库分支操作"></a>八、远程仓库分支操作</h1><h2 id="将本地分支推送到远程仓库-⭐⭐⭐"><a href="#将本地分支推送到远程仓库-⭐⭐⭐" class="headerlink" title="将本地分支推送到远程仓库(⭐⭐⭐)"></a>将本地分支推送到远程仓库(⭐⭐⭐)</h2><p>如果是<strong>第一次</strong>将本地分支推送到远程仓库，需要运行如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数git push -u 远程仓库的别名 本地分支名称:远程分支名称<span class="comment"># 实际案例git push -u origin payment:pay# 如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化git push -u origin payment</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>第一次推送分支需要带 <strong>-u 参数</strong>，此后可以直接使用 <code>git push</code> 推送代码到远程分支。</p><h2 id="查看远程仓库中所有的分支列表"><a href="#查看远程仓库中所有的分支列表" class="headerlink" title="查看远程仓库中所有的分支列表"></a>查看远程仓库中所有的分支列表</h2><p>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><h2 id="跟踪分支-⭐⭐⭐"><a href="#跟踪分支-⭐⭐⭐" class="headerlink" title="跟踪分支(⭐⭐⭐)"></a>跟踪分支(⭐⭐⭐)</h2><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例git checkout pay<span class="comment"># 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名git checkout -b 本地分支名称 远程仓库名称/远程分支名称# 示例git checkout -b payment origin/pay</span></span></span><br></pre></td></tr></table></figure><h2 id="拉取远程分支的最新的代码"><a href="#拉取远程分支的最新的代码" class="headerlink" title="拉取远程分支的最新的代码"></a>拉取远程分支的最新的代码</h2><p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码一致git pull</span></span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><p>可以使用如下的命令，删除远程仓库中指定的分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除远程仓库中，制定名称的远程分支git push 远程仓库名称 --delete 远程分支名称<span class="comment"># 示例git push origin --delete pay</span></span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>能够掌握 <code>Git</code> 中基本命令的使用<ul><li><code>git init</code></li><li><code>git add .</code></li><li><code>git commit –m &quot;提交消息&quot;</code> </li><li><code>git status</code> 和 <code>git status -s</code></li></ul></li><li>能够使用 <code>Github</code> 创建和维护远程仓库<ul><li>能够配置 <code>Github</code> 的 <code>SSH</code> 访问</li><li>能够将本地仓库上传到 <code>Github</code></li></ul></li><li>能够掌握 <code>Git</code> 分支的基本使用<ul><li><code>git checkout -b 新分支名称</code></li><li><code>git push -u origin 新分支名称</code></li><li><code>git checkout 分支名称</code></li><li><code>git branch</code></li></ul></li></ul><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>创建仓库</td></tr><tr><td>git add 文件名 /git add .</td><td>跟踪文件，可以把新建文件/修改过的文件添加到暂存区</td></tr><tr><td>git status /git status -s</td><td>查看文件的状态</td></tr><tr><td>git commit -m ‘备注信息’</td><td>把暂存区中的文件提交到仓库中</td></tr><tr><td>git commit -a -m ‘备注信息’</td><td>把修改的文件直接提交到仓库中跳过添加到暂存区步骤</td></tr><tr><td>git checkout – 文件名</td><td>前提是仓库中文件都是未被修改的，可以返回前一个版本的内容</td></tr><tr><td>git reset HEAD 文件名/git reset HEAD .</td><td>撤销添加到暂存区</td></tr><tr><td>git rm -f  文件名  git commit -m ‘备注信息’</td><td>同时删除工作区和仓库中的文件</td></tr><tr><td>git rm cache  git commit -m ‘备注信息’</td><td>把仓库中的文件删除，保留工作区的文件</td></tr><tr><td>git log</td><td>按时间顺序列出所有提交历史，最近提交的靠前</td></tr><tr><td>git reflog</td><td>简单显示所有提交历史</td></tr><tr><td>git log -2</td><td>只展示最新的两条提交历史，数字可以按需填写</td></tr><tr><td>git reset –hard 版本号</td><td>回退到指定版本（切换版本前需要把当前仓库清空）</td></tr><tr><td>git push</td><td>推送本地到远程仓库</td></tr><tr><td>git pull</td><td>拉取远程到本地仓库</td></tr><tr><td>git clone 远程仓库的地址</td><td>把远程仓库的文件克隆到本地</td></tr><tr><td>git  branch  新分支名称</td><td>新建分支(前提是在主分支)</td></tr><tr><td>git  branch</td><td>查看分支列表</td></tr><tr><td>git  checkout  分支名</td><td>切换分支</td></tr><tr><td>git  checkout -b  新分支名称</td><td>新建分支并切换到该分支(前提是在主分支)</td></tr><tr><td>git  checkout  master   git  merge  a</td><td>把a分支上的内容合并到主分支上，前提是要先切换到主分支</td></tr><tr><td>git  branch  -d  分支名称</td><td>删除分支</td></tr><tr><td>git  push  -u  origin 本地分支:别名</td><td>把本地分支推送到远程仓库   第一次之后推送只需要git push</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax总结</title>
      <link href="2021/05/05/ajax%E6%80%BB%E7%BB%93/"/>
      <url>2021/05/05/ajax%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一-服务器"><a href="#一-服务器" class="headerlink" title="一 服务器"></a>一 服务器</h1><h2 id="1-1-服务器"><a href="#1-1-服务器" class="headerlink" title="1.1 服务器"></a>1.1 服务器</h2><p>上网过程中，负责 <strong>存放或对外提供资源</strong> 的电脑，叫做服务器</p><h2 id="1-2-客户端"><a href="#1-2-客户端" class="headerlink" title="1.2 客户端"></a>1.2 客户端</h2><p>在上网过程中，负责 <strong>获取和消费资源</strong> 的电脑，叫做客户端</p><h2 id="1-3-URL的组成"><a href="#1-3-URL的组成" class="headerlink" title="1.3 URL的组成"></a>1.3 URL的组成</h2><p>URL地址一般由三部分组成:</p><ul><li>客户端与服务器之间的 <strong>通信协议</strong></li><li>存有该资源的 <strong>服务器名称（主机名）</strong></li><li>资源在服务器上 <strong>具体的存放位置（请求路径）</strong></li></ul><h2 id="1-4-客户端与服务器通信过程交互过程"><a href="#1-4-客户端与服务器通信过程交互过程" class="headerlink" title="1.4 客户端与服务器通信过程交互过程"></a>1.4 客户端与服务器通信过程交互过程</h2><ul><li>客户端与服务器之间的通讯过程，分为： <strong>请求-处理-响应</strong> 三个步骤</li><li>网页中每一个资源，都是通过 <strong>请求-处理-响应</strong> 的方式从服务器获取回来的</li></ul><h2 id="1-5-服务器提供的资源"><a href="#1-5-服务器提供的资源" class="headerlink" title="1.5 服务器提供的资源"></a>1.5 服务器提供的资源</h2><p>文字内容、Image图片、Audio音频、Video视频、数据</p><h2 id="1-6-网页中如何请求数据"><a href="#1-6-网页中如何请求数据" class="headerlink" title="1.6 网页中如何请求数据"></a>1.6 网页中如何请求数据</h2><ul><li><p>通过地址栏发送请求</p><blockquote><p>这种方式：用来请求网页。</p></blockquote></li><li><p>通过表单发送请求</p><blockquote><p>这种方式，有很大的弊端。页面会发生跳转，用户体验非常差</p></blockquote></li><li><p>通过ajax对象发送请求</p><blockquote><p>可以在页面不发生跳转或刷新的情况下，向服务器发送请求！！！【用户体验极佳】</p></blockquote></li></ul><h2 id="1-7-资源的请求方式"><a href="#1-7-资源的请求方式" class="headerlink" title="1.7 资源的请求方式"></a>1.7 资源的请求方式</h2><ul><li><code>get 请求</code>，通常用于 <strong>获取服务器资源</strong>（要资源）</li><li><code>post 请求</code>，通常用于 <strong>向服务器提交数据</strong>（送资源）</li></ul><h1 id="二-Ajax"><a href="#二-Ajax" class="headerlink" title="二 Ajax"></a>二 Ajax</h1><h2 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h2><p>当前网页没有刷新、没有跳转。<code>Ajax</code>能让我们轻松实现 <strong>网页</strong> 与 <strong>服务器</strong>之间的 <strong>数据交互</strong></p><h2 id="2-2-应该用场景"><a href="#2-2-应该用场景" class="headerlink" title="2.2 应该用场景"></a>2.2 应该用场景</h2><ul><li>场景一：用户名检测</li><li>场景二：搜索提示</li><li>场景三：数据无刷新分页显示</li><li>场景四：数据的无刷新增删改查</li></ul><h1 id="三-jQuery中的Ajax-⭐⭐⭐"><a href="#三-jQuery中的Ajax-⭐⭐⭐" class="headerlink" title="三 jQuery中的Ajax  ⭐⭐⭐"></a>三 jQuery中的Ajax  ⭐⭐⭐</h1><h2 id="3-1-get-函数介绍"><a href="#3-1-get-函数介绍" class="headerlink" title="3.1 $.get() 函数介绍"></a>3.1 $.get() 函数介绍</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;发送get请求，获取的所有数据&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;发送get请求,获取参数为<span class="number">3</span>的数据&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        $.get(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// res请求成功后，获取到的数据（服务器端响应回来的数据）</span></span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;#btn2&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        $.get(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, &#123;</span><br><span class="line">            id: <span class="number">3</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// res请求成功后，获取到的数据（服务器端响应回来的数据）</span></span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-post-函数介绍"><a href="#3-2-post-函数介绍" class="headerlink" title="3.2 $.post() 函数介绍"></a>3.2 $.post() 函数介绍</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;发送post请求&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;button&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            bookname: <span class="string">&#x27;老吴的一天&#x27;</span>,</span><br><span class="line">            author: <span class="string">&#x27;老吴&#x27;</span>,</span><br><span class="line">            publisher: <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        $.post(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, data, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-ajax-函数介绍"><a href="#3-3-ajax-函数介绍" class="headerlink" title="3.3 $.ajax() 函数介绍"></a>3.3 $.ajax() 函数介绍</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;发送get请求&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;发送post请求&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                id: <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;#btn2&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                bookname: <span class="string">&#x27;Ajax的一天&#x27;</span>,</span><br><span class="line">                author: <span class="string">&#x27;Ajax&#x27;</span>,</span><br><span class="line">                publisher: <span class="string">&#x27;黑马程序员&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-参数数据是键值对字符串"><a href="#3-4-参数数据是键值对字符串" class="headerlink" title="3.4 参数数据是键值对字符串"></a>3.4 参数数据是键值对字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;发送get请求&lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;发送post请求&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span><br><span class="line">            data: <span class="string">&#x27;id=3&#x27;</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;#btn2&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,</span><br><span class="line">            data: <span class="string">&#x27;bookname=admin&amp;author=user&amp;publisher=黑马程序员&#x27;</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="四-接口"><a href="#四-接口" class="headerlink" title="四 接口"></a>四 接口</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>使用 <code>Ajax</code> 请求数据时，被请求的 <code>URL</code> 地址，就叫做 数据接口（简称<strong>接口</strong>）。同时，每个接口必须有请求方式。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;getbooks 获取图书列表的接口（get请求）</span><br><span class="line">http:&#x2F;&#x2F;www.liulongbin.top:3006&#x2F;api&#x2F;addbook  添加图书的接口（post请求）</span><br></pre></td></tr></table></figure><h2 id="4-2-接口文档"><a href="#4-2-接口文档" class="headerlink" title="4.2 接口文档"></a>4.2 接口文档</h2><p>调用接口的依据<strong>。好的接口文档包含了对 <strong>接口URL</strong>，</strong>参数以及 <strong>输出内容</strong> 的说明</p><h3 id="接口文档的组成部分"><a href="#接口文档的组成部分" class="headerlink" title="接口文档的组成部分"></a>接口文档的组成部分</h3><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><ul><li><strong>接口名称：</strong>用来标识各个接口的简单说明，如 <strong>登录接口</strong>，<strong>获取图书列表接口</strong>等</li><li><strong>接口URL：</strong>接口的调用地址</li><li><strong>调用方式：</strong>接口的调用方式，如 <strong>GET</strong> 或者 <strong>POST</strong></li><li><strong>参数格式：</strong>接口需要传递的参数，每个参数必须包含 <strong>参数名称</strong>、<strong>参数类型</strong>、<strong>是否必选</strong>、<strong>参数说明</strong> 这4项内容</li><li><strong>响应格式：</strong>接口的返回值的详细描述，一般包含<strong>数据名称</strong>、<strong>数据类型</strong>、<strong>说明</strong>3项内容</li><li><strong>返回示例（可选）：</strong>通过对象的形式，列举服务器返回数据的结构</li></ul><h1 id="五-图书案例"><a href="#五-图书案例" class="headerlink" title="五 图书案例"></a>五 图书案例</h1><h2 id="5-1-获取图书列表-渲染页面"><a href="#5-1-获取图书列表-渲染页面" class="headerlink" title="5.1 获取图书列表,渲染页面"></a>5.1 获取图书列表,渲染页面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">getBookList();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBookList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用接口</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断是否获取成功</span></span><br><span class="line">            <span class="keyword">if</span> (res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&#x27;获取图书列表失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建空数组</span></span><br><span class="line">            <span class="keyword">var</span> arr = [];</span><br><span class="line">            <span class="comment">// 渲染图书数据到页面</span></span><br><span class="line">            $.each(res.data, <span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// index是索引号，item数据项</span></span><br><span class="line">                <span class="keyword">var</span> tr = <span class="string">`&lt;tr&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;<span class="subst">$&#123;item.id&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;<span class="subst">$&#123;item.bookname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;<span class="subst">$&#123;item.author&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;<span class="subst">$&#123;item.publisher&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&lt;a href=&#x27;javascript:;&#x27; data-id=&#x27;<span class="subst">$&#123;item.id&#125;</span>&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                         &lt;/tr&gt;`</span>;</span><br><span class="line">                <span class="comment">// 把tr放到数组中</span></span><br><span class="line">                arr.push(tr);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 把数组拼接成字符串 arr.join(&#x27;&#x27;)</span></span><br><span class="line">            $(<span class="string">&quot;#tb&quot;</span>).empty().html(arr.join(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-删除图书"><a href="#5-2-删除图书" class="headerlink" title="5.2 删除图书"></a>5.2 删除图书</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给a标签注册单击事件委托</span></span><br><span class="line">$(<span class="string">&quot;#tb&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 询问用户是否确认删除</span></span><br><span class="line">    <span class="keyword">var</span> res = confirm(<span class="string">&#x27;你确定要删除吗&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前图书的id,e.target得到的是DOM属性</span></span><br><span class="line">    <span class="keyword">var</span> id = $(e.target).attr(<span class="string">&#x27;data-id&#x27;</span>);</span><br><span class="line">    <span class="comment">// var id = $(this).attr(&#x27;data-id&#x27;);</span></span><br><span class="line">    <span class="comment">// console.log(id);</span></span><br><span class="line">    <span class="comment">// 调用接口，删除图书</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/delbook&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            id: id</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断是否删除成功</span></span><br><span class="line">            <span class="keyword">if</span> (res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&#x27;删除图书失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新获取数据，重新渲染</span></span><br><span class="line">            getBookList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-3-添加图书"><a href="#5-3-添加图书" class="headerlink" title="5.3 添加图书"></a>5.3 添加图书</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btnAdd&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取表单数据</span></span><br><span class="line">    <span class="keyword">var</span> bookname = $(<span class="string">&quot;#iptBookname&quot;</span>).val().trim();</span><br><span class="line">    <span class="keyword">var</span> author = $(<span class="string">&quot;#iptAuthor&quot;</span>).val().trim();</span><br><span class="line">    <span class="keyword">var</span> publisher = $(<span class="string">&quot;#iptPublisher&quot;</span>).val().trim();</span><br><span class="line">    <span class="comment">// 判断数据是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (bookname.length === <span class="number">0</span> || author.length === <span class="number">0</span> || publisher.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> alert(<span class="string">&#x27;请输入完成的信息&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            bookname,</span><br><span class="line">            author,</span><br><span class="line">            publisher</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断是否添加成功</span></span><br><span class="line">            <span class="keyword">if</span> (res.status !== <span class="number">201</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> alert(<span class="string">&#x27;添加图书失败，请稍后重试&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新获取数据，重新渲染</span></span><br><span class="line">            getBookList();</span><br><span class="line">            <span class="comment">// 清空表单项</span></span><br><span class="line">            $(<span class="string">&quot;#iptBookname&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            $(<span class="string">&quot;#iptAuthor&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            $(<span class="string">&quot;#iptPublisher&quot;</span>).val(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="六-Form表单"><a href="#六-Form表单" class="headerlink" title="六 Form表单"></a>六 Form表单</h1><h2 id="6-1-表单的组成部分"><a href="#6-1-表单的组成部分" class="headerlink" title="6.1 表单的组成部分"></a>6.1 表单的组成部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/login&quot;</span> target=<span class="string">&quot;_blank&quot;</span> method=<span class="string">&quot;&quot;</span>&gt;    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uname&quot;</span>&gt;    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span> id=<span class="string">&quot;&quot;</span>&gt;    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;/form&gt;</span><br></pre></td></tr></table></figure><ul><li>表单标签</li><li>表单域：包含了文本框，密码框，隐藏域，都行文本框，复选框，单选框，下拉选择框和文件上传框等等</li><li>表单按钮：通过设置<code>type</code>属性为<code>submit</code>来触发<code>form</code>表单的提交</li></ul><p>表单项必须设置name属性，否则收集不到数据</p><p>​        1）method它的默认值是get</p><p>​        2）get提交方式，把表单数据以键值对格式放到URL地址后面的？后面</p><p>​        3）post提交方式，把表单数据隐秘的提交</p><h2 id="6-2-标签的属性"><a href="#6-2-标签的属性" class="headerlink" title="6.2  标签的属性"></a>6.2 <form> 标签的属性</h2><ul><li><p>action</p><p>  <code>action</code> 属性用来规定当提交表单时，<strong>向何处发送表单数据</strong></p></li><li><p>target</p><p>  <code>target</code> 属性用来规定 在何处打开 <code>action URL</code></p><p>  _blank：在新窗口打开    _self：默认在当前窗口打开</p></li><li><p>method</p><p>  <code>method</code> 属性用来规定 <strong>以何种方式</strong> 把表单数据提交到 action URL</p><p>  它的可选值有两个，分别是 <code>get</code> 和 <code>post</code></p></li><li><p>enctype</p><p>  nctype`属性用来规定在 <strong>发送表单数据之前如何对数据进行编码</strong></p></li></ul><h2 id="6-3-表单的同步提交及缺点"><a href="#6-3-表单的同步提交及缺点" class="headerlink" title="6.3 表单的同步提交及缺点"></a>6.3 表单的同步提交及缺点</h2><ul><li><p>什么是表单的同步提交</p><p>  通过点击 submit 按钮，触发表单提交的操作，从而使页面跳转到 <code>action URL</code> 的行为，叫做表单的同步提交</p></li><li><p>表单同步提交的缺点</p><ul><li><code>&lt;form&gt;</code> 表单同步提交后，整个页面会发生跳转，<strong>跳转到 action URL 所指向的地址</strong>，用户体验很差</li><li><code>&lt;form&gt;</code> 表单同步提交后，页面之前的状态和数据会丢失</li></ul></li><li><p>如何解决呢？</p><p>  表单只复杂采集数据，Ajax负责将数据提交到服务器</p></li></ul><h2 id="6-4-通过Ajax提交表单数据-⭐⭐⭐"><a href="#6-4-通过Ajax提交表单数据-⭐⭐⭐" class="headerlink" title="6.4 通过Ajax提交表单数据 ⭐⭐⭐"></a>6.4 通过Ajax提交表单数据 ⭐⭐⭐</h2><h3 id="6-4-1-监听表单提交事件"><a href="#6-4-1-监听表单提交事件" class="headerlink" title="6.4.1 监听表单提交事件"></a>6.4.1 监听表单提交事件</h3><p>在 <code>jQuery</code> 中，可以使用如下两种方式，监听到表单的提交事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#from1&quot;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  alert(<span class="string">&#x27;监听到表单的提交事件&#x27;</span>);&#125;);$(<span class="string">&quot;#from1&quot;</span>).on(<span class="string">&#x27;submit&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  alert(<span class="string">&#x27;监听到表单的提交事件&#x27;</span>);&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-4-2-阻止表单默认提交行为-⭐⭐⭐"><a href="#6-4-2-阻止表单默认提交行为-⭐⭐⭐" class="headerlink" title="6.4.2 阻止表单默认提交行为(⭐⭐⭐)"></a>6.4.2 阻止表单默认提交行为(⭐⭐⭐)</h3><p>当监听到表单的提交事件以后，可以调用事件对象的 <code>event.preventDefault()</code> 函数，来阻止表单的提交和页面的跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#f1&quot;</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;    <span class="comment">/* 3.阻止默认提交行为 */</span>      e.preventDefault();&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-4-3-快速获取表单数据-⭐⭐⭐"><a href="#6-4-3-快速获取表单数据-⭐⭐⭐" class="headerlink" title="6.4.3 快速获取表单数据(⭐⭐⭐)"></a>6.4.3 快速获取表单数据(⭐⭐⭐)</h3><p>serialize() 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="number">1.</span>准备form表单 --&gt;<span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;f1&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="comment">/* 2.监听表单事件 */</span>    <span class="comment">// 方式1    $(&quot;#f1&quot;).on(&#x27;submit&#x27;,function()&#123;        alert(&#x27;ok&#x27;);    &#125;)    // 方式2    $(&quot;#f1&quot;).submit(function (e) &#123;        // alert(&#x27;ko&#x27;);        /* 3.阻止默认提交行为 */        e.preventDefault();        /* 4.收集表单数据 */        var data = $(&quot;#f1&quot;).serialize();        console.log(data); // username=用户名的值&amp;password=密码的值    &#125;)    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="6-5-案例：评论列表"><a href="#6-5-案例：评论列表" class="headerlink" title="6.5 案例：评论列表"></a>6.5 案例：评论列表</h2><h3 id="6-5-1-HTML结构"><a href="#6-5-1-HTML结构" class="headerlink" title="6.5.1 HTML结构"></a>6.5.1 HTML结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span> <span class="attr">id</span>=<span class="string">&quot;formAddCmt&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span>&gt;</span>评论人：<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span>    <span class="tag">&lt;<span class="name">div</span>&gt;</span>评论内容：<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-5-2-js结构"><a href="#6-5-2-js结构" class="headerlink" title="6.5.2  js结构"></a>6.5.2  js结构</h3><ul><li>定义函数来获取评论列表数据 <code>getCommentList()</code></li><li>查阅接口文档，关注请求<code>url</code>，是否需要携带参数，请求方式</li><li>利用 <code>$.ajax()</code> 来进行请求</li><li>在 <code>success</code> 回调函数中，判断请求数据是否成功，如果状态码不是200，提示用户</li><li>创建一个空数组（<code>rows</code>），用来存放每一个元素的<code>html</code>字符串结构 </li><li>遍历服务器返回的数据，每遍历一次，拼接一个对应的<code>html</code>字符串结构，然后放入到数组中</li><li>找到list容器，先清空一下里面内容，然后利用 html 设置新的数据</li><li>把之前<code>panel-body</code>的标签改成 <code>form</code> 标签</li><li>给每一个输入框设置 <code>name</code> 属性，<strong>name属性的值最好与接口文档定义的参数名称一致</strong></li><li>注册 <code>sumbit</code> 事件，阻止表单提交的默认行为</li><li>获取用户输入内容（利用 <code>serialize()</code> ）</li><li>查阅接口文档</li><li>利用 <code>$.post()</code> 发送请求，传入数据</li><li>在成功回调函数里面判断 返回的 <code>status</code> 是否是201，如果是代表成功，失败进行提示</li><li>刷新页面（调用 <code>getCommentList()</code>），清空表单内容（<code>$(&#39;#formAddCmt&#39;)[0].reset()</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口函数$(function () &#123;    // 1.获取评论信息，渲染页面    getCommentList();    function getCommentList() &#123;        $.ajax(&#123;            // type: &#x27;get&#x27;,            // 可以通过method配置项设置请求方式            method: &#x27;get&#x27;,            url: &#x27;http://www.liulongbin.top:3006/api/cmtlist&#x27;,            success: function (res) &#123;                // 判断是否获取成功                // if(res.status !== 200) return alert(&quot;获取评论失败&quot;);                if (res.status !== 200) &#123;                    return alert(&#x27;获取评论失败&#x27;);                &#125;                var rows = [];                $.each(res.data, function (index, item) &#123;                    var li = `&lt;li class=&quot;list-group-item&quot;&gt;                                &lt;span class=&quot;badge&quot; style=&quot;background-color: #F0AD4E;&quot;&gt;评论时间：$&#123;item.time&#125;&lt;/span&gt;                                &lt;span class=&quot;badge&quot; style=&quot;background-color: #5BC0DE;&quot;&gt;评论人：$&#123;item.username&#125;&lt;/span&gt;                                $&#123;item.content&#125;                            &lt;/li&gt;`;                    rows.push(li);                &#125;);                // 渲染数据到页面                $(&quot;#cmt-list&quot;).empty().html(rows.join(&#x27;&#x27;));            &#125;        &#125;);    &#125;    // 2.注册提交事件    $(&quot;#formAddCmt&quot;).submit(function (e) &#123;        // 阻止默认提交行为        e.preventDefault();        // 获取表单数据        var data = $(this).serialize();        // 发送Ajax请求        $.ajax(&#123;            method: &#x27;post&#x27;,            url: &#x27;http://www.liulongbin.top:3006/api/addcmt&#x27;,            data: data,            success: function (res) &#123;                if (res.status !== 201) return alert(&#x27;发表评论失败&#x27;);                getCommentList();                // 清空表单内容（重置表单）                $(&#x27;#formAddCmt&#x27;)[0].reset()            &#125;        &#125;)    &#125;)&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="6-7-案例-新闻列表"><a href="#6-7-案例-新闻列表" class="headerlink" title="6.7 案例-新闻列表"></a>6.7 案例-新闻列表</h2><p>获取新闻列表数据</p><ul><li>定义函数，获取新闻列表数据 <code>getNewsList()</code></li><li>查阅接口文档，关注 请求<code>url</code>，请求方式，请求参数，响应数据</li><li>利用 <code>$.get()</code> 发起请求</li><li>在回调函数中，判断请求是否成功</li></ul><p>定义新闻列表<code>item</code>模板</p><ul><li>创建 script 标签，更改type属性值为 <code>text/html</code>，给模板定义id</li><li>找到静态页面中 item 的结构，拷贝到模板里面</li></ul><p>编译模板渲染结构</p><ul><li>在请求成功的回调里面，先对返回数据进行改造，里面返回的 <code>tags</code> 是一个字符串，我们需要分割成数组</li><li>调用 <code>template()</code> 方法，传入<code>id</code>和返回的数据</li><li>把函数的返回值添加到页面容器中</li><li>在模板中利用 <code>each</code> 遍历列表</li><li>利用 <code>$value</code> 能够拿到每一个<code>item</code>项</li><li>设置图片 <code>img</code>，<strong>注意：</strong>需要拼接请求根路径</li><li>设置标题 <code>title</code></li><li>设置标签，注意：标签在之前改造成数组了，这里又需要进行遍历</li><li>设置来源 <code>source</code></li><li>设置时间，注意：时间需要格式化，利用过滤器来实现</li><li>设置评论数 <code>cmtcount</code></li></ul><p><strong>模板代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;news-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-news&quot;</span>&gt;</span><span class="handlebars"><span class="xml">    </span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> data&#125;&#125;</span><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-item&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;thumb&quot;</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">&#x27;http://www.liulongbin.top:3006&#x27;</span> + $value.img&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-box&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span>                </span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> $value.tags.split(<span class="name">&#x27;,&#x27;</span>)&#125;&#125;</span><span class="xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>                </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.source</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.time</span> | dateFormat&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                <span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：</span><span class="template-variable">&#123;&#123;<span class="name">$value.cmtcount</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>js代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口函数$(function () &#123;    // 补零操作    function addZero(n) &#123;        return n &lt; 10 ? &#x27;0&#x27; + n : n;    &#125;    template.defaults.imports.dateFormat = function (dtStr) &#123;        var dt = new Date(dtStr);        var y = dt.getFullYear();        var m = dt.getMonth() + 1;        m = addZero(m);        var d = dt.getDate();        d = addZero(d);        var hh = dt.getHours();        hh = addZero(hh);        var mm = dt.getMinutes();        mm = addZero(mm);        var ss = dt.getSeconds();        ss = addZero(ss);        return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`;    &#125;    // 获取新闻数据    getNews();    function getNews() &#123;        $.ajax(&#123;            method: &#x27;get&#x27;,            url: &#x27;http://www.liulongbin.top:3006/api/news&#x27;,            success: function (res) &#123;                if (res.status !== 200) return alert(&#x27;获取新闻信息失败&#x27;);                var htmlStr = template(&#x27;tpl-news&#x27;, res);                $(&quot;#news-list&quot;).html(htmlStr);            &#125;        &#125;)    &#125;&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="6-8-模板引擎的实现原理"><a href="#6-8-模板引擎的实现原理" class="headerlink" title="6.8 模板引擎的实现原理"></a>6.8 模板引擎的实现原理</h2><h3 id="6-8-1-exec函数"><a href="#6-8-1-exec函数" class="headerlink" title="6.8.1 exec函数"></a>6.8.1 exec函数</h3><p><code>exec()</code> 函数用于 <strong>检索字符串</strong> 中的正在表达式的匹配</p><p>如果字符串中又匹配的值，<strong>则返回该匹配值</strong>，否则返回 <strong>null</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span><span class="keyword">var</span> pattern = <span class="regexp">/o/</span><span class="keyword">var</span> result = pattern.exec(str)<span class="built_in">console</span>.log(result) <span class="comment">// 数组的第1个元素，匹配到的结果： [&quot;o&quot;, index: 4, input: &quot;hello&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h3 id="6-8-2-分组"><a href="#6-8-2-分组" class="headerlink" title="6.8.2 分组"></a>6.8.2 分组</h3><p>正则表达式中 （） 包起来的内容表示一个分组，可以通过分组来 <strong>提取自己想要的内容</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span>;<span class="keyword">var</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span>;<span class="keyword">var</span> result = pattern.exec(str);<span class="built_in">console</span>.log(result);<span class="comment">//[&quot;&#123;&#123;name&#125;&#125;&quot;, &quot;name&quot;,index: 7, input: &quot;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h3 id="6-8-3-字符串的-replace-函数"><a href="#6-8-3-字符串的-replace-函数" class="headerlink" title="6.8.3 字符串的 replace 函数"></a>6.8.3 字符串的 replace 函数</h3><p>replace() 函数用于在字符串中 用一些字符 替换 另一些字符的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span>;<span class="keyword">var</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span>;<span class="keyword">var</span> result = pattern.exec(str);str = str.replace(result[<span class="number">0</span>],result[<span class="number">1</span>]);<span class="built_in">console</span>.log(str);<span class="comment">//&lt;div&gt;我是name&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>使用循环来replace</p><p>因为用户输入的字符串长度不确定，我们replace次数不确定，所以我们可以利用while循环来进行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;今年&#123;&#123;    age &#125;&#125;岁了&lt;/div&gt;&#x27;</span>;<span class="keyword">var</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span>;<span class="keyword">var</span> result = <span class="literal">null</span>;<span class="keyword">while</span>(result = pattern.exec(str))&#123;  str = str.replace(result[<span class="number">0</span>],result[<span class="number">1</span>])&#125;<span class="built_in">console</span>.log(str);<span class="comment">//&lt;div&gt;name今年age岁了&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>替换成真是内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;  name&#125;&#125;---&#123;&#123;age  &#125;&#125;---&#123;&#123;sex&#125;&#125;&lt;/div&gt;&#x27;</span>;<span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;;<span class="keyword">var</span> pattern = <span class="regexp">/&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/</span>;<span class="comment">// 循环 whilevar result;while (result = pattern.exec(str)) &#123;    console.log(result); // 匹配到的结果（数组）[&quot;&#123;&#123;name&#125;&#125;&quot;, &quot;name&quot;]    // str = str.replace(result[0], obj[属性名]);    str = str.replace(result[0], obj[result[1]]);&#125;console.log(str)</span></span><br></pre></td></tr></table></figure><h2 id="6-9-实现简易的模板引擎"><a href="#6-9-实现简易的模板引擎" class="headerlink" title="6.9 实现简易的模板引擎"></a>6.9 实现简易的模板引擎</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第<span class="number">1</span>步，导入自己的模板引擎 --&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/myTemplate.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">address</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="comment">// 第2步，准备数据对象    var obj = &#123; name: &#x27;lisi&#x27;, age: 20, address: &#x27;汇大国际&#x27; &#125;;    // 第3步，准备模板    // 第4步，调用函数，生成html字符串    var htmlStr = template(&#x27;tpl&#x27;, obj);    console.log(htmlStr);    // 第5步，渲染到页面    document.querySelector(&#x27;#container&#x27;).innerHTML = htmlStr;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="function"><span class="keyword">function</span> <span class="title">template</span>(<span class="params">id, data</span>) </span>&#123;    <span class="keyword">var</span> content = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#&#x27;</span> + id).innerHTML;    <span class="comment">// 正则匹配    // 字符串替换（占位符替换成具体的值）    // 返回替换好的html字符串    var reg = /&#123;&#123;\s*([a-zA-Z]+)\s*&#125;&#125;/;    var result = null;    while (result = reg.exec(content)) &#123;        content = content.replace(result[0], data[result[1]]);    &#125;    return content;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="七-XMLHttpRequest"><a href="#七-XMLHttpRequest" class="headerlink" title="七 XMLHttpRequest"></a>七 XMLHttpRequest</h1><p><code>XMLHttpRequest</code>（简称 <code>xhr</code>）是浏览器提供的 <code>Javascript</code> 对象，通过它，可以<strong>请求服务器上的数据资源</strong>。<code>$.get</code>  <code>$.post</code>、<code>$.ajax</code>基于 <code>xhr</code> 对象封装出来的</p><h2 id="7-1-使用xhr发起GET请求（⭐⭐⭐）"><a href="#7-1-使用xhr发起GET请求（⭐⭐⭐）" class="headerlink" title="7.1 使用xhr发起GET请求（⭐⭐⭐）"></a>7.1 使用xhr发起GET请求（⭐⭐⭐）</h2><p><strong>步骤</strong></p><ul><li>创建 <code>xhr</code> 对象</li><li>调用 <code>xhr.open()</code> 函数</li><li>调用 <code>xhr.send()</code> 函数</li><li>监听 <code>xhr.onreadystatechange</code> 事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 XHR 对象var xhr = new XMLHttpRequest()// 2. 调用 open 函数xhr.open(&#x27;GET&#x27;, &#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;)// 3. 调用 send 函数xhr.send()// 4. 监听 onreadystatechange 事件xhr.onreadystatechange = function () &#123;  //监听xhr对象的请求状态readyState；与服务器响应的状态 status  //判断请求是否成功   if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;     // 获取服务器响应的数据     console.log(xhr.responseText)   &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="xhr对象的readyState属性"><a href="#xhr对象的readyState属性" class="headerlink" title="xhr对象的readyState属性"></a>xhr对象的readyState属性</h3><p><code>XMLHttpRequest</code> 对象的 <code>readyState</code> 属性，用来表示<strong>当前 <code>Ajax</code> 请求所处的状态</strong>。每个 <code>Ajax</code> 请求必然处于以下状态中的一个：</p><table><thead><tr><th>值</th><th>状态</th><th align="left">描述</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td align="left">XMLHttpRequest对象已被创建，但尚未调用open方法</td></tr><tr><td>1</td><td>OPEND</td><td align="left">open()方法已经被调用</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td align="left">send()方法已经被调用</td></tr><tr><td>3</td><td>LOAGING</td><td align="left">数据接收中，此时response属性中已经包含部分数据</td></tr><tr><td>4</td><td>DONE</td><td align="left">Ajax请求完成，数据传输要么成功要么失败</td></tr></tbody></table><h3 id="使用xhr发起带参数的GET请求"><a href="#使用xhr发起带参数的GET请求" class="headerlink" title="使用xhr发起带参数的GET请求"></a>使用xhr发起带参数的GET请求</h3><p>使用 <code>xhr</code> 对象发起带参数的 <code>GET</code> 请求时，只需在调用 <code>xhr.open</code> 期间，将get请求的参数，放到 url 地址 ？的后面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=3&#x27;</span>)xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=3&amp;bookname=西游记&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这种在 URL 地址后面拼接的参数，叫做<strong>查询字符串</strong></p><p><strong>格式：</strong>将英文的 <strong>?</strong> 放在<code>URL</code> 的末尾，然后再加上 <strong>参数＝值</strong> ，想加上多个参数的话，使用 <strong>&amp;</strong> 符号进行分隔</p><h3 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h3><p>在 <code>URL</code> 地址中不允许出现中文字符,需要将中文转为英文字符</p><p>浏览器提供了 <code>URL</code> 编码与解码的 <code>API</code>，分别是：</p><ul><li><code>encodeURI()</code> 编码的函数</li><li><code>decodeURI()</code> 解码的函数</li></ul><h2 id="7-2-使用-xhr-发起-POST-请求（⭐⭐⭐）"><a href="#7-2-使用-xhr-发起-POST-请求（⭐⭐⭐）" class="headerlink" title="7.2 使用 xhr 发起 POST 请求（⭐⭐⭐）"></a>7.2 使用 xhr 发起 POST 请求（⭐⭐⭐）</h2><p><strong>步骤</strong></p><ul><li>创建 <code>xhr</code> 对象</li><li>调用 <code>xhr.open()</code> 函数</li><li><strong>设置 Content-Type 属性</strong>（固定写法）</li><li>调用 <code>xhr.send()</code> 函数，<strong>同时指定要发送的数据</strong></li><li>监听 <code>xhr.onreadystatechange</code> 事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建 xhr 对象var xhr = new XMLHttpRequest();// 2.调用 open 函数xhr.open(&#x27;post&#x27;,&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;);// 3.设置 Content-Type 属性（固定写法）xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);// 4.调用 send 函数xhr.send(&#x27;bookname=老吴&amp;author=531&amp;publisher=531&#x27;);// 5.监听事件xhr.onreadystatechange = function()&#123;  //判断是否请求成功  if(xhr.readyState === 4 &amp;&amp; xhr.status === 200)&#123;    console.log(xhr.responseText);  &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-3-数据交换格式"><a href="#7-3-数据交换格式" class="headerlink" title="7.3 数据交换格式"></a>7.3 数据交换格式</h2><p><strong>服务器端</strong>与<strong>客户端</strong>之间进行<strong>数据传输与交换的格式</strong></p><h2 id="7-4-XML"><a href="#7-4-XML" class="headerlink" title="7.4 XML"></a>7.4 XML</h2><p>可扩展标记语言，因此<code>XML</code> 和 <code>HTML</code> 类似，也是一种标记语言。</p><p>XML和HTML的区别</p><p><code>XML</code> 和 <code>HTML</code> 虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><ul><li><code>HTML</code> 被设计用来描述网页上的<strong>内容</strong>，是网页内容的载体</li><li><code>XML</code> 被设计用来<strong>传输和存储数据</strong>，是数据的载体</li></ul><h2 id="7-5-JSON（⭐⭐⭐）"><a href="#7-5-JSON（⭐⭐⭐）" class="headerlink" title="7.5 JSON（⭐⭐⭐）"></a>7.5 JSON（⭐⭐⭐）</h2><blockquote><p>JSON的本质是字符串</p></blockquote><h3 id="JSON-的两种结构"><a href="#JSON-的两种结构" class="headerlink" title="JSON 的两种结构"></a>JSON 的两种结构</h3><ul><li>对象结构</li><li>数组结构</li></ul><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>把数据对象转换为字符串的过程，叫做<strong>序列化</strong>，例如：调用 <code>JSON.stringify()</code> 函数的操作，叫做 <code>JSON</code> 序列化。</p><p>把字符串 转换为数据对象的过程，叫做<strong>反序列化</strong>，例如：调用 <code>JSON.parse()</code> 函数的操作，叫做 <code>JSON</code> 反序列化。</p><h2 id="7-6-封装自己的Ajax函数（⭐⭐⭐）"><a href="#7-6-封装自己的Ajax函数（⭐⭐⭐）" class="headerlink" title="7.6 封装自己的Ajax函数（⭐⭐⭐）"></a>7.6 封装自己的Ajax函数（⭐⭐⭐）</h2><h3 id="步骤一-导入自定义的Ajax函数库"><a href="#步骤一-导入自定义的Ajax函数库" class="headerlink" title="步骤一 导入自定义的Ajax函数库"></a>步骤一 导入自定义的Ajax函数库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;./itheima.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤二-调用自定义的-itheima-函数"><a href="#步骤二-调用自定义的-itheima-函数" class="headerlink" title="步骤二 调用自定义的 itheima 函数"></a>步骤二 调用自定义的 itheima 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima(&#123;    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,    <span class="attr">data</span>: &#123;        <span class="attr">id</span>: <span class="number">1</span>,        <span class="attr">bookname</span>: <span class="string">&#x27;西游记&#x27;</span>    &#125;,    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;        <span class="built_in">console</span>.log(res);    &#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="步骤三-处理data参数"><a href="#步骤三-处理data参数" class="headerlink" title="步骤三 处理data参数"></a>步骤三 处理data参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveData</span>(<span class="params">obj</span>) </span>&#123;    <span class="comment">// 遍历对象    var arr = [];    for (var k in obj) &#123;        arr.push(k + &#x27;=&#x27; + obj[k]);    &#125;    // 把数组转成字符串    return arr.join(&#x27;&amp;&#x27;);&#125;</span></span><br></pre></td></tr></table></figure><h3 id="步骤四-定义-itheima-函数-options-参数选项"><a href="#步骤四-定义-itheima-函数-options-参数选项" class="headerlink" title="步骤四 定义 itheima 函数 options 参数选项"></a>步骤四 定义 itheima 函数 options 参数选项</h3><p><code>itheima()</code> 函数是我们自定义的 <code>Ajax</code> 函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性：</p><ul><li><code>method</code> 请求的类型</li><li><code>url</code> 请求的 <code>URL</code> 地址</li><li><code>data</code> 请求携带的数据</li><li><code>success</code> 请求成功之后的回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">itheima</span>(<span class="params">options</span>)</span>&#123;  <span class="comment">//创建 xhr 对象  var xhr = new XMLHttpRequest();  console.log(options.data); // &#123;id: 1, bookname: &quot;西游记&quot;&#125;  // 把data中的对象转成查询字符串    var qs = resolveData(options.data);  console.log(qs);  // id=1&amp;bookname=西游记  // 判断请求方式    if (options.type.toUpperCase() === &#x27;GET&#x27;) &#123;        // 调用open函数        xhr.open(options.type, options.url + &#x27;?&#x27; + qs);        // 调用send函数        xhr.send()    &#125; else if (options.type.toUpperCase() === &#x27;POST&#x27;) &#123;        // 调用open函数        xhr.open(options.type, options.url);        // 设置Content-Type属性        xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);        // 调用send函数        xhr.send(qs);    &#125;  // 监听onreadystatechange事件    xhr.onreadystatechange = function () &#123;        // 判断响应是否成功        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;            // 获取响应的数据            console.log(xhr.responseText); //&#123;&quot;status&quot;:200,&quot;msg&quot;:&quot;获取图书列表成功&quot;,&quot;data&quot;:[&#123;&quot;id&quot;:1,&quot;bookname&quot;:&quot;西游记&quot;,&quot;author&quot;:&quot;吴承恩&quot;,&quot;publisher&quot;:&quot;北京图书出版社&quot;&#125;]&#125;            // 把响应的json字符串转成对象            var data = JSON.parse(xhr.responseText);            // 调用success回调函数 options.success = function()&#123;&#125;            options.success(data);        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-7-设置-HTTP-请求时限"><a href="#7-7-设置-HTTP-请求时限" class="headerlink" title="7.7  设置 HTTP 请求时限"></a>7.7  设置 HTTP 请求时限</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置超时时间xhr.timeout = 1000;// 超时后执行的函数xhr.ontimeout = function () &#123;    alert(&#x27;请求超时了&#x27;);&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-8-没有表单时使用formdata对象来收集数据"><a href="#7-8-没有表单时使用formdata对象来收集数据" class="headerlink" title="7.8 没有表单时使用formdata对象来收集数据"></a>7.8 没有表单时使用formdata对象来收集数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* -----收集表单数据-------- */</span><span class="comment">// 创建formdata对象var fd = new FormData();// 为formdata添加表单项fd.append(&#x27;uname&#x27;, &#x27;zs&#x27;);fd.append(&#x27;upwd&#x27;, &#x27;123123&#x27;);/* -----发送ajax请求-------- */// 创建ajax对象var xhr = new XMLHttpRequest();// 调用open函数xhr.open(&#x27;post&#x27;, &#x27;http://www.liulongbin.top:3006/api/formdata&#x27;);// 调用send函数，直接提交formdata对象xhr.send(fd);// 监听onreadystatechange事件xhr.onreadystatechange = function () &#123;    // 判断请求是否成功    if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;        console.log(xhr.responseText);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-9-有表单时使用formdata对象来收集数据"><a href="#7-9-有表单时使用formdata对象来收集数据" class="headerlink" title="7.9 有表单时使用formdata对象来收集数据"></a>7.9 有表单时使用formdata对象来收集数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">&quot;form1&quot;</span>&gt;    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span>    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upwd&quot;</span> /&gt;</span></span>    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;<span class="regexp">/form&gt;&lt;script&gt;    var form1 = document.querySelector(&quot;#form1&quot;);    var btn = document.querySelector(&quot;button&quot;);    btn.addEventListener(&#x27;click&#x27;, function (e) &#123;        e.preventDefault();        /</span><span class="regexp">/ 收集表单数据        var fd = new FormData(form1);        /</span><span class="regexp">/ 发送ajax请求        var xhr = new XMLHttpRequest();        /</span><span class="regexp">/ 调用open函数        xhr.open(&#x27;post&#x27;, &#x27;http:/</span><span class="regexp">/www.liulongbin.top:3006/</span>api/formdata<span class="string">&#x27;);        // 调用send函数        xhr.send(fd);        // 监听onreadystatechange事件        xhr.onreadystatechange = function () &#123;            // 判断是否请求成功            if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;                console.log(xhr.responseText);            &#125;        &#125;    &#125;)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-10-文件上传"><a href="#7-10-文件上传" class="headerlink" title="7.10 文件上传"></a>7.10 文件上传</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html-结构"><a href="#html-结构" class="headerlink" title="html 结构"></a>html 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 20px;&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 800px; float: right;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> --&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px;margin-top: 20px;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="attr">role</span>=<span class="string">&quot;progressbar&quot;</span> <span class="attr">aria-valuenow</span>=<span class="string">&quot;45&quot;</span> <span class="attr">aria-valuemin</span>=<span class="string">&quot;0&quot;</span>       <span class="attr">aria-valuemax</span>=<span class="string">&quot;100&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span>&gt;</span>       0%    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js结构"><a href="#js结构" class="headerlink" title="js结构"></a>js结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#file1&quot;</span>)$(<span class="string">&quot;button&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="comment">// console.log(&#x27;ok&#x27;);    // 获取用户选中的文件列表，files属性，保存了选中的文件列表(伪数组)    var files = file1.files;    // console.log(files);    // 判断是否选择了文件    if (files.length &lt;= 0) &#123;        return alert(&#x27;请选择文件&#x27;);    &#125;    // 把选中的文件追加到formdata对象中    var fd = new FormData();    fd.append(&#x27;avatar&#x27;, files[0]);    // 发送ajax请求    var xhr = new XMLHttpRequest();    // 监听上传进度事件    xhr.upload.onprogress = function (e) &#123;        if (e.lengthComputable) &#123;          // e.lengthComputable 上传资源是否可计算（true或false）            // e.loaded 已经上传的大小            // e.total 文件的总大小            var result = Math.ceil(e.loaded / e.total * 100) + &#x27;%&#x27;;            console.log(result);            $(&quot;.progress-bar&quot;).css(&#x27;width&#x27;, result);            $(&quot;.progress-bar&quot;).html(result);        &#125;    &#125;    xhr.upload.onload = function() &#123;     $(&#x27;.progress-bar&#x27;)     // 移除上传中的类样式     .removeClass()     // 添加上传完成的类样式     .addClass(&#x27;progress-bar progress-bar-success&#x27;)&#125;    xhr.open(&#x27;post&#x27;, &#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;);    xhr.send(fd);    xhr.onreadystatechange = function () &#123;        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;            // 把json字符串转成对象            var data = JSON.parse(xhr.responseText);            // 把服务器上的照片展示到页面上            document.querySelector(&quot;#img&quot;).src = &#x27;http://www.liulongbin.top:3006&#x27; + data.url;        &#125;    &#125;&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="7-11-jQuery实现文件上传"><a href="#7-11-jQuery实现文件上传" class="headerlink" title="7.11 jQuery实现文件上传"></a>7.11 jQuery实现文件上传</h2><h3 id="定义-UI-结构"><a href="#定义-UI-结构" class="headerlink" title="定义 UI 结构"></a>定义 UI 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 jQuery --&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html布局结构"><a href="#html布局结构" class="headerlink" title="html布局结构"></a>html布局结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  文件选择框 --&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span> /&gt;</span><span class="comment">&lt;!--  上传文件的按钮 --&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!--  进度图  --&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/loading.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="comment">&lt;!-- bootstrap 中的进度条 --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; margin: 15px 10px;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-striped active&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span>&gt;</span>        0%    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--  img 标签，来显示上传成功以后的图片 --&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js结构-1"><a href="#js结构-1" class="headerlink" title="js结构"></a>js结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btnUpload&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="comment">// 获取用户选中的文件列表，files属性，保存了选中的文件列表(伪数组)    var files = $(&quot;#file1&quot;)[0].files;  // 判断用户是否选中文件    if (files.length &lt;= 0) &#123;        return alert(&#x27;请选择文件&#x27;);    &#125;    // 把选中的文件添加到formdata对象中    var fd = new FormData();    fd.append(&#x27;avatar&#x27;, files[0]);    // 发送ajax请求    $.ajax(&#123;        method: &quot;post&quot;,        url: &#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;,        data: fd,        // 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值        contentType: false,        // 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器        processData: false,        xhr: function () &#123;            // 自己指定ajax对象            var myXhr = new XMLHttpRequest();            // 监听上传进度事件            myXhr.upload.onprogress = function (e) &#123;                var result = Math.ceil(e.loaded / e.total * 100) + &#x27;%&#x27;;                console.log(result);                $(&quot;#percent&quot;).css(&#x27;width&#x27;, result).html(result);            &#125;            return myXhr;        &#125;,        // 请求发送之前执行        beforeSend: function () &#123;            $(&#x27;#loading&#x27;).show()        &#125;,        success: function (res) &#123;            if (res.status !== 200) return alert(&#x27;发送请求失败&#x27;);            // console.log(res.url); ///uploads/1615774516685_893ce068141545f8bdf87492b5f7cf1a.jpg            // 把服务器上的照片展示到页面上            $(&quot;#img&quot;)[0].src = &#x27;http://www.liulongbin.top:3006&#x27; + res.url;        &#125;,        // 请求完成之后执行(不管成功还是失败)        complete: function () &#123;            $(&#x27;#loading&#x27;).hide()        &#125;    &#125;)&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="jQuery实现loading效果"><a href="#jQuery实现loading效果" class="headerlink" title="jQuery实现loading效果"></a><code>jQuery</code>实现<code>loading</code>效果</h3><p>注意点： <code>$(document).ajaxStart()</code> 函数<strong>会监听当前文档内所有的 Ajax 请求</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听ajax请求被发起$(document).ajaxStart(function () &#123;    $(&#x27;#loading&#x27;).show()&#125;);// 监听ajax请求结束$(document).ajaxStop(function () &#123;    $(&#x27;#loading&#x27;).hide()&#125;)</span></span><br></pre></td></tr></table></figure><p>改进</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求发送之前执行beforeSend: function () &#123;    $(&#x27;#loading&#x27;).show()&#125;// 请求完成之后执行(不管成功还是失败)complete: function () &#123;    $(&#x27;#loading&#x27;).hide()&#125;</span></span><br></pre></td></tr></table></figure><h1 id="八-axios（⭐⭐⭐）"><a href="#八-axios（⭐⭐⭐）" class="headerlink" title="八 axios（⭐⭐⭐）"></a>八 axios（⭐⭐⭐）</h1><h2 id="8-1-什么是-axios"><a href="#8-1-什么是-axios" class="headerlink" title="8.1 什么是 axios"></a>8.1 什么是 axios</h2><p>Axios 是专注于<strong>网络数据请求</strong>的库。相比于原生的 <code>XMLHttpRequest</code> 对象，<code>axios</code> <strong>简单易用</strong>。</p><p>相比于 <code>jQuery</code>，<code>axios</code> 更加<strong>轻量化</strong>，只专注于网络数据请求。</p><h2 id="8-2-axios-发起-GET-请求"><a href="#8-2-axios-发起-GET-请求" class="headerlink" title="8.2  axios 发起 GET 请求"></a>8.2  axios 发起 GET 请求</h2><p>语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="comment">/*参数*/</span> &#125; &#125;).then(callback)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;发送get请求&lt;<span class="regexp">/button&gt;var btn1 = document.querySelector(&quot;#btn1&quot;);btn1.addEventListener(&#x27;click&#x27;, function () &#123;    var url = &#x27;http:/</span><span class="regexp">/www.liulongbin.top:3006/</span>api/getbooks<span class="string">&#x27;;    axios.get(url, &#123;        params: &#123;            id: 24        &#125;    &#125;).then(function (res) &#123;        console.log(res);        console.log(res.data);    &#125;)&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="8-3-axios-发起-POST-请求"><a href="#8-3-axios-发起-POST-请求" class="headerlink" title="8.3  axios 发起 POST 请求"></a>8.3  axios 发起 POST 请求</h2><p>语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="comment">/*参数*/</span> &#125;).then(callback)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn2&quot;</span>&gt;发送post请求&lt;<span class="regexp">/button&gt;var btn2 = document.querySelector(&quot;#btn2&quot;);btn2.addEventListener(&#x27;click&#x27;, function () &#123;    var url = &#x27;http:/</span><span class="regexp">/www.liulongbin.top:3006/</span>api/addbook<span class="string">&#x27;;    axios.post(url, &#123;        bookname: &#x27;</span>老吴的一天<span class="string">&#x27;,        author: &#x27;</span>老吴<span class="string">&#x27;,        publisher: &#x27;</span>老吴<span class="string">&#x27;    &#125;).then(function (res) &#123;        console.log(res);        console.log(res.data);    &#125;)&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="8-4-直接使用-axios-发起请求"><a href="#8-4-直接使用-axios-发起请求" class="headerlink" title="8.4 直接使用 axios 发起请求"></a>8.4 直接使用 axios 发起请求</h2><p>语法格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123; <span class="attr">method</span>: <span class="string">&#x27;请求类型&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;请求的URL地址&#x27;</span>, <span class="attr">data</span>: &#123; <span class="comment">/* POST数据 */</span> &#125;, <span class="attr">params</span>: &#123; <span class="comment">/* GET参数 */</span> &#125;&#125;).then(callback)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;btn3&quot;</span>&gt;使用axios发送get请求&lt;<span class="regexp">/button&gt;&lt;button id=&quot;btn4&quot;&gt;使用axios发送post请求&lt;/</span>button&gt;<span class="keyword">var</span> btn3 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn3&quot;</span>);btn3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    axios(&#123;        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,        <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,        <span class="attr">params</span>: &#123;            <span class="attr">id</span>: <span class="number">1</span>        &#125;    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;        <span class="built_in">console</span>.log(res);        <span class="built_in">console</span>.log(res.data);    &#125;)&#125;)<span class="keyword">var</span> btn4 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#btn4&quot;</span>);btn4.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    axios(&#123;        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,        <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,        <span class="attr">data</span>: &#123;            <span class="attr">bookname</span>: <span class="string">&#x27;吴老的一天&#x27;</span>,            <span class="attr">author</span>: <span class="string">&#x27;吴老&#x27;</span>,            <span class="attr">publisher</span>: <span class="string">&#x27;吴老&#x27;</span>        &#125;    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;        <span class="built_in">console</span>.log(res);        <span class="built_in">console</span>.log(res.data);    &#125;)&#125;)</span><br></pre></td></tr></table></figure><h1 id="九-同源策略-⭐⭐⭐"><a href="#九-同源策略-⭐⭐⭐" class="headerlink" title="九 同源策略(⭐⭐⭐)"></a>九 同源策略(⭐⭐⭐)</h1><h2 id="9-1-什么是同源"><a href="#9-1-什么是同源" class="headerlink" title="9.1 什么是同源"></a>9.1 什么是同源</h2><p>如果两个页面的<strong>协议</strong>，<strong>域名</strong>和<strong>端口</strong>都相同，则两个页面具有相同的源。</p><h2 id="9-2-什么是同源策略"><a href="#9-2-什么是同源策略" class="headerlink" title="9.2 什么是同源策略"></a>9.2 什么是同源策略</h2><p><strong>同源策略</strong>（英文全称 Same origin policy）是<strong>浏览器</strong>提供的一个安全功能，用于隔离潜在恶意文件的重要安全机制</p><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><p>① 无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p><p>② 无法接触非同源网页的 DOM</p><p>③ 无法向非同源地址发送 Ajax 请求</p><h1 id="十-跨域-⭐⭐⭐"><a href="#十-跨域-⭐⭐⭐" class="headerlink" title="十 跨域(⭐⭐⭐)"></a>十 跨域(⭐⭐⭐)</h1><h2 id="10-1-什么是跨域"><a href="#10-1-什么是跨域" class="headerlink" title="10.1 什么是跨域"></a>10.1 什么是跨域</h2><p><strong>同源</strong>指的是两个 URL 的协议、域名、端口一致，反之，则是<strong>跨域</strong></p><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互</p><h2 id="10-2-浏览器对跨域请求的拦截"><a href="#10-2-浏览器对跨域请求的拦截" class="headerlink" title="10.2 浏览器对跨域请求的拦截"></a>10.2 浏览器对跨域请求的拦截</h2><p><strong>注意：</strong>浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p><h2 id="10-3-如何实现跨域数据请求"><a href="#10-3-如何实现跨域数据请求" class="headerlink" title="10.3 如何实现跨域数据请求"></a>10.3 如何实现跨域数据请求</h2><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <code>JSONP</code> 和 <code>CORS</code>。</p><p><strong><code>JSONP</code>：</strong>出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。<strong>缺点</strong>是只支持 <code>GET</code> 请求，不支持 <code>POST</code> 请求。</p><p><strong><code>CORS</code>：</strong>出现的较晚，它是 <code>W3C</code> 标准，属于跨域 <code>Ajax</code> 请求的根本解决方案。支持 <code>GET</code> 和 <code>POST</code> 请求。<strong>缺点</strong>是不兼容某些低版本的浏览器</p><h1 id="十一-JSONP"><a href="#十一-JSONP" class="headerlink" title="十一 JSONP"></a>十一 JSONP</h1><p>JSONP (JSON with Padding) 是 <code>JSON</code> 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p><h2 id="11-1-JSONP的实现原理"><a href="#11-1-JSONP的实现原理" class="headerlink" title="11.1 JSONP的实现原理"></a>11.1 JSONP的实现原理</h2><p>利用 script 标签没有同源限制</p><p>1、定义一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">data</span>) </span>&#123;        <span class="built_in">console</span>.log(<span class="string">&#x27;goudan&#x27;</span>);        <span class="built_in">console</span>.log(data);    &#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、把接口地址放到<script>标签的src属性上，并且把函数名作为查询字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://www.liulongbin.top:3006/api/jsonp?callback=abc&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="11-2-缺点"><a href="#11-2-缺点" class="headerlink" title="11.2 缺点"></a>11.2 缺点</h2><p>1、只能发送get请求</p><p>2、不是ajax请求（没有使用xmlhttprequest对象）</p><h2 id="11-3-jQuery中的JSONP"><a href="#11-3-jQuery中的JSONP" class="headerlink" title="11.3 jQuery中的JSONP"></a>11.3 jQuery中的JSONP</h2><p>jquery中发送jsonp请求</p><p>​        1）不需要额外定义函数，success就是</p><p>​         2）callback参数会被自动添加到URL后面</p><p>​         3）函数名是随机生成的</p><p>​         4）实现也是动态创建script标签，加载完毕再删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/jsonp&#x27;</span>,    <span class="attr">data</span>: &#123;        <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,        <span class="attr">age</span>: <span class="number">20</span>    &#125;,    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,    <span class="comment">// 自定义参数名称，默认值是‘callback’    jsonp: &#x27;callback&#x27;,    // 自定义函数名称，默认值是随机生成的    jsonpCallback: &#x27;abc&#x27;,    success: function (res) &#123;        console.log(res);    &#125;&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="十二-淘宝搜索"><a href="#十二-淘宝搜索" class="headerlink" title="十二 淘宝搜索"></a>十二 淘宝搜索</h1><h2 id="12-1-引入外部文件"><a href="#12-1-引入外部文件" class="headerlink" title="12.1 引入外部文件"></a>12.1 引入外部文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-2-部分HTML结构"><a href="#12-2-部分HTML结构" class="headerlink" title="12.2 部分HTML结构"></a>12.2 部分HTML结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索区域（搜索框和搜索按钮） --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-box&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要搜索的内容&quot;</span> /&gt;</span>          &lt;buttonclass=&quot;btnSearch&quot;&gt; 搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 搜索建议列表 --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;suggest-list&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;suggest-item&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;suggest-item&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-3-定义模板结构"><a href="#12-3-定义模板结构" class="headerlink" title="12.3 定义模板结构"></a>12.3 定义模板结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span><span class="handlebars"><span class="xml">    </span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> result&#125;&#125;</span><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;suggest-item&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value</span>[0]&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-4-js结构"><a href="#12-4-js结构" class="headerlink" title="12.4 js结构"></a>12.4 js结构</h2><ol><li>先获取用户输入的关键字，判断输入的内容是否为空，再获取搜索建议</li><li>通过封装一个 getSuggestList 函数来调用 ajax 来获取搜索建议</li><li>通过封装一个 renderSuggestList 函数来渲染获取到的搜索建议<ul><li>判断获取到的数据是否为空，为空的话存放建议的盒子隐藏</li><li>导入模板引擎，设置模板结构，调用 template 渲染到页面</li></ul></li><li>用户输入框为空的时候，清空存放建议的盒子并隐藏</li><li>实现输入框的防抖： 定义一个timer的id，封装一个防抖的 debounceSearch 函数定义一个定时器，一定时间内不触发keyup时间就会触发来获取搜索建议列表，一触发keyup事件就会清除定时器 </li><li>定义一个全局空对象做缓存，将输入框的数据作为键，获取到的搜索建议作为值，存到对象中，当输入数据时优先从缓存中获取建议</li><li>用户数据——&gt;缓存对象中的数据——&gt;缓存中没有从getSuggestList 中获取</li><li>renderSuggestList——&gt;debounceSearch——&gt; getSuggestList——&gt;renderSuggestList</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    <span class="comment">// 实现输入框的防抖    var timer = null;    // 定义一个防抖的函数    function debounceSearch(kw) &#123;        timer = setTimeout(function () &#123;            getSuggestList(kw)        &#125;, 500)    &#125;    $(&quot;#ipt&quot;).on(&#x27;keyup&#x27;, function () &#123;        // 清除定时器        clearTimeout(timer);        // 获取输入框的内容        var keywords = $(this).val().trim();        // 判断输入的内容是否为空        if (keywords.length === 0) &#123;            return $(&quot;#suggest-list&quot;).empty().hide();        &#125;        // 判断缓存中是否有数据        if (cacheObj[keywords]) &#123;            return renderSuggestList(cacheObj[keywords]);        &#125;        // 优先从缓存中获取搜索建议        debounceSearch(keywords);    &#125;);    // 封装getSuggestList函数来获取搜索建议数据    function getSuggestList(kw) &#123;        $.ajax(&#123;            method: &#x27;get&#x27;,            url: &#x27;http://www.liulongbin.top:3006/api/sug&#x27;,            data: &#123;                q: kw            &#125;,            success: function (res) &#123;                // console.log(res);                renderSuggestList(res)            &#125;        &#125;)    &#125;    // 定义全局缓存对象    var cacheObj = &#123;&#125;;    function renderSuggestList(re) &#123;        // 判断数据是否为空        if (re.result.length === 0) &#123;            return $(&quot;#suggest-list&quot;).empty().hide();        &#125;        // 把数据缓存到全局变量中        /* 搜索词作为缓存对象的属性，建议数据作为属性值 */        var k = $(&quot;#ipt&quot;).val().trim();        cacheObj[k] = re;        // 渲染数据到页面        var htmlStr = template(&#x27;tpl&#x27;, re);        $(&quot;#suggest-list&quot;).empty().html(htmlStr).show();    &#125;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十三-防抖-amp-节流"><a href="#十三-防抖-amp-节流" class="headerlink" title="十三 防抖&amp;节流"></a>十三 防抖&amp;节流</h1><h2 id="13-1-输入框防抖"><a href="#13-1-输入框防抖" class="headerlink" title="13.1 输入框防抖"></a>13.1 输入框防抖</h2><p>当事件被触发后，延迟 <code>n</code> 秒后再执行回调，如果在这 <code>n</code> 秒内事件又被触发，则重新计时。</p><p><strong>好处：</strong>能够保证用户在频繁触发某些事件的时候，不会频繁的执行回调，只会被执行一次</p><h2 id="13-2-节流"><a href="#13-2-节流" class="headerlink" title="13.2 节流"></a>13.2 节流</h2><p>单位时间内事件只触发一次，如果单位时间内多次触发事件，代码不会执行，降低事件触发的频率，事件代码在执行过程中被锁定的，执行完毕之后才能执行下一次。</p><h2 id="13-3-总结防抖和节流的区别"><a href="#13-3-总结防抖和节流的区别" class="headerlink" title="13.3 总结防抖和节流的区别"></a>13.3 总结防抖和节流的区别</h2><ul><li><strong>防抖</strong>：如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略！</li><li><strong>节流</strong>：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
